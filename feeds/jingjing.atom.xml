<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/jingjing.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-12-23T00:00:00-08:00</updated><entry><title>Myria updates</title><link href="http://blog.halper.in/posts/2014/12/23/myria-updates/" rel="alternate"></link><updated>2014-12-23T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-12-23:posts/2014/12/23/myria-updates/</id><summary type="html">&lt;p&gt;Not much happening this week, what with the holidays. I took advantage of the break to handle some long-overdue code reviews and code improvements to Myria.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/jwang"&gt;Jingjing Wang&lt;/a&gt; has added resource profiling to Myria. We can now measure the resource consumption of each operator during query execution. (Unfortunately, these data are not yet available from the website.) See &lt;a href="https://github.com/uwescience/myria/pull/656"&gt;myria#656&lt;/a&gt; and &lt;a href="https://github.com/uwescience/myria-web/pull/241"&gt;myria-web#241&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik Moritz&lt;/a&gt; implemented binary copy for Postgres. Database inserts are now substantially faster, especially for floating point or doubles where we could not use the &lt;code&gt;COPY&lt;/code&gt; mode before (turns out &lt;code&gt;double&lt;/code&gt; → &lt;code&gt;string&lt;/code&gt; → &lt;code&gt;double&lt;/code&gt; is not an identity-preserving transform. Duh.) See &lt;a href="https://github.com/uwescience/myria/pull/667"&gt;myria#667&lt;/a&gt; and &lt;a href="https://github.com/uwescience/myria/pull/669"&gt;myria#669&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dominik also improved the performance of the profiler using the new interface. &lt;a href="https://github.com/uwescience/myria/pull/672"&gt;myria#672&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/chushumo"&gt;Shumo Chu&lt;/a&gt; is getting Myria ready for Apache licensing — we just need to get rid of a few pesky &lt;span class="caps"&gt;GPL&lt;/span&gt;’ed dependencies. Tentatively, it looks like we have easy switch-in replacements that might also yield a bit faster query execution. &lt;a href="https://github.com/uwescience/myria/pull/658"&gt;myria#658&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I upgraded our continuous integration to Travis-&lt;span class="caps"&gt;CI&lt;/span&gt;’s new Docker-based containers. This lets us re-enable caching and also tests that execute multicore and faster! &lt;a href="https://github.com/uwescience/myria/pull/673"&gt;myria#673&lt;/a&gt; and &lt;a href="https://github.com/uwescience/myria/pull/674"&gt;myria#674&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As part of these upgrades I cleaned up and better tested several operators.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short: nothing much to see here, but Myria will hopefully work faster and better. One of Sophie’s sample queries &lt;a href="https://demo.myria.cs.washington.edu/queries?q=good_files_v4_profiled+%3D+0&amp;amp;max=59793&amp;amp;limit=2"&gt;sped up from 12m to 4m&lt;/a&gt;, and the 3x improvement is entirely due to the binary inserts!&lt;/p&gt;
&lt;p&gt;We have also begun interviewing candidates for the Myria software engineer position.&lt;/p&gt;</summary><category term="dominik"></category><category term="jingjing"></category><category term="shumo"></category><category term="myria"></category></entry><entry><title>Incubator and catching up on Myria</title><link href="http://blog.halper.in/posts/2014/11/11/incubator-and-catching-up-on-myria/" rel="alternate"></link><updated>2014-11-11T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-11:posts/2014/11/11/incubator-and-catching-up-on-myria/</id><summary type="html">&lt;p&gt;Today, &lt;span class="caps"&gt;UW&lt;/span&gt; is closed for the Veteran’s Day holiday; I took the opportunity to continue catching up on several weeks’ email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://depts.washington.edu/hacholab/labdetails.php?id=58"&gt;Ângela Katsuyama&lt;/a&gt; came to the Incubator for a few hours this afternoon. With &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, she continued joining and analyzing her data, attempting to answer questions like “what is the average bed time for each student?” in &lt;a href="https://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Myria, I reviewed a bunch of the great code that &lt;a href="http://r.halper.in/coauth/jwang"&gt;Jingjing Wang&lt;/a&gt; has written and merged some of her new features.&lt;/p&gt;
&lt;p&gt;Finally, I also had the wacky idea (based on a question from Ângela) to add some fancy math operators to the Myria language. Would it not be cool if the following was legal code?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;select * from R where x ≤ 5;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have a working prototype and will bring it to the team soon. At the best, these operators would make the language easier to learn and example programs easier to understand. At the worst, it’s confusing and/or misleading — “How do I type that operator?”. (The answer &lt;code&gt;Option&lt;/code&gt;+&lt;code&gt;,&lt;/code&gt; on a Mac, in this case).&lt;/p&gt;
&lt;p&gt;Oh, also — Bill gave us a tour of the new Data Science Studio space. Looking forward to moving in there as soon as we can!&lt;/p&gt;</summary><category term="ângela"></category><category term="jingjing"></category><category term="incubator"></category><category term="myria"></category></entry><entry><title>Back from vacation</title><link href="http://blog.halper.in/posts/2014/11/10/back-from-vacation/" rel="alternate"></link><updated>2014-11-10T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-10:posts/2014/11/10/back-from-vacation/</id><summary type="html">&lt;p&gt;I was offline for the past two weeks, and it was glorious. I highly recommend it!&lt;/p&gt;
&lt;p&gt;Monday is meetings day.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/shrainik"&gt;Shrainik&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, and I discussed our efforts (with &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;) to define and quantify the extent of variety in different datasets and understand how data management and integration systems help combat or even reduce this variety. The three of them wrote up our initial thoughts while I was gone, and now we are discussing next steps. As an aside, I am excited to repurpose their code to find all the crazy ways scientists use UDFs in SQLShare.&lt;/p&gt;
&lt;p&gt;We talked with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; about next steps for the failed submission on his Grappa work. By and large, the reviewers missed the boat — but that is our fault: what it really means is that we need to present the work better through organization, writing, and figures. We also discussed plans for generals and the relative pros and cons of literature review-style generals vs thesis proposal-style. In my opinion, a lit review would be more useful because Brandon’s work is so cross-disciplinary. The main counter-argument is that a thesis proposal might be more directly on the fast-path to graduation, and negotiations continue.&lt;/p&gt;
&lt;p&gt;In the Myria meeting, &lt;a href="http://homes.cs.washington.edu/~jwang/"&gt;Jingjing Wang&lt;/a&gt; showed off her improvements to launching, shutting down, and restarting Myria. Soon the production Myria demo will be much easier to kick when something goes funky. &lt;a href="https://github.com/lbrendanl"&gt;Brendan Lee&lt;/a&gt; has been documenting the Myria &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; using &lt;a href="http://apiary.io"&gt;apiary.io&lt;/a&gt; and will be showing that off soon as well.&lt;/p&gt;
&lt;p&gt;In the &lt;span class="caps"&gt;UWDB&lt;/span&gt; paper seminar, &lt;a href="http://homes.cs.washington.edu/~sviyer/"&gt;Srini Iyer&lt;/a&gt; and &lt;a href="http://homes.cs.washington.edu/~prasang/"&gt;Prasang Upadhyaya&lt;/a&gt; presented the MadLINQ paper by Qian, et al. It was fun to see the theorists and the systems folks in the room discuss the relative tradeoffs between elegance and performance of the design. Some of these techniques are relatively straightforward techniques to implement in Myria, i.e. tiled matrix multiply with replication looks an awful lot like HyperCube shuffle with range-partitioning.&lt;/p&gt;</summary><category term="brandon"></category><category term="dominik"></category><category term="jingjing"></category><category term="shrainik"></category><category term="nyu"></category><category term="friere"></category></entry></feed>