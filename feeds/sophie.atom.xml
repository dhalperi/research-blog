<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/sophie.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-10-16T00:00:00-07:00</updated><entry><title>SSL certificates suck; Incubator 3.2 → NYU</title><link href="http://blog.halper.in/posts/2014/10/16/ssl-certificates-suck-incubator-32-nyu/" rel="alternate"></link><updated>2014-10-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-16:posts/2014/10/16/ssl-certificates-suck-incubator-32-nyu/</id><summary type="html">&lt;p&gt;Today was “I-hate-certificates” day. Four different people had ugly issues with &lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; has finished cleaning the underway data in SQLShare and is ready to load it into Myria. However, she had problems using Myria’s Python client because her Mac did not trust Myria’s &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate. (&lt;span class="caps"&gt;UW&lt;/span&gt;’s choice of Certificate Authority (&lt;span class="caps"&gt;CA&lt;/span&gt;), InCommon, has apparently not been blessed by Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X.)&lt;/li&gt;
&lt;li&gt;Brendan Lee has been working with the &lt;a href="http://db.cs.washington.edu/"&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Database Group&lt;/a&gt; on &lt;a href="http://dl.acm.org/citation.cfm?id=2627774"&gt;MyMergerTree&lt;/a&gt;. MyMergerTree is powered by Myria, so after I enabled &lt;span class="caps"&gt;SSL&lt;/span&gt; yesterday, I asked him to fix the web service to use &lt;span class="caps"&gt;HTTPS&lt;/span&gt; instead of &lt;span class="caps"&gt;HTTP&lt;/span&gt; links. Well, great, InCommon has not been blessed by Ubuntu either.&lt;/li&gt;
&lt;li&gt;Two different people came to Incubator office hours to learn about &lt;code&gt;git&lt;/code&gt;. They brought older laptops with, you guessed it, older versions of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X installed. And, surprise surprise, &lt;a href="https://help.github.com/articles/error-ssl-certificate-problem-verify-that-the-ca-cert-is-ok/"&gt;GitHub’s current &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate&lt;/a&gt; is not blessed by those old versions of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X, and the only way to fix it is to &lt;em&gt;upgrade the &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/em&gt;. You know, because that’s a &lt;em&gt;totally reasonable&lt;/em&gt; option.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such a waste of time. Why do we make users jump through these hoops? We worked around these issues in a variety of ways, all of which involved disabling certificate verification. Ugh, that’s a fail. (In one case we were able to switch from &lt;span class="caps"&gt;HTTPS&lt;/span&gt; to &lt;span class="caps"&gt;SSH&lt;/span&gt; for GitHub — that, at least, made me moderately less sad at heart.)&lt;/p&gt;
&lt;p&gt;I left at lunch for the airport. I’ll be at &lt;span class="caps"&gt;NYU&lt;/span&gt; in Brooklyn for the next week giving talks, making connections, and generally getting to know better our Moore-Sloan &lt;span class="caps"&gt;DSE&lt;/span&gt; collaborators across the country. I spent the entire flight working on slides for the various talks.&lt;/p&gt;</summary><category term="sophie"></category><category term="incubator"></category></entry><entry><title>Incubator week 3.1</title><link href="http://blog.halper.in/posts/2014/10/14/incubator-week-31/" rel="alternate"></link><updated>2014-10-14T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-14:posts/2014/10/14/incubator-week-31/</id><summary type="html">&lt;p&gt;Today was day 1 of &lt;a href="http://data.uw.edu/incubator"&gt;Incubator&lt;/a&gt; week 3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; exposed a locking issue in &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;: if a running query reads from table &lt;code&gt;T&lt;/code&gt; and a user changes the sharing on table &lt;code&gt;T&lt;/code&gt;, SQLShare basically locks the entire system until the query finishes. We need to revisit this issue, but it is unlikely to be a common problem: today was literally the first time it has ever cropped up. We also discussed a variety of &lt;span class="caps"&gt;SQL&lt;/span&gt;-isms such as how to convert a Julian Day into a &lt;code&gt;Date&lt;/code&gt; and the like. Sophie is now really off to the races with the underway data.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I played with various methods of inspecting on the progress and performance of his loading data into PostgreSQL. We went down a bit of a rabbit-hole when trying to figure out why it was not using the index to compute the number of distinct fields in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;explain&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;distinct&lt;/span&gt; &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="k"&gt;Aggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;HashAggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17631684&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;602685952&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;729&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;


&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;"public.pixels"&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Type&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;---------+----------------------+----------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;pixelid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pixels_pixelid_seq'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="n"&gt;ra&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;decl&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;fval&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;radec&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3786&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;mask&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_pkey"&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;"fieldidx"&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Foreign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_fieldid_fkey"&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it turns out, PostgreSQL’s &lt;code&gt;DISTINCT&lt;/code&gt; implementation simply cannot do the right thing.&lt;/p&gt;
&lt;p&gt;I also set up the &lt;a href="http://uwdatascienceincubator.wordpress.com/"&gt;Incubator Blog&lt;/a&gt; today: it combines posts from all of the incubator participants. Setting up this blog was really cool — I used &lt;a href="https://ifttt.com/"&gt;If This, Then That (&lt;span class="caps"&gt;IFTTT&lt;/span&gt;)&lt;/a&gt; to automatically crawl the feeds from the individual blogs and post them on a shared Wordpress! (Thanks to our friends at &lt;span class="caps"&gt;UC&lt;/span&gt; Berkeley for recommending &lt;span class="caps"&gt;IFTTT&lt;/span&gt; via the new Slack communication channel we’ve all been using.)&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="incubator"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category></entry><entry><title>Data and databases</title><link href="http://blog.halper.in/posts/2014/10/13/data-and-databases/" rel="alternate"></link><updated>2014-10-13T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-13:posts/2014/10/13/data-and-databases/</id><summary type="html">&lt;p&gt;Over the weekend, both &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; worked independently on their &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; projects; I spent some time then and today answering emails :).&lt;/p&gt;
&lt;p&gt;Sophie has been loading underway data (&lt;span class="caps"&gt;GPS&lt;/span&gt;, temperature, salinity, etc. from ships in motion) into &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; for cleaning. Every research vessel is its own special flower that represents dates and times in different ways, and we want to bring them all into a normalized format. We will then load the normalized data into Myria and join it with the SeaFlow data in her analyses. 
&lt;small&gt;(For now, the Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Server system underpinning SQLShare is better for messy data than Myria itself, because &lt;span class="caps"&gt;SQL&lt;/span&gt; Server handles more data types and corner cases than we do. This will change!)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We made Sophia’s queries run &lt;em&gt;dramatically&lt;/em&gt; faster by materializing SQLShare datasets once all the fields were in the right types. Turns out, recomputing &lt;code&gt;datetime&lt;/code&gt; objects can be really slow when you want to do interval joins on them! We also discussed how to find bad rows in datasets, e.g., if you’re getting errors casting values to &lt;code&gt;float&lt;/code&gt;, you need to know about &lt;code&gt;WHERE ISNUMERIC(x) &amp;lt;&amp;gt; 1&lt;/code&gt; so you can find the bad values of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Andy has been experiencing the joys of loading data into databases with indexes, foreign keys, auto commit, checkpointing, and all that. After some iteration, we figured out to check the Postgres logs and found that his remote &lt;code&gt;COPY&lt;/code&gt; commands were running out of memory.  Chunking the data made it finish.&lt;/p&gt;
&lt;p&gt;I finally got &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria’s web interface&lt;/a&gt; to correctly push queries into the Postgres without weird Google App Engine issues, fixed all the Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; tests, and deployed it.&lt;/p&gt;</summary><category term="sophie"></category><category term="becker"></category><category term="incubator"></category><category term="reading"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category><category term="raco"></category><category term="myria"></category></entry><entry><title>2014-09-24 daily</title><link href="http://blog.halper.in/posts/2014/09/24/2014-09-24-daily/" rel="alternate"></link><updated>2014-09-24T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-24:posts/2014/09/24/2014-09-24-daily/</id><summary type="html">&lt;p&gt;We made final decisions about the proposed Incubator projects today. We ended up with 6 exciting projects we accepted, and 20 more we wish we could have said yes to. If your proposal was not accepted, or you want to get in touch with us some other way, note that we will be starting office hours every Thursday 9—11 in the Data Science Studio space beginning next week. (We will use Sieg 326 for the first month until construction is done).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I held a “pre-incubator” (hers was one of the chosen proposals) hack session in the afternoon, during which we wrote five or six queries to help us determine how to best co-align cytograms from different cruises and analyze the intersecting area for her research cellular diversity. It should be a fun project to continue working on this quarter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~shrainik/"&gt;Shrainik Jain&lt;/a&gt; is back from Microsoft Research (where neither he nor his team was recently fired), and we chatted about his summer project and his upcoming quals project on identifying and quantifying the “high-variety” (the most important V, from my opinion) aspect of “big data”.&lt;/p&gt;</summary><category term="sophie"></category><category term="shrainik"></category><category term="incubator"></category><category term="myria"></category><category term="seaflow"></category></entry><entry><title>2014-09-19 daily</title><link href="http://blog.halper.in/posts/2014/09/19/2014-09-19-daily/" rel="alternate"></link><updated>2014-09-19T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-19:posts/2014/09/19/2014-09-19-daily/</id><summary type="html">&lt;p&gt;Today &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I hacked on Myria for SeaFlow once again. We found another few opportunities for language and usability improvements, and made little progress because of an issue introduced when fixing other bugs earlier this week.&lt;/p&gt;
&lt;p&gt;In the Myria research meeting, we had both Johannes Gehrke from Microsoft/Cornell and new/future &lt;span class="caps"&gt;UW&lt;/span&gt; database faculty &lt;a href="http://people.csail.mit.edu/akcheung/"&gt;Alvin Cheung&lt;/a&gt; at the Myria meeting. We talked about the real apps (Sophie, Sandra) that we implemented with Myria this summer and about future research ideas.&lt;/p&gt;</summary><category term="sophie"></category><category term="myria"></category><category term="alvin"></category><category term="sandra"></category></entry><entry><title>2014-09-08 daily</title><link href="http://blog.halper.in/posts/2014/09/08/2014-09-08-daily/" rel="alternate"></link><updated>2014-09-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-08:posts/2014/09/08/2014-09-08-daily/</id><summary type="html">&lt;p&gt;Today we held the information session for the second installation of our Data Science Incubator projects which we will hold in the Spring. It was fairly well attended; maybe 20—25 people came and many of these indicated that they will be submitting proposals.&lt;/p&gt;
&lt;p&gt;Over the weekend and today I pushed several new optimizations to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; relating to opportunities identified by my work with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; last week.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="myria"></category><category term="sophie"></category></entry><entry><title>2014-09-03 daily</title><link href="http://blog.halper.in/posts/2014/09/03/2014-09-03-daily/" rel="alternate"></link><updated>2014-09-03T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-03:posts/2014/09/03/2014-09-03-daily/</id><summary type="html">&lt;p&gt;Today’s highlight was another hack session with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. The &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;same query to compute the cytometric diversity (“richness”)&lt;/a&gt; that we ran a month ago on a smaller dataset now ran out of memory after 12 minutes; after an hour of futzing I got it to &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;finish successfully&lt;/a&gt; in 2.5 minutes. In the second half of the post, I will dive into this particular query more deeply.&lt;/p&gt;
&lt;p&gt;We met with the designer to discuss possible new logos and branding for the &lt;span class="caps"&gt;UW&lt;/span&gt; eScience Institute and for the &lt;span class="caps"&gt;WRF&lt;/span&gt; Data Science Studio we will be opening (and moving into) in November.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="http://r.halper.in/people/asterios"&gt;Asterios&lt;/a&gt; invited me to be a co-chair for next year’s &lt;strike&gt;Data Analytics in the Cloud&lt;/strike&gt; &lt;strong&gt;Data Analytics at Scale&lt;/strong&gt; (&lt;em&gt;DanaC&lt;/em&gt;) workshop at &lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2015, which would be the fourth incarnation of &lt;a href="http://danac-workshop.dima.tu-berlin.de/"&gt;the DanaC workshop&lt;/a&gt;. We are working on the proposal, and I hope it is accepted!&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Here is the core of the first version of Sophie’s richness query (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;#32538 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;num_particles&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;"beads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_particles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the core of the rewrite (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;#32532 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;
                            &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;"beads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;DistinctBins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;DistinctBins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you see it? It’s easy to miss. The only difference is that we swapped a GroupBy, which computed a Count aggregate that we then ignored, for a Distinct. This optimization (standard in commercial databases) has two huge benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It reduced the memory requirements by more than a factor of 4, making the query tractable at its current scale.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It enabled the query to be run in a pipelined manner. Consider the &lt;span class="caps"&gt;SQL&lt;/span&gt; query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a given &lt;code&gt;(x1, c1)&lt;/code&gt; tuple that will appear in the answer, the query cannot output that tuple until it knows that all input tuples with &lt;code&gt;x = x1&lt;/code&gt; have been seen. In a hash-based aggregate, like Myria uses, this property means that no answers can be produced until the &lt;em&gt;entire&lt;/em&gt; input &lt;code&gt;R&lt;/code&gt; has been processed, and slows the query down.&lt;/p&gt;
&lt;p&gt;(Note: Many databases will sort &lt;code&gt;R&lt;/code&gt; (or use an index on &lt;code&gt;x&lt;/code&gt;) so that they see all the values of &lt;code&gt;x&lt;/code&gt; in order, meaning they can produce &lt;code&gt;(x1,c)&lt;/code&gt; as soon as a tuple of &lt;code&gt;R&lt;/code&gt; has a new value &lt;code&gt;x2&lt;/code&gt;. We are working on this for Myria.)&lt;/p&gt;
&lt;p&gt;In contrast, consider the &lt;span class="caps"&gt;SQL&lt;/span&gt; query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this Distinct query, the output is simply the unique values of &lt;code&gt;x&lt;/code&gt;. For this answer, we can output every new value &lt;code&gt;x1&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; as soon as it appears in the input stream. (We have to keep &lt;code&gt;x1&lt;/code&gt; around to make sure that we do not produce it twice, but we do &lt;em&gt;not&lt;/em&gt; need to wait until we have seen all values of &lt;code&gt;x&lt;/code&gt;). When we produce &lt;code&gt;x1&lt;/code&gt; early, downstream computation (in this case, computing the count of the number of full bins for each cytogram) can continue immediately. This new query plan results in: better overlap between different parts of the computation, more efficient use of the parallel resources of our cluster, and ultimately, happier users who can do their science faster.&lt;/p&gt;
&lt;p&gt;(Note: as above, if the values of &lt;code&gt;x&lt;/code&gt; are sorted then we do not even need to remember all values &lt;code&gt;x1&lt;/code&gt; that we have ever seen — just the most recent version. We are working on this for Myria, too.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on what we learned today, I created &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-09-03"&gt;several new issues&lt;/a&gt; for Raco and for Myria and am well on the way to fixing them. The upshot of this work is that &lt;a href="https://github.com/uwescience/raco/pull/312#issue-41881779"&gt;the “slow query”, written the first way, now results in the same plan&lt;/a&gt; as when I rewrote it the fast way.&lt;/p&gt;
&lt;p&gt;I’ve said it before, and I’ll say it again: &lt;strong&gt;working with real users on real problems is the &lt;strike&gt;only&lt;/strike&gt; most effective way to make sure your system is actually useful&lt;/strong&gt;. The dividends for Myria of working with Sophie and other real scientists for Myria are &lt;em&gt;huge&lt;/em&gt;.&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="asterios"></category><category term="danac"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-08-28 daily</title><link href="http://blog.halper.in/posts/2014/08/28/2014-08-28-daily/" rel="alternate"></link><updated>2014-08-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-28:posts/2014/08/28/2014-08-28-daily/</id><summary type="html">&lt;p&gt;We had our monthly &lt;a href="http://armbrustlab.ocean.washington.edu/resources/seaflow/"&gt;SeaFlow&lt;/a&gt;/eScience group meeting meeting. For this grant the oceanographers have been doing lots of new science using tools like &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;, &lt;a href="http://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/popcycle"&gt;popcycle&lt;/a&gt;, our software for storing indexing and analyzing SeaFlow data. We discussed needed improvements to popcycle and to the &lt;a href="https://github.com/uwescience/seaflow-viz"&gt;seaflow-viz&lt;/a&gt; web dashboard (see it here &lt;a href="https://uwescience.github.com/seaflow-viz"&gt;https://uwescience.github.com/seaflow-viz&lt;/a&gt;) for visualizing cruise performance and science in real time. &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; gave an update on the cruise she got back from a few weeks ago and on our work in the last two weeks analyzing cell diversity in Myria. &lt;a href="http://r.halper.in/coauth/fribalet"&gt;Francois&lt;/a&gt; gave an update on the new proposal we submitted to analyze population dynamics in SeaFlow data. Thinking ahead, we talked about &lt;a href="http://r.halper.in/coauth/swalwell"&gt;Jarred&lt;/a&gt;‘s agenda for scaling up SeaFlow data collection and what needs that would entail for automated instrument monitoring and the underlying data service; and we talked about how to demo “Myria for SeaFlow” to a broader audience.&lt;/p&gt;
&lt;p&gt;In the rest of the day, I worked on making &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; better: adding some new optimization rules to streamline the types of plans that are emitted by the Flink compiler, and hacking/code reviewing with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; to get the &lt;a href="https://github.com/uwescience/raco/pull/269"&gt;MyriaL → Grappa support&lt;/a&gt; working better, and fixing a few little issues that cropped up.&lt;/p&gt;
&lt;p&gt;I also finally implemented, evaluated, and deployed the &lt;a href="https://github.com/uwescience/myria/pull/609"&gt;50x—100x speedup &lt;span class="caps"&gt;SQL&lt;/span&gt; query mod&lt;/a&gt; to the bottleneck query in &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;‘s fantastic Myria profiler. Now &lt;a href="https://demo.myria.cs.washington.edu/profile?queryId=32305"&gt;the profiling &lt;span class="caps"&gt;UI&lt;/span&gt; is super-snappy even for long programs&lt;/a&gt;.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="seaflow"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="dominik"></category><category term="francois"></category><category term="jarred"></category><category term="sophie"></category></entry><entry><title>2014-08-25 daily</title><link href="http://blog.halper.in/posts/2014/08/25/2014-08-25-daily/" rel="alternate"></link><updated>2014-08-25T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-25:posts/2014/08/25/2014-08-25-daily/</id><summary type="html">&lt;p&gt;Another fantastic hack session with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie&lt;/a&gt; today. We analyzed the quality and quantity of data in the existing files, including determining which of the 64K SeaFlow samples are within a reasonable amount (say, 1σ) of the “average” SeaFlow sample according to the calibration beads. Surprisingly/hearteningly, the vast majority of the data is good! This bodes well for Sophie’s deeper analyses.&lt;/p&gt;
&lt;p&gt;More hacking Myria and code review. Mostly, fixing and improving things we identified with  last week.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry><entry><title>2014-08-22 daily</title><link href="http://blog.halper.in/posts/2014/08/22/2014-08-22-daily/" rel="alternate"></link><updated>2014-08-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-22:posts/2014/08/22/2014-08-22-daily/</id><summary type="html">&lt;p&gt;Started the day with a fantastic meeting with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. Sophie is trying to analyze the entire SeaFlow corpus in &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;. Today: she wrote queries to analyze ~64K files at once in MyriaL, which she is logging on &lt;a href="https://github.com/uwescience/seaflow-myria/wiki"&gt;a GitHub wiki&lt;/a&gt;. We ran into some memory pressure joining two 1.7B-rows (# particles measured by SeaFlow) datasets, but were able to work around it. The remaining queries were on the order of the # sample files and all finished with no problems in under 2 minutes.&lt;/p&gt;
&lt;p&gt;The other great part about working with Sophie is what I learn by seeing a real scientist who is extremely competent, but not a database expert, use the system. I generated at least &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-08-22#contribution-activity"&gt;7 new issues&lt;/a&gt; related to making Myria more usable. I spent my productive time in the rest of the day working on these issues.&lt;/p&gt;
&lt;p&gt;More code review for Myria.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry></feed>