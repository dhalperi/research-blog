<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/becker.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-11-23T00:00:00-08:00</updated><entry><title>Incubator 8.3</title><link href="http://blog.halper.in/posts/2014/11/23/incubator-83/" rel="alternate"></link><updated>2014-11-23T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-23:posts/2014/11/23/incubator-83/</id><summary type="html">&lt;p&gt;I spent a lot of time this weekend revisiting our &lt;a href="https://github.com/uwescience/kbmod/issues/3"&gt;new database design for &lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;, and see &lt;a href="posts/2014/11/13/incubator-72/"&gt;last post&lt;/a&gt;. I had a good excuse to finally learn about the spatial database support in PostgreSQL — &lt;a href="http://postgis.net/"&gt;PostGIS&lt;/a&gt;. Through several iterations and redrafts, I sped some of our test queries up by a factor of about 28x (from 21s to 0.7s).&lt;/p&gt;
&lt;p&gt;Here were the key insights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rather than think of each image, as a 2-D box (&lt;code&gt;ra&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt;) with an associated timestamp, think of it as a 3-D box (&lt;code&gt;ra&lt;/code&gt;, &lt;code&gt;dec&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;). This box is still fairly small because each image covers only a few seconds or minutes.&lt;/li&gt;
&lt;li&gt;The image 3-D box lives in a single column in a single table, so there are no on-the-fly joins and there is less data read from disk (probably).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It turns out that PostGIS cannot do a hybrid index-lookup on space and time at the same time. So the 2-D box + time-range version of the query takes two steps — first, intersect each trajectory spatially with all images, then filter out the examples where the timestamps do not sync up.&lt;/p&gt;
&lt;p&gt;By treating the image as a 3-D box (and the trajectory as a line in 3-D space), we are able to do both these phases at once.
* To intersect a line with a box, it suffices to simply check that their bounding boxes overlap. PostGIS is faster if you ask for overlapping bounds rather than run the &lt;code&gt;ST_Intersects&lt;/code&gt; code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think we’re now close enough with the database that we should put the end-to-end pipeline together:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pose a set of trajectories&lt;/li&gt;
&lt;li&gt;use the database to find all the images these trajectories may overlap with&lt;/li&gt;
&lt;li&gt;use the database to group these results by image, so that we have a set of (trajectory, image) pairs ordered by image.&lt;/li&gt;
&lt;li&gt;read each intersected image off disk once, pulling out the relevant pixels for all trajectories as a group.&lt;/li&gt;
&lt;li&gt;co-add the pixels and find new trans-Neptunian objects — aka, Pluto’s buddies!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking forward to our next meeting!&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category></entry><entry><title>Incubator 8.2</title><link href="http://blog.halper.in/posts/2014/11/20/incubator-82/" rel="alternate"></link><updated>2014-11-20T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-20:posts/2014/11/20/incubator-82/</id><summary type="html">&lt;p&gt;In the morning, &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I met with &lt;a href="http://r.halper.in/people/ajc"&gt;Andy Connolly&lt;/a&gt;, who was apparently &lt;em&gt;not&lt;/em&gt; in London at the time, to give him an update on our &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt; progress this quarter. We talked about the database designs, the scaling lessons, the technology tradeoffs, and the potential of our new approach. Importantly, Andy C gave me an awesome &lt;span class="caps"&gt;LSST&lt;/span&gt; mug to which I promptly affixed one of our shiny new eScience Institute stickers!&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSST Mug, eScience Stickers" src="/images/20141120-LSST-mug.jpg" style="width: 768px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;In the afternoon, &lt;a href="http://r.halper.in/people/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I picked up where we left off Tuesday and actually ran more queries. We took a break from computation to go over Sophie’s &lt;a href="http://nbviewer.ipython.org/github/uwescience/seaflow-myria/tree/master/ipython_notebooks/"&gt;IPython notebooks&lt;/a&gt; in which she downloads results from Myria queries and visualizes them. Among other things, I guilted her into adding lat/lon lines and showing land/ocean, though I think the “guilt” was really her embarrassment at my ability to tell American Samoa from Hawaii event though I knew Seattle was. The plots are really cool — go &lt;a href="http://nbviewer.ipython.org/github/uwescience/seaflow-myria/blob/d7536d0c49545f00d4b5b650cc5dddce9e692d22/ipython_notebooks/myria_map_N0.ipynb"&gt;look at them&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We also discussed the usability of Myria. Sophie pointed out, aptly, that we need better documentation and more expressive language features. I pointed in the direction of some string functions she wanted — to turn a &lt;code&gt;year-day&lt;/code&gt; string like &lt;code&gt;"2011_129"&lt;/code&gt; into &lt;code&gt;2011&lt;/code&gt; (year) and &lt;code&gt;129&lt;/code&gt; (Julian day) — which she promptly then &lt;a href="https://github.com/uwescience/myria-web/issues/221"&gt;broke on her first use&lt;/a&gt;. Luckily, I was able to deploy &lt;a href="https://github.com/uwescience/myria-web/pull/222"&gt;a fix&lt;/a&gt; in mere minutes.&lt;/p&gt;
&lt;p&gt;If you build software systems that you want real people to use, get a beta user like Sophie as early as you can. 1) She’s smart, mathy, and computer savvy, so she’s an “easy” case — that is, we want to aim for users with lower credentials. 2) She actually has real questions for which she cares about the answers, as opposed to toy problems that one might normally use. 3) The real uses cases expose all kinds of fun systems, implementation, efficiency, and design issues where building a system that “works for Sophie” ends up looking pretty different than most of the standard stuff out there. Fun, productive, educational, and rewarding!&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="seaflow"></category><category term="kbmod"></category><category term="myria"></category><category term="incubator"></category></entry><entry><title>Incubator 7.2</title><link href="http://blog.halper.in/posts/2014/11/13/incubator-72/" rel="alternate"></link><updated>2014-11-13T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-13:posts/2014/11/13/incubator-72/</id><summary type="html">&lt;p&gt;More work with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt;  on the &lt;span class="caps"&gt;KBMOD&lt;/span&gt; database and query design today. We have been running into issues loading all the pixels in the database — O(Millions) of images with O(Millions) of pixels each means 10^12 records, which would take years to load into our Postgres database. A parallel database like Greenplum, or Myria, would speed up the load linearly but this may not help much.&lt;/p&gt;
&lt;p&gt;An alternate tack is to rethink our queries: rather than one record per pixel, one record per image and then a user-defined function to dereference the pixel in an image when needed. We talked about how we might structure the tables and queries to accomplish this design and ended up with a relatively simple workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;em&gt;trajectory&lt;/em&gt; becomes a list of bounding boxes, one for each run [night] in which we measured the sky. This bounding box roughly corresponds to [(&lt;code&gt;ra0&lt;/code&gt;, &lt;code&gt;dec0&lt;/code&gt;), (&lt;code&gt;ra1&lt;/code&gt;, &lt;code&gt;dec1&lt;/code&gt;)], which are the positions of the &lt;span class="caps"&gt;TNO&lt;/span&gt; at times &lt;code&gt;t0&lt;/code&gt; and &lt;code&gt;t1&lt;/code&gt; corresponding to the beginning and end of the run.&lt;/li&gt;
&lt;li&gt;we intersect the per-run trajectory bounding boxes with the bounding box for each image during that run to determine which images might have overlapped with the trajectory.&lt;/li&gt;
&lt;li&gt;we compute the position of the &lt;span class="caps"&gt;TNO&lt;/span&gt; at the acquisition time of each image to determine whether the &lt;span class="caps"&gt;TNO&lt;/span&gt; was was actually in the image at all and, if so, in which precise pixel it was captured.&lt;/li&gt;
&lt;li&gt;we co-add all the pixels.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My guess is that we end up keeping steps 1 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 2 in the database, but 3 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 4 are performed outside the database in custom code. Since the images themselves represent the majority of the data, we’ll want to read each image into memory at most once while fetching the desired pixels for many trajectories. Obviously we will try many approaches, but my guess is that we will have better control over this performance-critical code outside of the database.&lt;/p&gt;
&lt;p&gt;For more information, see the &lt;span class="caps"&gt;KBMOD&lt;/span&gt; discussion on GitHub: &lt;a href="https://github.com/uwescience/kbmod/issues/3"&gt;https://github.com/uwescience/kbmod/issues/3&lt;/a&gt;&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category></entry><entry><title>Incubator week 3.1</title><link href="http://blog.halper.in/posts/2014/10/14/incubator-week-31/" rel="alternate"></link><updated>2014-10-14T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-14:posts/2014/10/14/incubator-week-31/</id><summary type="html">&lt;p&gt;Today was day 1 of &lt;a href="http://data.uw.edu/incubator"&gt;Incubator&lt;/a&gt; week 3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; exposed a locking issue in &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;: if a running query reads from table &lt;code&gt;T&lt;/code&gt; and a user changes the sharing on table &lt;code&gt;T&lt;/code&gt;, SQLShare basically locks the entire system until the query finishes. We need to revisit this issue, but it is unlikely to be a common problem: today was literally the first time it has ever cropped up. We also discussed a variety of &lt;span class="caps"&gt;SQL&lt;/span&gt;-isms such as how to convert a Julian Day into a &lt;code&gt;Date&lt;/code&gt; and the like. Sophie is now really off to the races with the underway data.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I played with various methods of inspecting on the progress and performance of his loading data into PostgreSQL. We went down a bit of a rabbit-hole when trying to figure out why it was not using the index to compute the number of distinct fields in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;explain&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;distinct&lt;/span&gt; &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="k"&gt;Aggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;HashAggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17631684&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;602685952&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;729&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;


&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;"public.pixels"&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Type&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;---------+----------------------+----------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;pixelid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pixels_pixelid_seq'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="n"&gt;ra&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;decl&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;fval&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;radec&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3786&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;mask&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_pkey"&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;"fieldidx"&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Foreign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_fieldid_fkey"&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it turns out, PostgreSQL’s &lt;code&gt;DISTINCT&lt;/code&gt; implementation simply cannot do the right thing.&lt;/p&gt;
&lt;p&gt;I also set up the &lt;a href="http://uwdatascienceincubator.wordpress.com/"&gt;Incubator Blog&lt;/a&gt; today: it combines posts from all of the incubator participants. Setting up this blog was really cool — I used &lt;a href="https://ifttt.com/"&gt;If This, Then That (&lt;span class="caps"&gt;IFTTT&lt;/span&gt;)&lt;/a&gt; to automatically crawl the feeds from the individual blogs and post them on a shared Wordpress! (Thanks to our friends at &lt;span class="caps"&gt;UC&lt;/span&gt; Berkeley for recommending &lt;span class="caps"&gt;IFTTT&lt;/span&gt; via the new Slack communication channel we’ve all been using.)&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="incubator"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category></entry><entry><title>Data and databases</title><link href="http://blog.halper.in/posts/2014/10/13/data-and-databases/" rel="alternate"></link><updated>2014-10-13T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-13:posts/2014/10/13/data-and-databases/</id><summary type="html">&lt;p&gt;Over the weekend, both &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; worked independently on their &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; projects; I spent some time then and today answering emails :).&lt;/p&gt;
&lt;p&gt;Sophie has been loading underway data (&lt;span class="caps"&gt;GPS&lt;/span&gt;, temperature, salinity, etc. from ships in motion) into &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; for cleaning. Every research vessel is its own special flower that represents dates and times in different ways, and we want to bring them all into a normalized format. We will then load the normalized data into Myria and join it with the SeaFlow data in her analyses. 
&lt;small&gt;(For now, the Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Server system underpinning SQLShare is better for messy data than Myria itself, because &lt;span class="caps"&gt;SQL&lt;/span&gt; Server handles more data types and corner cases than we do. This will change!)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We made Sophia’s queries run &lt;em&gt;dramatically&lt;/em&gt; faster by materializing SQLShare datasets once all the fields were in the right types. Turns out, recomputing &lt;code&gt;datetime&lt;/code&gt; objects can be really slow when you want to do interval joins on them! We also discussed how to find bad rows in datasets, e.g., if you’re getting errors casting values to &lt;code&gt;float&lt;/code&gt;, you need to know about &lt;code&gt;WHERE ISNUMERIC(x) &amp;lt;&amp;gt; 1&lt;/code&gt; so you can find the bad values of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Andy has been experiencing the joys of loading data into databases with indexes, foreign keys, auto commit, checkpointing, and all that. After some iteration, we figured out to check the Postgres logs and found that his remote &lt;code&gt;COPY&lt;/code&gt; commands were running out of memory.  Chunking the data made it finish.&lt;/p&gt;
&lt;p&gt;I finally got &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria’s web interface&lt;/a&gt; to correctly push queries into the Postgres without weird Google App Engine issues, fixed all the Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; tests, and deployed it.&lt;/p&gt;</summary><category term="sophie"></category><category term="becker"></category><category term="incubator"></category><category term="reading"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category><category term="raco"></category><category term="myria"></category></entry><entry><title>Data Science Incubator, Week 2</title><link href="http://blog.halper.in/posts/2014/10/09/data-science-incubator-week-2/" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:posts/2014/10/09/data-science-incubator-week-2/</id><summary type="html">&lt;p&gt;I spent today in the Data Science Incubator working with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt; on &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;. We are trying to port the key components of the moving object detection into PostgreSQL using PostGIS.&lt;/p&gt;
&lt;p&gt;On his own, Andy designed a schema for the various data, including spatial columns and indexes. Side by side, we worked on a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speeding up data load: &lt;code&gt;\COPY&lt;/code&gt; is much faster than large batch insert statements, as we know.&lt;/li&gt;
&lt;li&gt;Explaining queries and seeing whether indexes are used: not yet, but the database is small so sequential scans might actually make more sense. Also, it looks like the optimizer may miss some tricks in some cases.&lt;/li&gt;
&lt;li&gt;Cloud-ification: we set up an Amazon &lt;span class="caps"&gt;RDS&lt;/span&gt; PostgreSQL+PostGIS database, and proved that we could load data in, even large data.&lt;/li&gt;
&lt;li&gt;Astro UDFs: for the kinds of spatial queries that we need, there are great C++ libraries that do all the work; we need access to those UDFs in the database! We &lt;a href="https://github.com/uwescience/kbmod/issues/1"&gt;began investigating&lt;/a&gt; PostgreSQL support for UDFs as compiled C binaries; this should be doable, but we may need to fiddle to make the C++ code play nice with PostgreSQL, which expects C…&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDFs may be a show-stopper for using &lt;span class="caps"&gt;RDS&lt;/span&gt;, however — you cannot register binary UDFs there, so we will likely have to kill the &lt;span class="caps"&gt;RDS&lt;/span&gt; instance and setup a manually managed &lt;span class="caps"&gt;EC2&lt;/span&gt;+PostgreSQL instance instead.&lt;/p&gt;
&lt;p&gt;Aside: Automatically-managed cloud services are &lt;em&gt;very&lt;/em&gt; appealing, but little implementation issues like this always seem to bite us. Similar limitations apply to Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Azure [no stored procedures], and Google App Engine [no CPython]—-our needs always push us into the “Sorry, you have to do &lt;em&gt;everything&lt;/em&gt; manually now” use case, or make us dramatically restrict the performance and capabilities of our applications. Surely this issue crops up for other users!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For next week, some preliminary goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move from &lt;span class="caps"&gt;RDS&lt;/span&gt; to &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get a bigger dataset into the database, so we are in a real optimization framework&lt;/li&gt;
&lt;li&gt;get the &lt;span class="caps"&gt;UDF&lt;/span&gt; into the database&lt;/li&gt;
&lt;li&gt;work on expressing the queries and testing correctness&lt;/li&gt;
&lt;li&gt;optimize the indexes and queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also chatted with &lt;a href="http://homes.cs.washington.edu/~bholt/"&gt;Brandon Holt&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt;, and Simon Kahan about possible &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt;—&lt;span class="caps"&gt;KBMOD&lt;/span&gt; connections.&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category><category term="brandon"></category><category term="grappa"></category></entry></feed>