<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/becker.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-10-14T00:00:00-07:00</updated><entry><title>Incubator week 3.1</title><link href="http://blog.halper.in/posts/2014/10/14/incubator-week-31/" rel="alternate"></link><updated>2014-10-14T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-14:posts/2014/10/14/incubator-week-31/</id><summary type="html">&lt;p&gt;Today was day 1 of &lt;a href="http://data.uw.edu/incubator"&gt;Incubator&lt;/a&gt; week 3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; exposed a locking issue in &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;: if a running query reads from table &lt;code&gt;T&lt;/code&gt; and a user changes the sharing on table &lt;code&gt;T&lt;/code&gt;, SQLShare basically locks the entire system until the query finishes. We need to revisit this issue, but it is unlikely to be a common problem: today was literally the first time it has ever cropped up. We also discussed a variety of &lt;span class="caps"&gt;SQL&lt;/span&gt;-isms such as how to convert a Julian Day into a &lt;code&gt;Date&lt;/code&gt; and the like. Sophie is now really off to the races with the underway data.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I played with various methods of inspecting on the progress and performance of his loading data into PostgreSQL. We went down a bit of a rabbit-hole when trying to figure out why it was not using the index to compute the number of distinct fields in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;explain&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;distinct&lt;/span&gt; &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="k"&gt;Aggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;HashAggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17631684&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;602685952&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;729&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;


&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;"public.pixels"&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Type&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;---------+----------------------+----------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;pixelid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pixels_pixelid_seq'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="n"&gt;ra&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;decl&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;fval&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;radec&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3786&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;mask&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_pkey"&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;"fieldidx"&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Foreign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_fieldid_fkey"&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it turns out, PostgreSQL’s &lt;code&gt;DISTINCT&lt;/code&gt; implementation simply cannot do the right thing.&lt;/p&gt;
&lt;p&gt;I also set up the &lt;a href="http://uwdatascienceincubator.wordpress.com/"&gt;Incubator Blog&lt;/a&gt; today: it combines posts from all of the incubator participants. Setting up this blog was really cool — I used &lt;a href="https://ifttt.com/"&gt;If This, Then That (&lt;span class="caps"&gt;IFTTT&lt;/span&gt;)&lt;/a&gt; to automatically crawl the feeds from the individual blogs and post them on a shared Wordpress! (Thanks to our friends at &lt;span class="caps"&gt;UC&lt;/span&gt; Berkeley for recommending &lt;span class="caps"&gt;IFTTT&lt;/span&gt; via the new Slack communication channel we’ve all been using.)&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="incubator"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category></entry><entry><title>Data and databases</title><link href="http://blog.halper.in/posts/2014/10/13/data-and-databases/" rel="alternate"></link><updated>2014-10-13T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-13:posts/2014/10/13/data-and-databases/</id><summary type="html">&lt;p&gt;Over the weekend, both &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; worked independently on their &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; projects; I spent some time then and today answering emails :).&lt;/p&gt;
&lt;p&gt;Sophie has been loading underway data (&lt;span class="caps"&gt;GPS&lt;/span&gt;, temperature, salinity, etc. from ships in motion) into &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; for cleaning. Every research vessel is its own special flower that represents dates and times in different ways, and we want to bring them all into a normalized format. We will then load the normalized data into Myria and join it with the SeaFlow data in her analyses. 
&lt;small&gt;(For now, the Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Server system underpinning SQLShare is better for messy data than Myria itself, because &lt;span class="caps"&gt;SQL&lt;/span&gt; Server handles more data types and corner cases than we do. This will change!)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We made Sophia’s queries run &lt;em&gt;dramatically&lt;/em&gt; faster by materializing SQLShare datasets once all the fields were in the right types. Turns out, recomputing &lt;code&gt;datetime&lt;/code&gt; objects can be really slow when you want to do interval joins on them! We also discussed how to find bad rows in datasets, e.g., if you’re getting errors casting values to &lt;code&gt;float&lt;/code&gt;, you need to know about &lt;code&gt;WHERE ISNUMERIC(x) &amp;lt;&amp;gt; 1&lt;/code&gt; so you can find the bad values of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Andy has been experiencing the joys of loading data into databases with indexes, foreign keys, auto commit, checkpointing, and all that. After some iteration, we figured out to check the Postgres logs and found that his remote &lt;code&gt;COPY&lt;/code&gt; commands were running out of memory.  Chunking the data made it finish.&lt;/p&gt;
&lt;p&gt;I finally got &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria’s web interface&lt;/a&gt; to correctly push queries into the Postgres without weird Google App Engine issues, fixed all the Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; tests, and deployed it.&lt;/p&gt;</summary><category term="sophie"></category><category term="becker"></category><category term="incubator"></category><category term="reading"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category><category term="raco"></category><category term="myria"></category></entry><entry><title>Data Science Incubator, Week 2</title><link href="http://blog.halper.in/posts/2014/10/09/data-science-incubator-week-2/" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:posts/2014/10/09/data-science-incubator-week-2/</id><summary type="html">&lt;p&gt;I spent today in the Data Science Incubator working with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt; on &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;. We are trying to port the key components of the moving object detection into PostgreSQL using PostGIS.&lt;/p&gt;
&lt;p&gt;On his own, Andy designed a schema for the various data, including spatial columns and indexes. Side by side, we worked on a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speeding up data load: &lt;code&gt;\COPY&lt;/code&gt; is much faster than large batch insert statements, as we know.&lt;/li&gt;
&lt;li&gt;Explaining queries and seeing whether indexes are used: not yet, but the database is small so sequential scans might actually make more sense. Also, it looks like the optimizer may miss some tricks in some cases.&lt;/li&gt;
&lt;li&gt;Cloud-ification: we set up an Amazon &lt;span class="caps"&gt;RDS&lt;/span&gt; PostgreSQL+PostGIS database, and proved that we could load data in, even large data.&lt;/li&gt;
&lt;li&gt;Astro UDFs: for the kinds of spatial queries that we need, there are great C++ libraries that do all the work; we need access to those UDFs in the database! We &lt;a href="https://github.com/uwescience/kbmod/issues/1"&gt;began investigating&lt;/a&gt; PostgreSQL support for UDFs as compiled C binaries; this should be doable, but we may need to fiddle to make the C++ code play nice with PostgreSQL, which expects C…&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDFs may be a show-stopper for using &lt;span class="caps"&gt;RDS&lt;/span&gt;, however — you cannot register binary UDFs there, so we will likely have to kill the &lt;span class="caps"&gt;RDS&lt;/span&gt; instance and setup a manually managed &lt;span class="caps"&gt;EC2&lt;/span&gt;+PostgreSQL instance instead.&lt;/p&gt;
&lt;p&gt;Aside: Automatically-managed cloud services are &lt;em&gt;very&lt;/em&gt; appealing, but little implementation issues like this always seem to bite us. Similar limitations apply to Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Azure [no stored procedures], and Google App Engine [no CPython]—-our needs always push us into the “Sorry, you have to do &lt;em&gt;everything&lt;/em&gt; manually now” use case, or make us dramatically restrict the performance and capabilities of our applications. Surely this issue crops up for other users!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For next week, some preliminary goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move from &lt;span class="caps"&gt;RDS&lt;/span&gt; to &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get a bigger dataset into the database, so we are in a real optimization framework&lt;/li&gt;
&lt;li&gt;get the &lt;span class="caps"&gt;UDF&lt;/span&gt; into the database&lt;/li&gt;
&lt;li&gt;work on expressing the queries and testing correctness&lt;/li&gt;
&lt;li&gt;optimize the indexes and queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also chatted with &lt;a href="http://homes.cs.washington.edu/~bholt/"&gt;Brandon Holt&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt;, and Simon Kahan about possible &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt;—&lt;span class="caps"&gt;KBMOD&lt;/span&gt; connections.&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category><category term="brandon"></category><category term="grappa"></category></entry></feed>