<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/daniel-halperin.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-11-23T00:00:00-08:00</updated><entry><title>Incubator 8.3</title><link href="http://blog.halper.in/posts/2014/11/23/incubator-83/" rel="alternate"></link><updated>2014-11-23T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-23:posts/2014/11/23/incubator-83/</id><summary type="html">&lt;p&gt;I spent a lot of time this weekend revisiting our &lt;a href="https://github.com/uwescience/kbmod/issues/3"&gt;new database design for &lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;, and see &lt;a href="posts/2014/11/13/incubator-72/"&gt;last post&lt;/a&gt;. I had a good excuse to finally learn about the spatial database support in PostgreSQL — &lt;a href="http://postgis.net/"&gt;PostGIS&lt;/a&gt;. Through several iterations and redrafts, I sped some of our test queries up by a factor of about 28x (from 21s to 0.7s).&lt;/p&gt;
&lt;p&gt;Here were the key insights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rather than think of each image as a 2-D box (&lt;code&gt;ra&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt;) with an associated timestamp, think of it as a 3-D box (&lt;code&gt;ra&lt;/code&gt;, &lt;code&gt;dec&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;). This box is still fairly small because each image covers only a few seconds or minutes.&lt;/li&gt;
&lt;li&gt;The image 3-D box lives in a single column in a single table, so there are no on-the-fly joins and there is less data read from disk (probably).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It turns out that PostGIS cannot do a hybrid index-lookup on space and time at the same time. So the 2-D box + time-range version of the query takes two steps — first, intersect each trajectory spatially with all images, then filter out the examples where the timestamps do not sync up.&lt;/p&gt;
&lt;p&gt;By treating the image as a 3-D box (and the trajectory as a line in 3-D space), we are able to do both these phases at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To intersect a line with a box, it suffices to simply check that their bounding boxes overlap. PostGIS is faster if you ask for overlapping bounds rather than run the &lt;code&gt;ST_Intersects&lt;/code&gt; code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think we’re now close enough with the database that we should put the end-to-end pipeline together:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pose a set of trajectories&lt;/li&gt;
&lt;li&gt;use the database to find all the images these trajectories may overlap with&lt;/li&gt;
&lt;li&gt;use the database to group these results by image, so that we have a set of (trajectory, image) pairs ordered by image.&lt;/li&gt;
&lt;li&gt;read each intersected image off disk once, pulling out the relevant pixels for all trajectories as a group.&lt;/li&gt;
&lt;li&gt;co-add the pixels and find new trans-Neptunian objects — aka, Pluto’s buddies!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking forward to our next meeting!&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category></entry><entry><title>Incubator 8.2</title><link href="http://blog.halper.in/posts/2014/11/20/incubator-82/" rel="alternate"></link><updated>2014-11-20T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-20:posts/2014/11/20/incubator-82/</id><summary type="html">&lt;p&gt;In the morning, &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I met with &lt;a href="http://r.halper.in/people/ajc"&gt;Andy Connolly&lt;/a&gt;, who was apparently &lt;em&gt;not&lt;/em&gt; in London at the time, to give him an update on our &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt; progress this quarter. We talked about the database designs, the scaling lessons, the technology tradeoffs, and the potential of our new approach. Importantly, Andy C gave me an awesome &lt;span class="caps"&gt;LSST&lt;/span&gt; mug to which I promptly affixed one of our shiny new eScience Institute stickers!&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSST Mug, eScience Stickers" src="/images/20141120-LSST-mug.jpg" style="width: 768px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;In the afternoon, &lt;a href="http://r.halper.in/people/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I picked up where we left off Tuesday and actually ran more queries. We took a break from computation to go over Sophie’s &lt;a href="http://nbviewer.ipython.org/github/uwescience/seaflow-myria/tree/master/ipython_notebooks/"&gt;IPython notebooks&lt;/a&gt; in which she downloads results from Myria queries and visualizes them. Among other things, I guilted her into adding lat/lon lines and showing land/ocean, though I think the “guilt” was really her embarrassment at my ability to tell American Samoa from Hawaii event though I knew Seattle was. The plots are really cool — go &lt;a href="http://nbviewer.ipython.org/github/uwescience/seaflow-myria/blob/d7536d0c49545f00d4b5b650cc5dddce9e692d22/ipython_notebooks/myria_map_N0.ipynb"&gt;look at them&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We also discussed the usability of Myria. Sophie pointed out, aptly, that we need better documentation and more expressive language features. I pointed in the direction of some string functions she wanted — to turn a &lt;code&gt;year-day&lt;/code&gt; string like &lt;code&gt;"2011_129"&lt;/code&gt; into &lt;code&gt;2011&lt;/code&gt; (year) and &lt;code&gt;129&lt;/code&gt; (Julian day) — which she promptly then &lt;a href="https://github.com/uwescience/myria-web/issues/221"&gt;broke on her first use&lt;/a&gt;. Luckily, I was able to deploy &lt;a href="https://github.com/uwescience/myria-web/pull/222"&gt;a fix&lt;/a&gt; in mere minutes.&lt;/p&gt;
&lt;p&gt;If you build software systems that you want real people to use, get a beta user like Sophie as early as you can. 1) She’s smart, mathy, and computer savvy, so she’s an “easy” case — that is, we want to aim for users with lower credentials. 2) She actually has real questions for which she cares about the answers, as opposed to toy problems that one might normally use. 3) The real uses cases expose all kinds of fun systems, implementation, efficiency, and design issues where building a system that “works for Sophie” ends up looking pretty different than most of the standard stuff out there. Fun, productive, educational, and rewarding!&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="seaflow"></category><category term="kbmod"></category><category term="myria"></category><category term="incubator"></category></entry><entry><title>Incubator 8.1</title><link href="http://blog.halper.in/posts/2014/11/18/incubator-81/" rel="alternate"></link><updated>2014-11-18T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-18:posts/2014/11/18/incubator-81/</id><summary type="html">&lt;p&gt;Today in the &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt;, &lt;a href="http://r.halper.in/people/sclayton"&gt;Sophie Clayton&lt;/a&gt; wrote queries (and I helped a tiny bit) to co-align every cytogram in the SeaFlow cruise in order to compensate for different settings of the SeaFlow instrument itself. The queries should have taken a few minutes to run, but routinely failed due to oversubscription on the cluster. (See &lt;a href="/posts/2014/11/12/public-cluster-private-experiments/"&gt;my prior post&lt;/a&gt; on the matter). Once we got the cluster issues worked out, the query we watched for 90 until it failed took 8 minutes to run; however, our day was not as productive as it could have been…&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="myria"></category><category term="incubator"></category></entry><entry><title>Infrastructure and meetings</title><link href="http://blog.halper.in/posts/2014/11/17/infrastructure-and-meetings/" rel="alternate"></link><updated>2014-11-17T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-17:posts/2014/11/17/infrastructure-and-meetings/</id><summary type="html">&lt;p&gt;Very little research today.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/shrainik"&gt;Shrainik&lt;/a&gt; is planning his quals exam and writeup and we are discussing logistics around that.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy&lt;/a&gt; is putting the finishing touches on his accepted &lt;span class="caps"&gt;IAAI&lt;/span&gt;‘15 Challenge Paper on “Time-Varying Clusters in Large-Scale Flow Cytometry”; the key question here is where to host the test dataset. The obvious choices like FigShare and Dryad are out because they either don’t host big data or don’t support the &lt;span class="caps"&gt;IAAI&lt;/span&gt; conference. Looks like we’ll throw it in an S3 bucket. Comments??&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~bhaynes/"&gt;Brandon Haynes&lt;/a&gt; of the &lt;span class="caps"&gt;UW&lt;/span&gt; &lt;span class="caps"&gt;DB&lt;/span&gt; group is starting to use Myria in his scripts and is uncovering issues in little-used Myria &lt;span class="caps"&gt;API&lt;/span&gt; calls (both in the MyriaX &lt;span class="caps"&gt;API&lt;/span&gt; and in the Python library that connects to it). I spent a fair bit of time reviewing and merging his changes.&lt;/p&gt;
&lt;p&gt;I also pushed new versions of &lt;a href="https://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and &lt;a href="https://github.com/uwescience/myria-python"&gt;myria-python&lt;/a&gt; to pypi so they are installable via &lt;code&gt;pip&lt;/code&gt;!&lt;/p&gt;</summary><category term="shrainik"></category><category term="jeremy"></category><category term="bhaynes"></category><category term="myria"></category></entry><entry><title>Mozilla, eScience</title><link href="http://blog.halper.in/posts/2014/11/14/mozilla-escience/" rel="alternate"></link><updated>2014-11-14T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-14:posts/2014/11/14/mozilla-escience/</id><summary type="html">&lt;p&gt;Last month, I grabbed a beer with &lt;a href="http://kaythaney.com/"&gt;Kay Thaney&lt;/a&gt; and chatted about various M/S and Data Science and eScience and other activities; it was a great chat. One consequence is that Kay invited &lt;a href="http://www.astro.washington.edu/users/vanderplas/"&gt;Jake VanderPlas&lt;/a&gt; and I to present about the &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; on the &lt;a href="https://etherpad.mozilla.org/sciencelab-calls-nov13-2014"&gt;Mozilla Science Lab Call&lt;/a&gt; yesterday. We spent 5 or 10 minutes explaining what the what the eScience Institute is, what the Data Science Incubator is, giving some example participants, and taking questions. You can see the call notes at the linked &lt;a href="https://etherpad.mozilla.org/sciencelab-calls-nov13-2014"&gt;Etherpad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We began interviews for a &lt;a href="https://uwhires.admin.washington.edu/eng/candidates/default.cfm?szCategory=jobprofile&amp;amp;szOrderID=112161"&gt;web content strategist&lt;/a&gt; today. More on that when I’m allowed to talk about it.&lt;/p&gt;
&lt;p&gt;Finally, I met with &lt;a href="http://r.halper.in/people/cobbc12"&gt;Camille&lt;/a&gt; to discuss her work on automatically generating visualizations. This work has been greatly advanced by conversations I had with viz-whiz &lt;a href="http://vgc.poly.edu/~adasgupta/"&gt;Aritra Dasgupta&lt;/a&gt; at &lt;span class="caps"&gt;NYU&lt;/span&gt; last month, and we now have a concrete idea for how to frame the problem. Here’s the question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overall problem: a user loads a dataset and then executes a series of automated, semi-automated, or manual steps to specify a visualization.&lt;/li&gt;
&lt;li&gt;Existing, commonly-used tools for this task include Tableau, IPython Notebook, etc., each of which has its own strengths and weaknesses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;: does knowing the query/queries that generated the dataset let you automate more? In particular, given the dataset and queries alone, can we suggest the visualization the user wants to draw? What if we add workload information?&lt;/p&gt;
&lt;p&gt;We’re confident the answer to these is “yes”. More to come!&lt;/p&gt;</summary><category term="camille"></category><category term="mozilla"></category><category term="escience"></category></entry><entry><title>Incubator 7.2</title><link href="http://blog.halper.in/posts/2014/11/13/incubator-72/" rel="alternate"></link><updated>2014-11-13T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-13:posts/2014/11/13/incubator-72/</id><summary type="html">&lt;p&gt;More work with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt;  on the &lt;span class="caps"&gt;KBMOD&lt;/span&gt; database and query design today. We have been running into issues loading all the pixels in the database — O(Millions) of images with O(Millions) of pixels each means 10^12 records, which would take years to load into our Postgres database. A parallel database like Greenplum, or Myria, would speed up the load linearly but this may not help much.&lt;/p&gt;
&lt;p&gt;An alternate tack is to rethink our queries: rather than one record per pixel, one record per image and then a user-defined function to dereference the pixel in an image when needed. We talked about how we might structure the tables and queries to accomplish this design and ended up with a relatively simple workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;em&gt;trajectory&lt;/em&gt; becomes a list of bounding boxes, one for each run [night] in which we measured the sky. This bounding box roughly corresponds to [(&lt;code&gt;ra0&lt;/code&gt;, &lt;code&gt;dec0&lt;/code&gt;), (&lt;code&gt;ra1&lt;/code&gt;, &lt;code&gt;dec1&lt;/code&gt;)], which are the positions of the &lt;span class="caps"&gt;TNO&lt;/span&gt; at times &lt;code&gt;t0&lt;/code&gt; and &lt;code&gt;t1&lt;/code&gt; corresponding to the beginning and end of the run.&lt;/li&gt;
&lt;li&gt;we intersect the per-run trajectory bounding boxes with the bounding box for each image during that run to determine which images might have overlapped with the trajectory.&lt;/li&gt;
&lt;li&gt;we compute the position of the &lt;span class="caps"&gt;TNO&lt;/span&gt; at the acquisition time of each image to determine whether the &lt;span class="caps"&gt;TNO&lt;/span&gt; was was actually in the image at all and, if so, in which precise pixel it was captured.&lt;/li&gt;
&lt;li&gt;we co-add all the pixels.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My guess is that we end up keeping steps 1 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 2 in the database, but 3 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 4 are performed outside the database in custom code. Since the images themselves represent the majority of the data, we’ll want to read each image into memory at most once while fetching the desired pixels for many trajectories. Obviously we will try many approaches, but my guess is that we will have better control over this performance-critical code outside of the database.&lt;/p&gt;
&lt;p&gt;For more information, see the &lt;span class="caps"&gt;KBMOD&lt;/span&gt; discussion on GitHub: &lt;a href="https://github.com/uwescience/kbmod/issues/3"&gt;https://github.com/uwescience/kbmod/issues/3&lt;/a&gt;&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category></entry><entry><title>Public cluster + private experiments</title><link href="http://blog.halper.in/posts/2014/11/12/public-cluster-private-experiments/" rel="alternate"></link><updated>2014-11-12T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-12:posts/2014/11/12/public-cluster-private-experiments/</id><summary type="html">&lt;p&gt;The hot button issue today is what we do with our public Myria service.&lt;/p&gt;
&lt;p&gt;As part of the grant proposal, we promised that “the project develops and deploys a Web-based query-as-a-service interface to the new middleware. The service will be made available to domain scientists” (p.1). This service has been working gangbusters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have written before about the &lt;a href="http://r.halper.in/paper/Loebman_MergerTree_2014.pdf"&gt;MyMergerTree&lt;/a&gt; service built by students and faculty in the &lt;span class="caps"&gt;UW&lt;/span&gt; Database and Astronomy groups, led by &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt; and &lt;a href="http://r.halper.in/coauth/loebman"&gt;Sarah Loebman&lt;/a&gt; on the faculty side. MyMergerTree is just awesome and used by researchers in Astronomy still.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt;‘s &lt;a href="https://github.com/uwescience/incubator/wiki/Patterns-in-phytoplankton-diversity"&gt;Incubator project&lt;/a&gt; uses Myria to analyze large (tens of cruises, thousands of hours, billions of cells) oceanographic data. Among Myria users, Sophie is the one really innovating at combining Myria with other tools, such as her &lt;a href="https://github.com/uwescience/seaflow-myria/tree/master/ipython_notebooks"&gt;IPython notebooks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; and York Wei have been working on &lt;a href="https://github.com/uwescience/myria-web/pull/212"&gt;abstracting the Myria web frontend to work with other backends&lt;/a&gt; such as Grappa and C.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this great work is making the system and the research project much powerful and much better, increasing its visibility, benefiting the entire effort, and it fulfills our grant obligations.&lt;/p&gt;
&lt;p&gt;However, there is a definite tension here, because running a public service tends to lead to high load on a cluster. At the same time, for our own research, we need to reserve the cluster in order to, e.g., give demos with little resource contention, or perform research experiments with repeatable results.&lt;/p&gt;
&lt;p&gt;How should/how can we balance these two concerns?&lt;/p&gt;
&lt;p&gt;Until recently, we have relied on a relatively light workload with few real users who were unlikely to interfere with demos or experiments, and we would notify these users when we had a reservation scheduled. But now that we’re succeeding — now that we’ve advertised to a broader audience and they actually want to use our service — we need a new strategy.&lt;/p&gt;
&lt;p&gt;For now, we’ve implemented a short-term workaround: &lt;a href="https://www.google.com/calendar/embed?src=cs.washington.edu_i1gk4il65dj31mcfgid1t9t1o8@group.calendar.google.com&amp;amp;ctz=America/Los_Angeles&amp;amp;mode=week"&gt;a public Google calendar listing our group’s reservations&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/myria-web/issues/186"&gt;visible warnings on the Myria query editor&lt;/a&gt; when the cluster is reserved. With our friendly users, this is likely good enough. (Our group also has the ability to kill queries if we need to in order to give a demo.)&lt;/p&gt;
&lt;p&gt;Long-term, we need to figure out a good balance. On the one hand, the service that we committed to offer has value for the community and generates research ideas, research input, validation, experience, and publicity for our team. On the other hand, serving other groups need not come at the expense of the database group’s ability to do research.&lt;/p&gt;
&lt;p&gt;One key contributor here will be increased usage of the cloud: for one-time, 24-hour dedicated experiments, it makes more sense to spin up a virtual cloud cluster than it does to stop everything running on our hardware including (but not limited to) the existing Myria service. With the cloud, and unlike our silicon, two different students can work at the same time!&lt;/p&gt;
&lt;p&gt;What other advice do you have?&lt;/p&gt;</summary><category term="myria"></category></entry><entry><title>Software and databases</title><link href="http://blog.halper.in/posts/2014/11/12/software-and-databases/" rel="alternate"></link><updated>2014-11-12T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-12:posts/2014/11/12/software-and-databases/</id><summary type="html">&lt;p&gt;See &lt;a href="/posts/2014/11/12/public-cluster-private-experiments/"&gt;today’s longer post on resource-sharing&lt;/a&gt; for what I spent most of my day thinking about — the right way to balance use of our Myria clusters.&lt;/p&gt;
&lt;p&gt;This morning, &lt;span class="caps"&gt;UW&lt;/span&gt;’s software working group met to discuss our goals, recent and future interviews &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; hiring, and to organize how we respond to calls for help at the &lt;a href="mailto:info@escience.washington.edu"&gt;info@escience.washington.edu&lt;/a&gt; mailing list.&lt;/p&gt;
&lt;p&gt;In the afternoon, I met with a &lt;span class="caps"&gt;CS&lt;/span&gt; grad student from the &lt;a href="http://seclab.cs.washington.edu/images/banner.png"&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Security Research Lab&lt;/a&gt;. He is using PostgreSQL databases to store and analyze an interesting dataset which I cannot post publicly about. We discussed database design, query authoring, using indexes properly, understanding &lt;code&gt;EXPLAIN&lt;/code&gt;ed query plans — in short, how to use databases well. Turns out that even smart, Linux-heavy grad students in computer science departments have trouble getting databases to go fast out of the box! More motivation for user-friendly services like we’re trying to put together in &lt;a href="https://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; and &lt;a href="http://myria.cs.washington.edu/"&gt;Myria&lt;/a&gt;…&lt;/p&gt;
&lt;p&gt;I also put together a GitHub repository with the new &lt;a href="https://github.com/uwescience/branding"&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; eScience Institute logos&lt;/a&gt; and ordered some stickers! Drop by in 2 weeks and pick one up!&lt;/p&gt;</summary><category term="software"></category><category term="databases"></category></entry><entry><title>Incubator and catching up on Myria</title><link href="http://blog.halper.in/posts/2014/11/11/incubator-and-catching-up-on-myria/" rel="alternate"></link><updated>2014-11-11T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-11:posts/2014/11/11/incubator-and-catching-up-on-myria/</id><summary type="html">&lt;p&gt;Today, &lt;span class="caps"&gt;UW&lt;/span&gt; is closed for the Veteran’s Day holiday; I took the opportunity to continue catching up on several weeks’ email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://depts.washington.edu/hacholab/labdetails.php?id=58"&gt;Ângela Katsuyama&lt;/a&gt; came to the Incubator for a few hours this afternoon. With &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, she continued joining and analyzing her data, attempting to answer questions like “what is the average bed time for each student?” in &lt;a href="https://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Myria, I reviewed a bunch of the great code that &lt;a href="http://r.halper.in/coauth/jwang"&gt;Jingjing Wang&lt;/a&gt; has written and merged some of her new features.&lt;/p&gt;
&lt;p&gt;Finally, I also had the wacky idea (based on a question from Ângela) to add some fancy math operators to the Myria language. Would it not be cool if the following was legal code?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;select * from R where x ≤ 5;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have a working prototype and will bring it to the team soon. At the best, these operators would make the language easier to learn and example programs easier to understand. At the worst, it’s confusing and/or misleading — “How do I type that operator?”. (The answer &lt;code&gt;Option&lt;/code&gt;+&lt;code&gt;,&lt;/code&gt; on a Mac, in this case).&lt;/p&gt;
&lt;p&gt;Oh, also — Bill gave us a tour of the new Data Science Studio space. Looking forward to moving in there as soon as we can!&lt;/p&gt;</summary><category term="ângela"></category><category term="jingjing"></category><category term="incubator"></category><category term="myria"></category></entry><entry><title>Back from vacation</title><link href="http://blog.halper.in/posts/2014/11/10/back-from-vacation/" rel="alternate"></link><updated>2014-11-10T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-10:posts/2014/11/10/back-from-vacation/</id><summary type="html">&lt;p&gt;I was offline for the past two weeks, and it was glorious. I highly recommend it!&lt;/p&gt;
&lt;p&gt;Monday is meetings day.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/shrainik"&gt;Shrainik&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, and I discussed our efforts (with &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;) to define and quantify the extent of variety in different datasets and understand how data management and integration systems help combat or even reduce this variety. The three of them wrote up our initial thoughts while I was gone, and now we are discussing next steps. As an aside, I am excited to repurpose their code to find all the crazy ways scientists use UDFs in SQLShare.&lt;/p&gt;
&lt;p&gt;We talked with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; about next steps for the failed submission on his Grappa work. By and large, the reviewers missed the boat — but that is our fault: what it really means is that we need to present the work better through organization, writing, and figures. We also discussed plans for generals and the relative pros and cons of literature review-style generals vs thesis proposal-style. In my opinion, a lit review would be more useful because Brandon’s work is so cross-disciplinary. The main counter-argument is that a thesis proposal might be more directly on the fast-path to graduation, and negotiations continue.&lt;/p&gt;
&lt;p&gt;In the Myria meeting, &lt;a href="http://homes.cs.washington.edu/~jwang/"&gt;Jingjing Wang&lt;/a&gt; showed off her improvements to launching, shutting down, and restarting Myria. Soon the production Myria demo will be much easier to kick when something goes funky. &lt;a href="https://github.com/lbrendanl"&gt;Brendan Lee&lt;/a&gt; has been documenting the Myria &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; using &lt;a href="http://apiary.io"&gt;apiary.io&lt;/a&gt; and will be showing that off soon as well.&lt;/p&gt;
&lt;p&gt;In the &lt;span class="caps"&gt;UWDB&lt;/span&gt; paper seminar, &lt;a href="http://homes.cs.washington.edu/~sviyer/"&gt;Srini Iyer&lt;/a&gt; and &lt;a href="http://homes.cs.washington.edu/~prasang/"&gt;Prasang Upadhyaya&lt;/a&gt; presented the MadLINQ paper by Qian, et al. It was fun to see the theorists and the systems folks in the room discuss the relative tradeoffs between elegance and performance of the design. Some of these techniques are relatively straightforward techniques to implement in Myria, i.e. tiled matrix multiply with replication looks an awful lot like HyperCube shuffle with range-partitioning.&lt;/p&gt;</summary><category term="brandon"></category><category term="dominik"></category><category term="jingjing"></category><category term="shrainik"></category><category term="nyu"></category><category term="friere"></category></entry><entry><title>Incubator 5.1</title><link href="http://blog.halper.in/posts/2014/10/28/incubator-51/" rel="alternate"></link><updated>2014-10-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-28:posts/2014/10/28/incubator-51/</id><summary type="html">&lt;p&gt;In this incubator this morning, &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; and I worked on the IPython Notebook — Myria pipeline. In particular, we pushed some bug fixes to some &lt;span class="caps"&gt;SSL&lt;/span&gt; bugs (but not all the way) and demonstrated an ability to issue queries in Datalog or MyriaL from Python that get executed on Myria!&lt;/p&gt;
&lt;p&gt;Sophie is now on her own for the next two weeks (I’m out), and hopefully she is armed with the tools to be productive. Andrew and Bill will be able to help her if not.&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="incubator"></category></entry><entry><title>SSL certificates suck; Incubator 3.2 → NYU</title><link href="http://blog.halper.in/posts/2014/10/16/ssl-certificates-suck-incubator-32-nyu/" rel="alternate"></link><updated>2014-10-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-16:posts/2014/10/16/ssl-certificates-suck-incubator-32-nyu/</id><summary type="html">&lt;p&gt;Today was “I-hate-certificates” day. Four different people had ugly issues with &lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; has finished cleaning the underway data in SQLShare and is ready to load it into Myria. However, she had problems using Myria’s Python client because her Mac did not trust Myria’s &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate. (&lt;span class="caps"&gt;UW&lt;/span&gt;’s choice of Certificate Authority (&lt;span class="caps"&gt;CA&lt;/span&gt;), InCommon, has apparently not been blessed by Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X.)&lt;/p&gt;
&lt;p&gt;I should note that Sophie identified and fixed a bug in the Myria Python client, which she &lt;a href="https://github.com/uwescience/myria-python/pull/23"&gt;pushed to us on GitHub&lt;/a&gt;. That type of fluency with others’ code, being confident in your own diagnosis of the bug, and having the ability to push bug fixes back to open source projects is a key goal of this whole endeavor!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brendan Lee has been working with the &lt;a href="http://db.cs.washington.edu/"&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Database Group&lt;/a&gt; on &lt;a href="http://dl.acm.org/citation.cfm?id=2627774"&gt;MyMergerTree&lt;/a&gt;. MyMergerTree is powered by Myria, so after I enabled &lt;span class="caps"&gt;SSL&lt;/span&gt; yesterday, I asked him to fix the web service to use &lt;span class="caps"&gt;HTTPS&lt;/span&gt; instead of &lt;span class="caps"&gt;HTTP&lt;/span&gt; links. Well, great, InCommon has not been blessed by Ubuntu either.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two different people came to Incubator office hours to learn about &lt;code&gt;git&lt;/code&gt;. They brought older laptops with, you guessed it, older versions of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X installed. And, surprise surprise, &lt;a href="https://help.github.com/articles/error-ssl-certificate-problem-verify-that-the-ca-cert-is-ok/"&gt;GitHub’s current &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate&lt;/a&gt; is not blessed by those old versions of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X, and the only way to fix it is to &lt;em&gt;upgrade the &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/em&gt;. You know, because that’s a &lt;em&gt;totally reasonable&lt;/em&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such a waste of time. Why do we make users jump through these hoops? We worked around these issues in a variety of ways, all of which involved disabling certificate verification. Ugh, that’s a fail. (In one case we were able to switch from &lt;span class="caps"&gt;HTTPS&lt;/span&gt; to &lt;span class="caps"&gt;SSH&lt;/span&gt; for GitHub — that, at least, made me moderately less sad at heart.)&lt;/p&gt;
&lt;p&gt;I left at lunch for the airport. I’ll be at &lt;span class="caps"&gt;NYU&lt;/span&gt; in Brooklyn for the next week giving talks, making connections, and generally getting to know better our Moore-Sloan &lt;span class="caps"&gt;DSE&lt;/span&gt; collaborators across the country. I spent the entire flight working on slides for the various talks.&lt;/p&gt;</summary><category term="sophie"></category><category term="incubator"></category></entry><entry><title>Myria security, ethnography</title><link href="http://blog.halper.in/posts/2014/10/15/myria-security-ethnography/" rel="alternate"></link><updated>2014-10-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-15:posts/2014/10/15/myria-security-ethnography/</id><summary type="html">&lt;p&gt;The newest Chrome update broke parts of &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; because of new policies regarding security (&lt;span class="caps"&gt;HTTPS&lt;/span&gt;) in web &lt;span class="caps"&gt;API&lt;/span&gt; calls. So, I finally did the 5 hours of work it would take to make Myria’s &lt;span class="caps"&gt;API&lt;/span&gt; server support &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, installed the certificate, and made all our deployment scripts. Now our users’ data (which is all publicly logged anyway) is much “safer” and, more importantly, the website works again.&lt;/p&gt;
&lt;p&gt;I sat down with the ethnographers who are observing the &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; — &lt;a href="http://fioresilfvast.org/"&gt;Brittany Fiore-Silvast&lt;/a&gt; and Anissa Tanweer — to chat about the parts of the Incubator process that happened before we looped them in. We discussed the internal planning, what happened in Spring and what we wanted to change, the applicant pool, the review process, and more. It was a fun chat and merely having the chat, plus their insightful questions, made me reflect more on the process and take a step back. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; and I met with &lt;a href="http://r.halper.in/coauth/shrainik"&gt;Shrainik Jain&lt;/a&gt; and &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik Moritz&lt;/a&gt; to discuss our project quantifying how much “variety” there is in different data systems and progress on the draft paper they have been writing. The basic idea is that we have an intuitive notion of “well-structured” databases (like the &lt;span class="caps"&gt;TPC&lt;/span&gt; benchmarks), and databases with “high variety” (like SQLShare), and we ought to be able to quantitatively find differences between them. &lt;span class="caps"&gt;SDSS&lt;/span&gt; should be a nice mid-point: it has many users asking potentially different questions, but their queries are limited to a well-defined, highly structured schema provided by the Skyserver team. Initial results are promising, and we are starting to put together a draft.&lt;/p&gt;</summary><category term="britta"></category><category term="anissa"></category><category term="dominik"></category><category term="shrainik"></category><category term="bill"></category><category term="myria"></category><category term="incubator"></category><category term="variety"></category><category term="ethnography"></category></entry><entry><title>Incubator week 3.1</title><link href="http://blog.halper.in/posts/2014/10/14/incubator-week-31/" rel="alternate"></link><updated>2014-10-14T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-14:posts/2014/10/14/incubator-week-31/</id><summary type="html">&lt;p&gt;Today was day 1 of &lt;a href="http://data.uw.edu/incubator"&gt;Incubator&lt;/a&gt; week 3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; exposed a locking issue in &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;: if a running query reads from table &lt;code&gt;T&lt;/code&gt; and a user changes the sharing on table &lt;code&gt;T&lt;/code&gt;, SQLShare basically locks the entire system until the query finishes. We need to revisit this issue, but it is unlikely to be a common problem: today was literally the first time it has ever cropped up. We also discussed a variety of &lt;span class="caps"&gt;SQL&lt;/span&gt;-isms such as how to convert a Julian Day into a &lt;code&gt;Date&lt;/code&gt; and the like. Sophie is now really off to the races with the underway data.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I played with various methods of inspecting on the progress and performance of his loading data into PostgreSQL. We went down a bit of a rabbit-hole when trying to figure out why it was not using the index to compute the number of distinct fields in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;explain&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;distinct&lt;/span&gt; &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="k"&gt;Aggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;HashAggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17631684&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;602685952&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;729&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;


&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;"public.pixels"&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Type&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;---------+----------------------+----------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;pixelid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pixels_pixelid_seq'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="n"&gt;ra&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;decl&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;fval&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;radec&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3786&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;mask&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_pkey"&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;"fieldidx"&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Foreign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_fieldid_fkey"&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it turns out, PostgreSQL’s &lt;code&gt;DISTINCT&lt;/code&gt; implementation simply cannot do the right thing.&lt;/p&gt;
&lt;p&gt;I also set up the &lt;a href="http://uwdatascienceincubator.wordpress.com/"&gt;Incubator Blog&lt;/a&gt; today: it combines posts from all of the incubator participants. Setting up this blog was really cool — I used &lt;a href="https://ifttt.com/"&gt;If This, Then That (&lt;span class="caps"&gt;IFTTT&lt;/span&gt;)&lt;/a&gt; to automatically crawl the feeds from the individual blogs and post them on a shared Wordpress! (Thanks to our friends at &lt;span class="caps"&gt;UC&lt;/span&gt; Berkeley for recommending &lt;span class="caps"&gt;IFTTT&lt;/span&gt; via the new Slack communication channel we’ve all been using.)&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="incubator"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category></entry><entry><title>Data and databases</title><link href="http://blog.halper.in/posts/2014/10/13/data-and-databases/" rel="alternate"></link><updated>2014-10-13T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-13:posts/2014/10/13/data-and-databases/</id><summary type="html">&lt;p&gt;Over the weekend, both &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; worked independently on their &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; projects; I spent some time then and today answering emails :).&lt;/p&gt;
&lt;p&gt;Sophie has been loading underway data (&lt;span class="caps"&gt;GPS&lt;/span&gt;, temperature, salinity, etc. from ships in motion) into &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; for cleaning. Every research vessel is its own special flower that represents dates and times in different ways, and we want to bring them all into a normalized format. We will then load the normalized data into Myria and join it with the SeaFlow data in her analyses. 
&lt;small&gt;(For now, the Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Server system underpinning SQLShare is better for messy data than Myria itself, because &lt;span class="caps"&gt;SQL&lt;/span&gt; Server handles more data types and corner cases than we do. This will change!)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We made Sophia’s queries run &lt;em&gt;dramatically&lt;/em&gt; faster by materializing SQLShare datasets once all the fields were in the right types. Turns out, recomputing &lt;code&gt;datetime&lt;/code&gt; objects can be really slow when you want to do interval joins on them! We also discussed how to find bad rows in datasets, e.g., if you’re getting errors casting values to &lt;code&gt;float&lt;/code&gt;, you need to know about &lt;code&gt;WHERE ISNUMERIC(x) &amp;lt;&amp;gt; 1&lt;/code&gt; so you can find the bad values of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Andy has been experiencing the joys of loading data into databases with indexes, foreign keys, auto commit, checkpointing, and all that. After some iteration, we figured out to check the Postgres logs and found that his remote &lt;code&gt;COPY&lt;/code&gt; commands were running out of memory.  Chunking the data made it finish.&lt;/p&gt;
&lt;p&gt;I finally got &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria’s web interface&lt;/a&gt; to correctly push queries into the Postgres without weird Google App Engine issues, fixed all the Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; tests, and deployed it.&lt;/p&gt;</summary><category term="sophie"></category><category term="becker"></category><category term="incubator"></category><category term="reading"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category><category term="raco"></category><category term="myria"></category></entry><entry><title>Visualizations everywhere</title><link href="http://blog.halper.in/posts/2014/10/10/visualizations-everywhere/" rel="alternate"></link><updated>2014-10-10T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-10:posts/2014/10/10/visualizations-everywhere/</id><summary type="html">&lt;p&gt;&lt;a href="http://web.cecs.pdx.edu/~tufte/"&gt;Kristin Tufte&lt;/a&gt; from Portland State University came to &lt;span class="caps"&gt;UW&lt;/span&gt; today to visit some folks in transportation and to visit our eScience and Database groups. Most of the eScience students got to tell her about their work, and she and I discussed the Data Science Incubator and how to get undergrads involved. In her talk, she told us about S-Store, a streaming database with transactional support, and all about her work building &lt;a href="http://portal.its.pdx.edu/Portal/index.php/home/"&gt;Portal&lt;/a&gt; to manage, analyze, and visualize live traffic data on the Portland—Vancouver(&lt;span class="caps"&gt;WA&lt;/span&gt;) border in collaboration with &lt;span class="caps"&gt;ODOT&lt;/span&gt;, &lt;span class="caps"&gt;WSDOT&lt;/span&gt;, and related gov’ts. Fascinating, big, messy data problems everywhere, and great output viz.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik Moritz&lt;/a&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; I chatted about his research on Myria’s profiler / query execution visualizer and the paper we hope to write about it this quarter. I have been logging a half-dozen ways in which the profiler has helped me debug and understand various system this summer and these use cases should help flesh out the paper.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/cobbc12"&gt;Camille Cobb&lt;/a&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; I chatted about various projects for her relating to visualization of scientific datasets. We’re doing lit review and reading up on existing work, but I think we have the gist of two interesting, novel projects to go on.&lt;/p&gt;
&lt;p&gt;In my own time, I have been struggling with using &lt;a href="https://bitbucket.org/zzzeek/sqlalchemy"&gt;SQLAlchemy&lt;/a&gt; on Google App Engine to make Myria push work into an underlying &lt;span class="caps"&gt;DBMS&lt;/span&gt; and get much better performance on selective queries.&lt;/p&gt;</summary><category term="tufte"></category><category term="camille"></category><category term="dominik"></category><category term="myria"></category></entry><entry><title>Data Science Incubator, Week 2</title><link href="http://blog.halper.in/posts/2014/10/09/data-science-incubator-week-2/" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:posts/2014/10/09/data-science-incubator-week-2/</id><summary type="html">&lt;p&gt;I spent today in the Data Science Incubator working with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt; on &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;. We are trying to port the key components of the moving object detection into PostgreSQL using PostGIS.&lt;/p&gt;
&lt;p&gt;On his own, Andy designed a schema for the various data, including spatial columns and indexes. Side by side, we worked on a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speeding up data load: &lt;code&gt;\COPY&lt;/code&gt; is much faster than large batch insert statements, as we know.&lt;/li&gt;
&lt;li&gt;Explaining queries and seeing whether indexes are used: not yet, but the database is small so sequential scans might actually make more sense. Also, it looks like the optimizer may miss some tricks in some cases.&lt;/li&gt;
&lt;li&gt;Cloud-ification: we set up an Amazon &lt;span class="caps"&gt;RDS&lt;/span&gt; PostgreSQL+PostGIS database, and proved that we could load data in, even large data.&lt;/li&gt;
&lt;li&gt;Astro UDFs: for the kinds of spatial queries that we need, there are great C++ libraries that do all the work; we need access to those UDFs in the database! We &lt;a href="https://github.com/uwescience/kbmod/issues/1"&gt;began investigating&lt;/a&gt; PostgreSQL support for UDFs as compiled C binaries; this should be doable, but we may need to fiddle to make the C++ code play nice with PostgreSQL, which expects C…&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDFs may be a show-stopper for using &lt;span class="caps"&gt;RDS&lt;/span&gt;, however — you cannot register binary UDFs there, so we will likely have to kill the &lt;span class="caps"&gt;RDS&lt;/span&gt; instance and setup a manually managed &lt;span class="caps"&gt;EC2&lt;/span&gt;+PostgreSQL instance instead.&lt;/p&gt;
&lt;p&gt;Aside: Automatically-managed cloud services are &lt;em&gt;very&lt;/em&gt; appealing, but little implementation issues like this always seem to bite us. Similar limitations apply to Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Azure [no stored procedures], and Google App Engine [no CPython]—-our needs always push us into the “Sorry, you have to do &lt;em&gt;everything&lt;/em&gt; manually now” use case, or make us dramatically restrict the performance and capabilities of our applications. Surely this issue crops up for other users!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For next week, some preliminary goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move from &lt;span class="caps"&gt;RDS&lt;/span&gt; to &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get a bigger dataset into the database, so we are in a real optimization framework&lt;/li&gt;
&lt;li&gt;get the &lt;span class="caps"&gt;UDF&lt;/span&gt; into the database&lt;/li&gt;
&lt;li&gt;work on expressing the queries and testing correctness&lt;/li&gt;
&lt;li&gt;optimize the indexes and queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also chatted with &lt;a href="http://homes.cs.washington.edu/~bholt/"&gt;Brandon Holt&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt;, and Simon Kahan about possible &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt;—&lt;span class="caps"&gt;KBMOD&lt;/span&gt; connections.&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category><category term="brandon"></category><category term="grappa"></category></entry><entry><title>Mo(o)re(—Sloan) fun with Academic Lineage</title><link href="http://blog.halper.in/posts/2014/10/09/moore-sloan-fun-with-academic-lineage/" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:posts/2014/10/09/moore-sloan-fun-with-academic-lineage/</id><summary type="html">&lt;p&gt;While we were at the Moore—Sloan Data Science Environments community build, &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt; continued our work analyzing academic lineage with Myria.&lt;/p&gt;
&lt;p&gt;On the citation graph we’re using, &lt;a href="http://www.mapequation.org/code.html"&gt;InfoMap&lt;/a&gt; identifies 5,292 unique paper clusters. For each cluster, we took the top paper rated by &lt;a href="http://www.eigenfactor.org/"&gt;Eigenfactor&lt;/a&gt; and fed these 5,292 papers as the seed set for the Least Common Ancestor (&lt;span class="caps"&gt;LCA&lt;/span&gt;) query which we ran on Myria. The &lt;a href="https://demo.myria.cs.washington.edu/queries?max=35111&amp;amp;limit=1"&gt;query itself&lt;/a&gt; took a little over 4 hours, but it finished successfully.&lt;/p&gt;
&lt;p&gt;Of the nearly 14 million pairs of papers, 7.1M of them have a common ancestor—a hit rate of about 50%.  Among these 7.1M LCAs, here are the ten most frequent papers (and their frequencies):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(47,129) &lt;em&gt;Some Methods for Strengthening the Common 𝝌&lt;sup&gt;2&lt;/sup&gt; Tests&lt;/em&gt; (Cochran, 1954)&lt;/li&gt;
&lt;li&gt;(35,585) &lt;em&gt;The Evolution of Reciprocal Altruism&lt;/em&gt; (Trivers, 1971)&lt;/li&gt;
&lt;li&gt;(34,195) &lt;em&gt;On the Mathematical Foundations of Theoretical Statistics&lt;/em&gt; (Fisher, 1922)&lt;/li&gt;
&lt;li&gt;(34,093) &lt;em&gt;The Tragedy of the Commons&lt;/em&gt; (Hardin, 1968)&lt;/li&gt;
&lt;li&gt;(32,067) &lt;em&gt;Some Difficulties of the Determination Problem&lt;/em&gt; (Harrison, 1933)&lt;/li&gt;
&lt;li&gt;(29,458) &lt;em&gt;Diverse Doctrines of Evolution, Their Relation to the Practice of Science and of Life&lt;/em&gt; (Jennings, 1927)&lt;/li&gt;
&lt;li&gt;(28,149) &lt;em&gt;An Analysis of Transformations&lt;/em&gt; (Box, 1964)&lt;/li&gt;
&lt;li&gt;(26,000) &lt;em&gt;Fitting the Negative Binomial Distribution to Biological Data&lt;/em&gt; (Bliss, 1953)&lt;/li&gt;
&lt;li&gt;(25,410) &lt;em&gt;A Method for Cluster Analysis&lt;/em&gt; (Edwards, 1965)&lt;/li&gt;
&lt;li&gt;(24,611) &lt;em&gt;A Theory of the Allocation of Time&lt;/em&gt; (Becker, 1965)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope to dig into this more next week, but looking at the results is already pretty fascinating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These papers are generally highly cited, but (paraphrasing Jevin) may not be currently recognized as the very top according to standard citation metrics.&lt;/li&gt;
&lt;li&gt;The time range is pretty interesting — early to mid 20th century all around.&lt;/li&gt;
&lt;li&gt;Mathematics and statistics seems to dominate this part of the list. We do see some more fundamental life science papers nearby, the first of which is &lt;em&gt;The Gene&lt;/em&gt; (Goldschmidt, 1928) at #17.&lt;/li&gt;
&lt;li&gt;The top hit represents 0.66%, or 1 in 151 of the results, and the 10th hit represents 0.34% or 1 in 289 of the results.&lt;/li&gt;
&lt;li&gt;And, of course, I have not directly come across any of these papers in my work, but I should go read them!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What are your thoughts: Do you recognize these papers? Have you read them? What else should we think about?&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="msdse"></category><category term="eigenfactor"></category></entry><entry><title>Moore-Sloan Data Science Environment Summit</title><link href="http://blog.halper.in/posts/2014/10/08/moore-sloan-data-science-environment-summit/" rel="alternate"></link><updated>2014-10-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-08:posts/2014/10/08/moore-sloan-data-science-environment-summit/</id><summary type="html">&lt;p&gt;&lt;img alt="#dsesummit group" src="/images/20141009_DSE_Summit_70.jpg" style="width: 924px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;The last three days we were been at the Moore-Sloan &lt;span class="caps"&gt;DSE&lt;/span&gt; Summit (#dsesummit on Twitter). It was utterly fantastic to see all our compatriots at Berkeley and &lt;span class="caps"&gt;NYU&lt;/span&gt;, and to meet new ones. Here are a few random observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main goal of the summit was for community building. By this metric, the &lt;span class="caps"&gt;DSE&lt;/span&gt; Summit was an &lt;strong&gt;unqualified success&lt;/strong&gt;. By the end of the three days I felt like I knew everyone I passed in the hall and I had experienced many substantial, half-hour-plus-long conversations with many great folks from everywhere. Kevin, Micaela, and Sarah did a great job with the planning and the &lt;em&gt;gilded cage&lt;/em&gt; of Asilomar was a wonderful venue in which to be locked together!&lt;/li&gt;
&lt;li&gt;Since unconferences started creeping into workshop schedules a few years back, I have had a really mixed impression. They seem to work best with small groups where everyone is interested; bigger groups tend to devolve into presentations and advertisements by the two or three people who normally talk the most — thus two of the unconferences felt pretty useless to me. In contrast, the third unconference on the last day was great — about 10 students and data scientists debating real issues around “how to we keep a sense of community and communication going” after the summit.&lt;/li&gt;
&lt;li&gt;Among the scientists with data problems, the groups seemed heavily slanted towards people who are computer savvy. I heard terms like “cache line size” more often than I would have expected, and I heard terms like “data management” much less often than I would have expected. I expect this distribution to change as data-driven scientists from less computationally-savvy domains enter the field.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; seems to be unique among the schools in that we have a substantial and increasing number of people who are “100% &lt;span class="caps"&gt;DSE&lt;/span&gt;” (Andrew, Bill, Jake, me, plus the data scientists we are recruiting). I will be interested to see whether this difference matters in the next 5 years.&lt;/li&gt;
&lt;li&gt;Bill and I spent the hour introducing and taking Q&amp;amp;A about the &lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator program at the software tools working group meeting. I am excited and hopeful that versions of this program will be picked up by other schools!&lt;/li&gt;
&lt;/ul&gt;</summary><category term="msdse"></category><category term="asilomar"></category></entry><entry><title>2014-09-24 daily</title><link href="http://blog.halper.in/posts/2014/09/24/2014-09-24-daily/" rel="alternate"></link><updated>2014-09-24T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-24:posts/2014/09/24/2014-09-24-daily/</id><summary type="html">&lt;p&gt;We made final decisions about the proposed Incubator projects today. We ended up with 6 exciting projects we accepted, and 20 more we wish we could have said yes to. If your proposal was not accepted, or you want to get in touch with us some other way, note that we will be starting office hours every Thursday 9—11 in the Data Science Studio space beginning next week. (We will use Sieg 326 for the first month until construction is done).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I held a “pre-incubator” (hers was one of the chosen proposals) hack session in the afternoon, during which we wrote five or six queries to help us determine how to best co-align cytograms from different cruises and analyze the intersecting area for her research cellular diversity. It should be a fun project to continue working on this quarter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~shrainik/"&gt;Shrainik Jain&lt;/a&gt; is back from Microsoft Research (where neither he nor his team was recently fired), and we chatted about his summer project and his upcoming quals project on identifying and quantifying the “high-variety” (the most important V, from my opinion) aspect of “big data”.&lt;/p&gt;</summary><category term="sophie"></category><category term="shrainik"></category><category term="incubator"></category><category term="myria"></category><category term="seaflow"></category></entry><entry><title>2014-09-23 daily</title><link href="http://blog.halper.in/posts/2014/09/23/2014-09-23-daily/" rel="alternate"></link><updated>2014-09-23T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-23:posts/2014/09/23/2014-09-23-daily/</id><summary type="html">&lt;p&gt;Today I met with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt; to continue our discussions of Sandra Anderson’s work using Myria to study citation networks. This week, we are digging into one 37-hop citation path from neuroscience in 1988 to law in 1912. Really, really fascinating data. Soon, we hope to be able to automatically identify what the important papers that bridge disparate fields, and when these bridges were built.&lt;/p&gt;
&lt;p&gt;In the afternoon, we held the &lt;a href="http://escience.washington.edu/blog/data-science-uw"&gt;eScience Welcome Event&lt;/a&gt; for Fall 2014 — we met all the new postdocs, faculty, and &lt;a href="http://escience.washington.edu/education-IGERT"&gt;&lt;span class="caps"&gt;IGERT&lt;/span&gt;&lt;/a&gt; students who will be joining us this year. Now that school is back in session (starting tomorrow) the year is officially beginning, and I am so excited about what’s coming up!&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="myria"></category><category term="eigenfactor"></category></entry><entry><title>2014-09-22 daily</title><link href="http://blog.halper.in/posts/2014/09/22/2014-09-22-daily/" rel="alternate"></link><updated>2014-09-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-22:posts/2014/09/22/2014-09-22-daily/</id><summary type="html">&lt;p&gt;The majority activity today was reviewing the proposals we received for the Fall 2014 edition of our &lt;a href="http://data.uw.edu/incubator/"&gt;Data Science Incubator&lt;/a&gt;. We received &lt;strong&gt;26&lt;/strong&gt; fantastic proposals ranging from Astronomy to Statistics (&lt;em&gt;sadly, no Zoology&lt;/em&gt;), and we are probably going to have to cut it down to 5 or 6. Lots of great stuff in there, so much so that we are talking about other ways to figure out how to support the projects.&lt;/p&gt;
&lt;p&gt;The rest of the day was filled with student meetings. &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt; is back from Google and will be finishing up his quals on clustering SeaFlow data. &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; is finishing up his paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to generate fast, efficient &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; programs from MyriaL code.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="brandon"></category><category term="jeremy"></category></entry><entry><title>2014-09-19 daily</title><link href="http://blog.halper.in/posts/2014/09/19/2014-09-19-daily/" rel="alternate"></link><updated>2014-09-19T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-19:posts/2014/09/19/2014-09-19-daily/</id><summary type="html">&lt;p&gt;Today &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I hacked on Myria for SeaFlow once again. We found another few opportunities for language and usability improvements, and made little progress because of an issue introduced when fixing other bugs earlier this week.&lt;/p&gt;
&lt;p&gt;In the Myria research meeting, we had both Johannes Gehrke from Microsoft/Cornell and new/future &lt;span class="caps"&gt;UW&lt;/span&gt; database faculty &lt;a href="http://people.csail.mit.edu/akcheung/"&gt;Alvin Cheung&lt;/a&gt; at the Myria meeting. We talked about the real apps (Sophie, Sandra) that we implemented with Myria this summer and about future research ideas.&lt;/p&gt;</summary><category term="sophie"></category><category term="myria"></category><category term="alvin"></category><category term="sandra"></category></entry><entry><title>2014-09-17 daily</title><link href="http://blog.halper.in/posts/2014/09/17/2014-09-17-daily/" rel="alternate"></link><updated>2014-09-17T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-17:posts/2014/09/17/2014-09-17-daily/</id><summary type="html">&lt;p&gt;Today I mostly worked on admission control (i.e., query queuing) for Myria. I also read some papers on cost-based optimizers.&lt;/p&gt;</summary><category term="myria"></category></entry><entry><title>2014-09-16 daily</title><link href="http://blog.halper.in/posts/2014/09/16/2014-09-16-daily/" rel="alternate"></link><updated>2014-09-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-16:posts/2014/09/16/2014-09-16-daily/</id><summary type="html">&lt;p&gt;I also did not get much time to do real work today. There were three major activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator applications are due Thursday! They have started rolling in, so I have started looking at them and have started a few clarifying discussions with some of the authors. Getting excited for this second incarnation!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill and Andrew and I met to discuss how to make the production Myria demo more stable. Some of the basic things like query queues are becoming important now that we have more users. I’ll work on that in the next few days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I pushed the least common ancestor query a bit farther by fixing a fairly &lt;a href="https://github.com/uwescience/myria/pull/619"&gt;major Myria bug&lt;/a&gt; — though, note that this was a performance bug and not a correctness bug :). Basically, we were sending a lot of data over the network when there was no need to do so. Fixing it sped up queries by a factor of 4—5, increased scaling dramatically, and dramatically reduced the variation in query time.&lt;/p&gt;
&lt;p&gt;At this point, I think I am finally done with the lineage query until I get to meet with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;. More later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="incubator"></category><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-15 daily</title><link href="http://blog.halper.in/posts/2014/09/15/2014-09-15-daily/" rel="alternate"></link><updated>2014-09-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-15:posts/2014/09/15/2014-09-15-daily/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Only had a tiny bit of time today; I worked more on the least common ancestor query. Here is what new work contributed to better scaling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Incrementalizing the code (duh) did in fact let me scale it farther. The prior program was failing because of memory problems in a large final join; breaking down that join into multiple steps, one at a time, inside the loop reduces the memory crunch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obvious Raco optimization: turn &lt;code&gt;X = X + Y;&lt;/code&gt; into &lt;code&gt;X += Y;&lt;/code&gt;, which is a big deal when &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; both come from and are inserted into a database.  (Here, &lt;code&gt;+&lt;/code&gt; is &lt;code&gt;UnionAll&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only reason this optimization had not been implemented before is that this was never actually the bottleneck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once again, it goes to show what working with real data and real queries can do for your system’s applicability.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-12 daily</title><link href="http://blog.halper.in/posts/2014/09/12/2014-09-12-daily/" rel="alternate"></link><updated>2014-09-12T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-12:posts/2014/09/12/2014-09-12-daily/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a great Myria meeting this afternoon. We discussed &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt;‘s user-defined aggregate (&lt;span class="caps"&gt;UDA&lt;/span&gt;) extensions to MyriaL, which provide a very nice way to get scalable, distributed partial aggregation to implement many complicated aggregations in a single scan rather than through joins. The poster child is &lt;a href="https://github.com/uwescience/raco/pull/336#diff-bfec5b84bb73fdca4c61627f00d1e6dcR1908"&gt;&lt;code&gt;arg_max&lt;/code&gt;&lt;/a&gt;: return the entire row where the value of some field is maximized. &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; has proposed a nice syntax that might help simplify the expression of &lt;code&gt;arg_max&lt;/code&gt;-like UDAs.&lt;/p&gt;
&lt;p&gt;I presented Sandra’s least-common ancestor query to the group, and we discussed optimizations. At the meeting, &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt;, Bill, and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; insisted this should work better if rewritten in incremental form, and Brandon helped me rewrite it afterwards. Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;</summary><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="jevin"></category><category term="magda"></category><category term="sandra"></category></entry><entry><title>2014-09-11 daily</title><link href="http://blog.halper.in/posts/2014/09/11/2014-09-11-daily/" rel="alternate"></link><updated>2014-09-11T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-11:posts/2014/09/11/2014-09-11-daily/</id><summary type="html">&lt;p&gt;Today I spent all day with Sandra Anderson’s citation graph lineage queries. Though I can compute “all-pairs reachability” for the first &lt;em&gt;10000&lt;/em&gt; papers in the dataset… I can only currently compute “least-common ancestor” for the first &lt;em&gt;500&lt;/em&gt; papers. There are some severe algorithmic scalability challenges here that we are excited to tackle.&lt;/p&gt;
&lt;p&gt;Part of the problem is that there are 2 million papers and it seems that about 2%—5% of all paper pairs have a common ancestor. This implies that the result set is pretty big — 200 billion papers. This does not scare us, but it is a good real use case!&lt;/p&gt;
&lt;p&gt;Due to data restrictions, we are working with anonymized paper IDs for this project and only Jevin has the secret mapping. To ensure that our computation is sensible, we sent him about 2300 pairs of papers and their least common ancestors, and he de-blinded some of the titles. The results are pretty fascinating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some of the least common ancestors are back in the 1700’s&lt;/li&gt;
&lt;li&gt;some of the least common ancestors are 54 citations deep from one of their papers (&lt;em&gt;update: it appears this is probably bad data, because one such chain is actually anachronistic&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The common ancestors for papers in different fields are often old and seem really fundamental, e.g. (&lt;em&gt;What is Capital?&lt;/em&gt;, I. Fisher, 1896) and (&lt;em&gt;On the Mathematical Foundations of Theoretical Statistics&lt;/em&gt;, &lt;span class="caps"&gt;R. A.&lt;/span&gt; Fisher, 1922).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;</summary><category term="myria"></category><category term="jevin"></category><category term="sandra"></category></entry><entry><title>2014-09-10 daily</title><link href="http://blog.halper.in/posts/2014/09/10/2014-09-10-daily/" rel="alternate"></link><updated>2014-09-10T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-10:posts/2014/09/10/2014-09-10-daily/</id><summary type="html">&lt;p&gt;In between meetings, I spent most of today continuing yesterday’s work on the citation use case. Further query rewrites and testing exposed an interesting bug in the optimizer due to a mismatch between logical algebra representation and the actual system implementation behavior — the optimizer assumed the system could perform an operation which the system could not. Fixed the bug, which was thankfully short-lived!&lt;/p&gt;
&lt;p&gt;After the last few days’ worth of heckling, what I believe is the largest computational step in the algorithm is now finished. At the start, it took about 4 hours to find shared citations 19 levels deep, at which point Myria’s built-in iteration limit (there to protect against infinite loops by bad queries that I write) was triggered. I raised the iteration limit and with all the improvements to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, it now takes 4 hours to fully walk the graph.&lt;/p&gt;
&lt;p&gt;The longest train of citations is 69 levels deep! Tomorrow, I hope to find the actual shared citations for pairs of papers.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-09 daily</title><link href="http://blog.halper.in/posts/2014/09/09/2014-09-09-daily/" rel="alternate"></link><updated>2014-09-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-09:posts/2014/09/09/2014-09-09-daily/</id><summary type="html">&lt;p&gt;Today I picked up some of the work that Sandra Anderson did in her summer internship, namely trying to find common citations (transitively) between pairs of papers in &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;‘s data sets.&lt;/p&gt;
&lt;p&gt;Once again I identified a number of nice optimization opportunities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some query rewrites that result in better &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; plans&lt;/li&gt;
&lt;li&gt;some relational algebra optimizations we were leaving on the floor in &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and some simple systems tricks to aggregate database inserts and thus amortize transaction overheads in Myria.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The query rewrites are an especially interesting use case. Sandra wrote correct, fantastic MyriaL programs, but: since I know how the system works at a deep level, I can suggest rewrites that result in much more efficient execution.&lt;/p&gt;
&lt;p&gt;These queries that come from smart users and real science use cases are great as fodder for the future automatic query rewriting research I am planning on the side. In designing systems and services to make powerful tools accessible to scientists, the answer we give them when things are slow can’t always be “well, you wrote it wrong”.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-08 daily</title><link href="http://blog.halper.in/posts/2014/09/08/2014-09-08-daily/" rel="alternate"></link><updated>2014-09-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-08:posts/2014/09/08/2014-09-08-daily/</id><summary type="html">&lt;p&gt;Today we held the information session for the second installation of our Data Science Incubator projects which we will hold in the Spring. It was fairly well attended; maybe 20—25 people came and many of these indicated that they will be submitting proposals.&lt;/p&gt;
&lt;p&gt;Over the weekend and today I pushed several new optimizations to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; relating to opportunities identified by my work with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; last week.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="myria"></category><category term="sophie"></category></entry><entry><title>2014-09-04 daily</title><link href="http://blog.halper.in/posts/2014/09/04/2014-09-04-daily/" rel="alternate"></link><updated>2014-09-04T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-04:posts/2014/09/04/2014-09-04-daily/</id><summary type="html">&lt;p&gt;Today I met with &lt;span class="caps"&gt;UW&lt;/span&gt; &lt;span class="caps"&gt;CSE&lt;/span&gt; undergrad York Wei and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; for demos and code review of York’s summer Project. York and Brandon have adapted our &lt;a href="http://github.com/uwescience/myria-web"&gt;Myria Web frontend&lt;/a&gt; to extend the current support for &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; with the ability to issue queries to two new backends:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated C code for fast, in-memory queries on a single machine, and&lt;/li&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated code on the &lt;a href="http://grappa.io/"&gt;Grappa runtime&lt;/a&gt;, which uses the partitioned, global address space model to execute blazingly-fast queries in memory on a large, distributed cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout the course of the meeting we discussed general issues and refactoring for Myria-Web so that it will truly be backend-agnostic and we can deploy this awesome, multi-system functionality on the web. I look forward to using this software for Flink support!&lt;/p&gt;
&lt;p&gt;The other exciting news is that &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt; finished the Raco support for user-defined aggregates and functions. We now have the support that Sandra Anderson needs to issue fast queries over citation graphs!&lt;/p&gt;</summary><category term="andrew"></category><category term="brandon"></category><category term="sandra"></category><category term="york"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-09-03 daily</title><link href="http://blog.halper.in/posts/2014/09/03/2014-09-03-daily/" rel="alternate"></link><updated>2014-09-03T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-03:posts/2014/09/03/2014-09-03-daily/</id><summary type="html">&lt;p&gt;Today’s highlight was another hack session with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. The &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;same query to compute the cytometric diversity (“richness”)&lt;/a&gt; that we ran a month ago on a smaller dataset now ran out of memory after 12 minutes; after an hour of futzing I got it to &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;finish successfully&lt;/a&gt; in 2.5 minutes. In the second half of the post, I will dive into this particular query more deeply.&lt;/p&gt;
&lt;p&gt;We met with the designer to discuss possible new logos and branding for the &lt;span class="caps"&gt;UW&lt;/span&gt; eScience Institute and for the &lt;span class="caps"&gt;WRF&lt;/span&gt; Data Science Studio we will be opening (and moving into) in November.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="http://r.halper.in/people/asterios"&gt;Asterios&lt;/a&gt; invited me to be a co-chair for next year’s &lt;strike&gt;Data Analytics in the Cloud&lt;/strike&gt; &lt;strong&gt;Data Analytics at Scale&lt;/strong&gt; (&lt;em&gt;DanaC&lt;/em&gt;) workshop at &lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2015, which would be the fourth incarnation of &lt;a href="http://danac-workshop.dima.tu-berlin.de/"&gt;the DanaC workshop&lt;/a&gt;. We are working on the proposal, and I hope it is accepted!&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Here is the core of the first version of Sophie’s richness query (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;#32538 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;num_particles&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;"beads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_particles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the core of the rewrite (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;#32532 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;
                            &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;"beads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;DistinctBins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;DistinctBins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you see it? It’s easy to miss. The only difference is that we swapped a GroupBy, which computed a Count aggregate that we then ignored, for a Distinct. This optimization (standard in commercial databases) has two huge benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It reduced the memory requirements by more than a factor of 4, making the query tractable at its current scale.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It enabled the query to be run in a pipelined manner. Consider the &lt;span class="caps"&gt;SQL&lt;/span&gt; query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a given &lt;code&gt;(x1, c1)&lt;/code&gt; tuple that will appear in the answer, the query cannot output that tuple until it knows that all input tuples with &lt;code&gt;x = x1&lt;/code&gt; have been seen. In a hash-based aggregate, like Myria uses, this property means that no answers can be produced until the &lt;em&gt;entire&lt;/em&gt; input &lt;code&gt;R&lt;/code&gt; has been processed, and slows the query down.&lt;/p&gt;
&lt;p&gt;(Note: Many databases will sort &lt;code&gt;R&lt;/code&gt; (or use an index on &lt;code&gt;x&lt;/code&gt;) so that they see all the values of &lt;code&gt;x&lt;/code&gt; in order, meaning they can produce &lt;code&gt;(x1,c)&lt;/code&gt; as soon as a tuple of &lt;code&gt;R&lt;/code&gt; has a new value &lt;code&gt;x2&lt;/code&gt;. We are working on this for Myria.)&lt;/p&gt;
&lt;p&gt;In contrast, consider the &lt;span class="caps"&gt;SQL&lt;/span&gt; query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this Distinct query, the output is simply the unique values of &lt;code&gt;x&lt;/code&gt;. For this answer, we can output every new value &lt;code&gt;x1&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; as soon as it appears in the input stream. (We have to keep &lt;code&gt;x1&lt;/code&gt; around to make sure that we do not produce it twice, but we do &lt;em&gt;not&lt;/em&gt; need to wait until we have seen all values of &lt;code&gt;x&lt;/code&gt;). When we produce &lt;code&gt;x1&lt;/code&gt; early, downstream computation (in this case, computing the count of the number of full bins for each cytogram) can continue immediately. This new query plan results in: better overlap between different parts of the computation, more efficient use of the parallel resources of our cluster, and ultimately, happier users who can do their science faster.&lt;/p&gt;
&lt;p&gt;(Note: as above, if the values of &lt;code&gt;x&lt;/code&gt; are sorted then we do not even need to remember all values &lt;code&gt;x1&lt;/code&gt; that we have ever seen — just the most recent version. We are working on this for Myria, too.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on what we learned today, I created &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-09-03"&gt;several new issues&lt;/a&gt; for Raco and for Myria and am well on the way to fixing them. The upshot of this work is that &lt;a href="https://github.com/uwescience/raco/pull/312#issue-41881779"&gt;the “slow query”, written the first way, now results in the same plan&lt;/a&gt; as when I rewrote it the fast way.&lt;/p&gt;
&lt;p&gt;I’ve said it before, and I’ll say it again: &lt;strong&gt;working with real users on real problems is the &lt;strike&gt;only&lt;/strike&gt; most effective way to make sure your system is actually useful&lt;/strong&gt;. The dividends for Myria of working with Sophie and other real scientists for Myria are &lt;em&gt;huge&lt;/em&gt;.&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="asterios"></category><category term="danac"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-09-02 daily</title><link href="http://blog.halper.in/posts/2014/09/02/2014-09-02-daily/" rel="alternate"></link><updated>2014-09-02T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-02:posts/2014/09/02/2014-09-02-daily/</id><summary type="html">&lt;p&gt;Some writing/editing on &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt;‘s paper on the challenges of clustering SeaFlow data.&lt;/p&gt;
&lt;p&gt;Now that &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda&lt;/a&gt; is back from sabbatical (woohoo!), we met to discuss the status of with &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; as a project at the implementation and research levels. Good stuff brewing, and we’re looking forward to all the students coming back!&lt;/p&gt;
&lt;p&gt;I started with the very basics of cost-based optimization for &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; with a particularly bad case that is particularly easy to handle: when computing a cross product, always broadcast the relation expected to be smaller. (Leaving &lt;a href="http://r.halper.in/coauth/pkoutris"&gt;Paris&lt;/a&gt;‘ &lt;a href="http://dl.acm.org/citation.cfm?id=2594558"&gt;hypercube-based plans to handle skew (&lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2014)&lt;/a&gt; as future work.)&lt;/p&gt;</summary><category term="jeremy"></category><category term="magda"></category><category term="paris"></category><category term="seaflow"></category><category term="myria"></category></entry><entry><title>2014-08-29 daily</title><link href="http://blog.halper.in/posts/2014/08/29/2014-08-29-daily/" rel="alternate"></link><updated>2014-08-29T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-29:posts/2014/08/29/2014-08-29-daily/</id><summary type="html">&lt;p&gt;The big news today is that &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt; now has support for user-defined aggregations. I’m excited that we can soon put this new feature to work and asymptotically speedup &lt;a href="http://blog.halper.in/2014-08-20-daily.html"&gt;Sandra’s citation graph analysis work&lt;/a&gt;, which is currently throttled by memory pressure.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="infomap"></category><category term="andrew"></category><category term="sandra"></category></entry><entry><title>2014-08-28 daily</title><link href="http://blog.halper.in/posts/2014/08/28/2014-08-28-daily/" rel="alternate"></link><updated>2014-08-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-28:posts/2014/08/28/2014-08-28-daily/</id><summary type="html">&lt;p&gt;We had our monthly &lt;a href="http://armbrustlab.ocean.washington.edu/resources/seaflow/"&gt;SeaFlow&lt;/a&gt;/eScience group meeting meeting. For this grant the oceanographers have been doing lots of new science using tools like &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;, &lt;a href="http://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/popcycle"&gt;popcycle&lt;/a&gt;, our software for storing indexing and analyzing SeaFlow data. We discussed needed improvements to popcycle and to the &lt;a href="https://github.com/uwescience/seaflow-viz"&gt;seaflow-viz&lt;/a&gt; web dashboard (see it here &lt;a href="https://uwescience.github.com/seaflow-viz"&gt;https://uwescience.github.com/seaflow-viz&lt;/a&gt;) for visualizing cruise performance and science in real time. &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; gave an update on the cruise she got back from a few weeks ago and on our work in the last two weeks analyzing cell diversity in Myria. &lt;a href="http://r.halper.in/coauth/fribalet"&gt;Francois&lt;/a&gt; gave an update on the new proposal we submitted to analyze population dynamics in SeaFlow data. Thinking ahead, we talked about &lt;a href="http://r.halper.in/coauth/swalwell"&gt;Jarred&lt;/a&gt;‘s agenda for scaling up SeaFlow data collection and what needs that would entail for automated instrument monitoring and the underlying data service; and we talked about how to demo “Myria for SeaFlow” to a broader audience.&lt;/p&gt;
&lt;p&gt;In the rest of the day, I worked on making &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; better: adding some new optimization rules to streamline the types of plans that are emitted by the Flink compiler, and hacking/code reviewing with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; to get the &lt;a href="https://github.com/uwescience/raco/pull/269"&gt;MyriaL → Grappa support&lt;/a&gt; working better, and fixing a few little issues that cropped up.&lt;/p&gt;
&lt;p&gt;I also finally implemented, evaluated, and deployed the &lt;a href="https://github.com/uwescience/myria/pull/609"&gt;50x—100x speedup &lt;span class="caps"&gt;SQL&lt;/span&gt; query mod&lt;/a&gt; to the bottleneck query in &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;‘s fantastic Myria profiler. Now &lt;a href="https://demo.myria.cs.washington.edu/profile?queryId=32305"&gt;the profiling &lt;span class="caps"&gt;UI&lt;/span&gt; is super-snappy even for long programs&lt;/a&gt;.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="seaflow"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="dominik"></category><category term="francois"></category><category term="jarred"></category><category term="sophie"></category></entry><entry><title>2014-08-27 daily</title><link href="http://blog.halper.in/posts/2014/08/27/2014-08-27-daily/" rel="alternate"></link><updated>2014-08-27T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-27:posts/2014/08/27/2014-08-27-daily/</id><summary type="html">&lt;p&gt;I began the day with a Skype call with &lt;a href="http://www.user.tu-berlin.de/asteriosk/"&gt;Asterios&lt;/a&gt; and &lt;a href="https://www.dima.tu-berlin.de/menue/staff/stephan_ewen/"&gt;Stephan&lt;/a&gt; from the Flink team. I learned some more things about how to use and test the code I write for Flink, and several places where I did not quite understand the low-level Flink behavior. I have a long list of fixes and todos, but the code generator is looking pretty good! Check out the code below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/7andrew7"&gt;Andrew&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/jakevdp"&gt;Jake&lt;/a&gt;, &lt;a href="https://sites.google.com/site/josephlhellerstein/"&gt;Joe&lt;/a&gt; and I met met to discuss the Fall edition of the Data Science Incubator. We are really excited to run the program again, and we’re hoping it will be productive and fun! &lt;/p&gt;
&lt;p&gt;For more information about the &lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator: &lt;a href="http://data.uw.edu/incubator/"&gt;http://data.uw.edu/incubator/&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;My &lt;a href="https://github.com/uwescience/raco/blob/d0ea4720271756be9cbf8ecbab4515cab0d17f09/raco/language/flink/test_flink.py#L142"&gt;Raco → Flink code generator&lt;/a&gt; automatically produced the following Flink-0.6 Java program from the 8-line MyriaL program embedded in the source below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.common.functions.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.aggregation.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.tuple.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Original query:&lt;/span&gt;
&lt;span class="c1"&gt;//   emp = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   emp1 = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   j = [from emp, emp1&lt;/span&gt;
&lt;span class="c1"&gt;//        where (emp1.$2 = "Magdalena Balazinska"&lt;/span&gt;
&lt;span class="c1"&gt;//               or emp1.salary &amp;lt; 25000)&lt;/span&gt;
&lt;span class="c1"&gt;//          and emp1.$0 = emp.$0&lt;/span&gt;
&lt;span class="c1"&gt;//        emit emp1.*];&lt;/span&gt;
&lt;span class="c1"&gt;//   store(j, OUTPUT);&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FlinkQuery&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Apply(id=$0)[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="c1"&gt;// skipped -- already computed&lt;/span&gt;

    &lt;span class="c1"&gt;// Select((($2 = "Magdalena Balazinska") or (salary &amp;lt; 25000)))[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Select1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FilterFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Magdalena Balazinska"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25000L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(($2 = \"Magdalena Balazinska\") or (salary &amp;lt; 25000))"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// ProjectingJoin(($1 = $0); $1, $2, $3, $4)[Apply1,Select1]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joinWithHuge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Select1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;projectSecond&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Store(public:adhoc:OUTPUT)[ProjectingJoin1]&lt;/span&gt;
    &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeAsCsv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file:///tmp/flink/OUTPUT"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyriaL query"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readCsvFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file:///tmp/flink/employee"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="flink"></category><category term="incubator"></category><category term="asterios"></category><category term="stephan"></category><category term="andrew"></category><category term="bill"></category><category term="jake"></category><category term="joe"></category></entry><entry><title>2014-08-26 daily</title><link href="http://blog.halper.in/posts/2014/08/26/2014-08-26-daily/" rel="alternate"></link><updated>2014-08-26T23:07:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-26:posts/2014/08/26/2014-08-26-daily/</id><summary type="html">&lt;p&gt;One of the goals for our &lt;a href="http://github.com/uwescience/raco"&gt;Relational Algebra COmpiler (Raco)&lt;/a&gt; is that it should be a “relational algebra middleware” for many big data system backends. At the moment, we support: Myria (Myria Team) and Grappa (Brandon Myers), plus anything that speaks &lt;span class="caps"&gt;SQL&lt;/span&gt; including &lt;span class="caps"&gt;SQL&lt;/span&gt; Server but also Hive or Shark. Expanding this set will make the middleware vision real.&lt;/p&gt;
&lt;p&gt;I spent today hacking on the Raco → &lt;a href="http://flink.incubator.apache.org/"&gt;Flink&lt;/a&gt; pipeline. As of tonight, &lt;a href="https://github.com/uwescience/raco/tree/flink"&gt;I can produce Flink Java programs&lt;/a&gt; from MyriaL programs for a fairly fleshed-out &lt;span class="caps"&gt;SPJA&lt;/span&gt; subset of the language. I’m hoping that this experiment will&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;help us make Raco a better middleware for big data systems. (stay tuned!)&lt;/li&gt;
&lt;li&gt;lower the barrier to entry to using Flink (do you &lt;span class="caps"&gt;REALLY&lt;/span&gt; want to write Java code &lt;a href="https://github.com/apache/incubator-flink/blob/ce3ed7e0b769ab3ddc9a96666028ef45f6b01b6d/flink-examples/flink-java-examples/src/main/java/org/apache/flink/example/java/relational/RelationalQuery.java"&gt;like this&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;make it significantly easier to compare big data systems head-to-head.  (stay tuned!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Want to try exporting code for your favorite system from Raco/MyriaL? &lt;a href="mailto:raco@cs.washington.edu"&gt;Let us know!&lt;/a&gt;&lt;/p&gt;</summary><category term="myria"></category><category term="flink"></category></entry><entry><title>2014-08-25 daily</title><link href="http://blog.halper.in/posts/2014/08/25/2014-08-25-daily/" rel="alternate"></link><updated>2014-08-25T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-25:posts/2014/08/25/2014-08-25-daily/</id><summary type="html">&lt;p&gt;Another fantastic hack session with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie&lt;/a&gt; today. We analyzed the quality and quantity of data in the existing files, including determining which of the 64K SeaFlow samples are within a reasonable amount (say, 1σ) of the “average” SeaFlow sample according to the calibration beads. Surprisingly/hearteningly, the vast majority of the data is good! This bodes well for Sophie’s deeper analyses.&lt;/p&gt;
&lt;p&gt;More hacking Myria and code review. Mostly, fixing and improving things we identified with  last week.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry><entry><title>2014-08-22 daily</title><link href="http://blog.halper.in/posts/2014/08/22/2014-08-22-daily/" rel="alternate"></link><updated>2014-08-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-22:posts/2014/08/22/2014-08-22-daily/</id><summary type="html">&lt;p&gt;Started the day with a fantastic meeting with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. Sophie is trying to analyze the entire SeaFlow corpus in &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;. Today: she wrote queries to analyze ~64K files at once in MyriaL, which she is logging on &lt;a href="https://github.com/uwescience/seaflow-myria/wiki"&gt;a GitHub wiki&lt;/a&gt;. We ran into some memory pressure joining two 1.7B-rows (# particles measured by SeaFlow) datasets, but were able to work around it. The remaining queries were on the order of the # sample files and all finished with no problems in under 2 minutes.&lt;/p&gt;
&lt;p&gt;The other great part about working with Sophie is what I learn by seeing a real scientist who is extremely competent, but not a database expert, use the system. I generated at least &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-08-22#contribution-activity"&gt;7 new issues&lt;/a&gt; related to making Myria more usable. I spent my productive time in the rest of the day working on these issues.&lt;/p&gt;
&lt;p&gt;More code review for Myria.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry><entry><title>2014-08-21 daily</title><link href="http://blog.halper.in/posts/2014/08/21/2014-08-21-daily/" rel="alternate"></link><updated>2014-08-21T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-21:posts/2014/08/21/2014-08-21-daily/</id><summary type="html">&lt;p&gt;Today we met with &lt;span class="caps"&gt;UW&lt;/span&gt;-&lt;span class="caps"&gt;IT&lt;/span&gt; to talk about the future of &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;. We will be starting some sprints in the fall to prepare it to be transitioned to them as an on-campus service.&lt;/p&gt;
&lt;p&gt;Spent a fair bit of time reading and discussing &lt;a href="http://homes.cs.washington.edu/~bdmyers/"&gt;Brandon Myers’&lt;/a&gt; paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to compile high-level MyriaL programs to low-level, blazingly fast programs for the &lt;span class="caps"&gt;UW&lt;/span&gt; Architecture Group’s &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; distributed system. The initial results look &lt;em&gt;really&lt;/em&gt; good.&lt;/p&gt;
&lt;p&gt;Otherwise, some code review for Myria and other miscellaneous chats about the future.&lt;/p&gt;</summary><category term="sqlshare"></category><category term="brandon"></category><category term="raco"></category><category term="grappa"></category></entry><entry><title>2014-08-20 daily</title><link href="http://blog.halper.in/posts/2014/08/20/2014-08-20-daily/" rel="alternate"></link><updated>2014-08-20T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-20:posts/2014/08/20/2014-08-20-daily/</id><summary type="html">&lt;p&gt;Today I hacked more on the blog organization and layout; fighting with GitHub CNAMEs was harder than I expected it to be. Eventually I settled on creating a sub-project for the blog as hosting it in my personal &lt;code&gt;dhalperi/dhalperi.github.io&lt;/code&gt; repository affected the URLs for other projects like the &lt;a href="http://dhalperi.github.io/linux-80211n-csitool"&gt;&lt;span class="caps"&gt;CSI&lt;/span&gt; Tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Met with &lt;a href="http://www.jevinwest.org/"&gt;Jevin West&lt;/a&gt; and Sandra Anderson to talk about Sandra’s work on analyzing citation networks with &lt;a href="https://demo.myria.cs.washington.edu/queries?max=23223&amp;amp;limit=1"&gt;Myria&lt;/a&gt;. Sandra is a rising sophomore at Cornell, of undecided major but spectacular in both &lt;span class="caps"&gt;CS&lt;/span&gt; and Math. She started 7 weeks ago with no prior experience “thinking like a database”, and in that time she has contributed lots of interesting ideas, independently re-derived much of the existing database wisdom about how to efficiently solve problems like transitive closure, and written some of the most complicated, iterative MyriaL programs to date. There will be a follow-up post on Sandra’s work!&lt;/p&gt;
&lt;p&gt;More eScience steering committee action. We had our third session with the short-term evaluation team, which seems to be going great. So far, &lt;a href="http://data2insight.com/about/#the_page"&gt;Veronica&lt;/a&gt; has managed to coerce 20+ fiercely independent minds to work together on the steps in our five-year vision for the project and to establish key evaluations. I need to learn more about the process and goals of evaluation—-I’m having a hard time following along/understanding why we’re doing what we’re doing, but I can see amazing outputs from this process already!&lt;/p&gt;
&lt;p&gt;Some SQLShare planning and support. Seems like we’re getting closer to needing/merging the rewrite of the Python client I started a year ago.&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="steering"></category><category term="interns"></category></entry><entry><title>First post</title><link href="http://blog.halper.in/posts/2014/08/19/first-post/" rel="alternate"></link><updated>2014-08-19T09:18:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-19:posts/2014/08/19/first-post/</id><summary type="html">&lt;p&gt;I want to start a research blog. I stole &lt;a href="http://jakevdp.github.io/"&gt;Jake’s Pythonic Perambulations&lt;/a&gt; basic idea and a little bit of &lt;a href="https://github.com/jakevdp/PythonicPerambulations"&gt;code&lt;/a&gt; to get started, and I intend to micro-blog here in the &lt;a href="http://hoggresearch.blogspot.com/"&gt;Hogg style&lt;/a&gt;. We’ll see how it goes.&lt;/p&gt;</summary><category term="jake"></category><category term="hogg"></category></entry></feed>