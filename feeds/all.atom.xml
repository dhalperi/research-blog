<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/all.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-09-24T00:00:00-07:00</updated><entry><title>2014-09-24 daily</title><link href="http://blog.halper.in/2014-09-24-daily.html" rel="alternate"></link><updated>2014-09-24T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-24:2014-09-24-daily.html</id><summary type="html">&lt;p&gt;We made final decisions about the proposed Incubator projects today. We ended up with 6 exciting projects we accepted, and 20 more we wish we could have said yes to. If your proposal was not accepted, or you want to get in touch with us some other way, note that we will be starting office hours every Thursday 9&amp;#8212;11 in the Data Science Studio space beginning next week. (We will use Sieg 326 for the first month until construction is&amp;nbsp;done).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I held a &amp;#8220;pre-incubator&amp;#8221; (hers was one of the chosen proposals) hack session in the afternoon, during which we wrote five or six queries to help us determine how to best co-align cytograms from different cruises and analyze the intersecting area for her research cellular diversity. It should be a fun project to continue working on this&amp;nbsp;quarter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~shrainik/"&gt;Shrainik Jain&lt;/a&gt; is back from Microsoft Research (where neither he nor his team was recently fired), and we chatted about his summer project and his upcoming quals project on identifying and quantifying the &amp;#8220;high-variety&amp;#8221; (the most important V, from my opinion) aspect of &amp;#8220;big&amp;nbsp;data&amp;#8221;.&lt;/p&gt;</summary><category term="sophie"></category><category term="shrainik"></category><category term="incubator"></category><category term="myria"></category><category term="seaflow"></category></entry><entry><title>2014-09-23 daily</title><link href="http://blog.halper.in/2014-09-23-daily.html" rel="alternate"></link><updated>2014-09-23T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-23:2014-09-23-daily.html</id><summary type="html">&lt;p&gt;Today I met with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt; to continue our discussions of Sandra Anderson&amp;#8217;s work using Myria to study citation networks. This week, we are digging into one 37-hop citation path from neuroscience in 1988 to law in 1912. Really, really fascinating data. Soon, we hope to be able to automatically identify what the important papers that bridge disparate fields, and when these bridges were&amp;nbsp;built.&lt;/p&gt;
&lt;p&gt;In the afternoon, we held the &lt;a href="http://escience.washington.edu/blog/data-science-uw"&gt;eScience Welcome Event&lt;/a&gt; for Fall 2014 &amp;#8212; we met all the new postdocs, faculty, and &lt;a href="http://escience.washington.edu/education-IGERT"&gt;&lt;span class="caps"&gt;IGERT&lt;/span&gt;&lt;/a&gt; students who will be joining us this year. Now that school is back in session (starting tomorrow) the year is officially beginning, and I am so excited about what&amp;#8217;s coming&amp;nbsp;up!&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="myria"></category><category term="eigenfactor"></category></entry><entry><title>2014-09-22 daily</title><link href="http://blog.halper.in/2014-09-22-daily.html" rel="alternate"></link><updated>2014-09-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-22:2014-09-22-daily.html</id><summary type="html">&lt;p&gt;The majority activity today was reviewing the proposals we received for the Fall 2014 edition of our &lt;a href="http://data.uw.edu/incubator/"&gt;Data Science Incubator&lt;/a&gt;. We received &lt;strong&gt;26&lt;/strong&gt; fantastic proposals ranging from Astronomy to Statistics (&lt;em&gt;sadly, no Zoology&lt;/em&gt;), and we are probably going to have to cut it down to 5 or 6. Lots of great stuff in there, so much so that we are talking about other ways to figure out how to support the&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;The rest of the day was filled with student meetings. &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt; is back from Google and will be finishing up his quals on clustering SeaFlow data. &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; is finishing up his paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to generate fast, efficient &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; programs from MyriaL&amp;nbsp;code.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="brandon"></category><category term="jeremy"></category></entry><entry><title>2014-09-19 daily</title><link href="http://blog.halper.in/2014-09-19-daily.html" rel="alternate"></link><updated>2014-09-19T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-19:2014-09-19-daily.html</id><summary type="html">&lt;p&gt;Today &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I hacked on Myria for SeaFlow once again. We found another few opportunities for language and usability improvements, and made little progress because of an issue introduced when fixing other bugs earlier this&amp;nbsp;week.&lt;/p&gt;
&lt;p&gt;In the Myria research meeting, we had both Johannes Gehrke from Microsoft/Cornell and new/future &lt;span class="caps"&gt;UW&lt;/span&gt; database faculty &lt;a href="http://people.csail.mit.edu/akcheung/"&gt;Alvin Cheung&lt;/a&gt; at the Myria meeting. We talked about the real apps (Sophie, Sandra) that we implemented with Myria this summer and about future research&amp;nbsp;ideas.&lt;/p&gt;</summary><category term="sophie"></category><category term="myria"></category><category term="alvin"></category><category term="sandra"></category></entry><entry><title>2014-09-17 daily</title><link href="http://blog.halper.in/2014-09-17-daily.html" rel="alternate"></link><updated>2014-09-17T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-17:2014-09-17-daily.html</id><summary type="html">&lt;p&gt;Today I mostly worked on admission control (i.e., query queuing) for Myria. I also read some papers on cost-based&amp;nbsp;optimizers.&lt;/p&gt;</summary><category term="myria"></category></entry><entry><title>2014-09-16 daily</title><link href="http://blog.halper.in/2014-09-16-daily.html" rel="alternate"></link><updated>2014-09-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-16:2014-09-16-daily.html</id><summary type="html">&lt;p&gt;I also did not get much time to do real work today. There were three major&amp;nbsp;activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator applications are due Thursday! They have started rolling in, so I have started looking at them and have started a few clarifying discussions with some of the authors. Getting excited for this second&amp;nbsp;incarnation!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill and Andrew and I met to discuss how to make the production Myria demo more stable. Some of the basic things like query queues are becoming important now that we have more users. I&amp;#8217;ll work on that in the next few&amp;nbsp;days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I pushed the least common ancestor query a bit farther by fixing a fairly &lt;a href="https://github.com/uwescience/myria/pull/619"&gt;major Myria bug&lt;/a&gt; &amp;#8212; though, note that this was a performance bug and not a correctness bug :). Basically, we were sending a lot of data over the network when there was no need to do so. Fixing it sped up queries by a factor of 4&amp;#8212;5, increased scaling dramatically, and dramatically reduced the variation in query&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;At this point, I think I am finally done with the lineage query until I get to meet with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;. More&amp;nbsp;later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="incubator"></category><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-15 daily</title><link href="http://blog.halper.in/2014-09-15-daily.html" rel="alternate"></link><updated>2014-09-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-15:2014-09-15-daily.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Next week, I&amp;#8217;ll see if the incrementalization actually helps us&amp;nbsp;scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Only had a tiny bit of time today; I worked more on the least common ancestor query. Here is what new work contributed to better&amp;nbsp;scaling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Incrementalizing the code (duh) did in fact let me scale it farther. The prior program was failing because of memory problems in a large final join; breaking down that join into multiple steps, one at a time, inside the loop reduces the memory&amp;nbsp;crunch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obvious Raco optimization: turn &lt;code&gt;X = X + Y;&lt;/code&gt; into &lt;code&gt;X += Y;&lt;/code&gt;, which is a big deal when &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; both come from and are inserted into a database.  (Here, &lt;code&gt;+&lt;/code&gt; is &lt;code&gt;UnionAll&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only reason this optimization had not been implemented before is that this was never actually the&amp;nbsp;bottleneck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once again, it goes to show what working with real data and real queries can do for your system&amp;#8217;s&amp;nbsp;applicability.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-12 daily</title><link href="http://blog.halper.in/2014-09-12-daily.html" rel="alternate"></link><updated>2014-09-12T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-12:2014-09-12-daily.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tomorrow I will work more on the scaling&amp;nbsp;issues!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a great Myria meeting this afternoon. We discussed &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt;&amp;#8216;s user-defined aggregate (&lt;span class="caps"&gt;UDA&lt;/span&gt;) extensions to MyriaL, which provide a very nice way to get scalable, distributed partial aggregation to implement many complicated aggregations in a single scan rather than through joins. The poster child is &lt;a href="https://github.com/uwescience/raco/pull/336#diff-bfec5b84bb73fdca4c61627f00d1e6dcR1908"&gt;&lt;code&gt;arg_max&lt;/code&gt;&lt;/a&gt;: return the entire row where the value of some field is maximized. &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; has proposed a nice syntax that might help simplify the expression of &lt;code&gt;arg_max&lt;/code&gt;-like&amp;nbsp;UDAs.&lt;/p&gt;
&lt;p&gt;I presented Sandra&amp;#8217;s least-common ancestor query to the group, and we discussed optimizations. At the meeting, &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt;, Bill, and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; insisted this should work better if rewritten in incremental form, and Brandon helped me rewrite it afterwards. Next week, I&amp;#8217;ll see if the incrementalization actually helps us&amp;nbsp;scale.&lt;/p&gt;</summary><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="jevin"></category><category term="magda"></category><category term="sandra"></category></entry><entry><title>2014-09-11 daily</title><link href="http://blog.halper.in/2014-09-11-daily.html" rel="alternate"></link><updated>2014-09-11T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-11:2014-09-11-daily.html</id><summary type="html">&lt;p&gt;Today I spent all day with Sandra Anderson&amp;#8217;s citation graph lineage queries. Though I can compute &amp;#8220;all-pairs reachability&amp;#8221; for the first &lt;em&gt;10000&lt;/em&gt; papers in the dataset&amp;#8230; I can only currently compute &amp;#8220;least-common ancestor&amp;#8221; for the first &lt;em&gt;500&lt;/em&gt; papers. There are some severe algorithmic scalability challenges here that we are excited to&amp;nbsp;tackle.&lt;/p&gt;
&lt;p&gt;Part of the problem is that there are 2 million papers and it seems that about 2%&amp;#8212;5% of all paper pairs have a common ancestor. This implies that the result set is pretty big &amp;#8212; 200 billion papers. This does not scare us, but it is a good real use&amp;nbsp;case!&lt;/p&gt;
&lt;p&gt;Due to data restrictions, we are working with anonymized paper IDs for this project and only Jevin has the secret mapping. To ensure that our computation is sensible, we sent him about 2300 pairs of papers and their least common ancestors, and he de-blinded some of the titles. The results are pretty&amp;nbsp;fascinating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some of the least common ancestors are back in the&amp;nbsp;1700&amp;#8217;s&lt;/li&gt;
&lt;li&gt;some of the least common ancestors are 54 citations deep from one of their papers (&lt;em&gt;update: it appears this is probably bad data, because one such chain is actually anachronistic&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The common ancestors for papers in different fields are often old and seem really fundamental, e.g. (&lt;em&gt;What is Capital?&lt;/em&gt;, I. Fisher, 1896) and (&lt;em&gt;On the Mathematical Foundations of Theoretical Statistics&lt;/em&gt;, &lt;span class="caps"&gt;R. A.&lt;/span&gt; Fisher,&amp;nbsp;1922).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomorrow I will work more on the scaling&amp;nbsp;issues!&lt;/p&gt;</summary><category term="myria"></category><category term="jevin"></category><category term="sandra"></category></entry><entry><title>2014-09-10 daily</title><link href="http://blog.halper.in/2014-09-10-daily.html" rel="alternate"></link><updated>2014-09-10T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-10:2014-09-10-daily.html</id><summary type="html">&lt;p&gt;In between meetings, I spent most of today continuing yesterday&amp;#8217;s work on the citation use case. Further query rewrites and testing exposed an interesting bug in the optimizer due to a mismatch between logical algebra representation and the actual system implementation behavior &amp;#8212; the optimizer assumed the system could perform an operation which the system could not. Fixed the bug, which was thankfully&amp;nbsp;short-lived!&lt;/p&gt;
&lt;p&gt;After the last few days&amp;#8217; worth of heckling, what I believe is the largest computational step in the algorithm is now finished. At the start, it took about 4 hours to find shared citations 19 levels deep, at which point Myria&amp;#8217;s built-in iteration limit (there to protect against infinite loops by bad queries that I write) was triggered. I raised the iteration limit and with all the improvements to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, it now takes 4 hours to fully walk the&amp;nbsp;graph.&lt;/p&gt;
&lt;p&gt;The longest train of citations is 69 levels deep! Tomorrow, I hope to find the actual shared citations for pairs of&amp;nbsp;papers.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-09 daily</title><link href="http://blog.halper.in/2014-09-09-daily.html" rel="alternate"></link><updated>2014-09-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-09:2014-09-09-daily.html</id><summary type="html">&lt;p&gt;Today I picked up some of the work that Sandra Anderson did in her summer internship, namely trying to find common citations (transitively) between pairs of papers in &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;&amp;#8216;s data&amp;nbsp;sets.&lt;/p&gt;
&lt;p&gt;Once again I identified a number of nice optimization&amp;nbsp;opportunities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some query rewrites that result in better &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;&amp;nbsp;plans&lt;/li&gt;
&lt;li&gt;some relational algebra optimizations we were leaving on the floor in &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and some simple systems tricks to aggregate database inserts and thus amortize transaction overheads in&amp;nbsp;Myria.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The query rewrites are an especially interesting use case. Sandra wrote correct, fantastic MyriaL programs, but: since I know how the system works at a deep level, I can suggest rewrites that result in much more efficient&amp;nbsp;execution.&lt;/p&gt;
&lt;p&gt;These queries that come from smart users and real science use cases are great as fodder for the future automatic query rewriting research I am planning on the side. In designing systems and services to make powerful tools accessible to scientists, the answer we give them when things are slow can&amp;#8217;t always be &amp;#8220;well, you wrote it&amp;nbsp;wrong&amp;#8221;.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-08 daily</title><link href="http://blog.halper.in/2014-09-08-daily.html" rel="alternate"></link><updated>2014-09-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-08:2014-09-08-daily.html</id><summary type="html">&lt;p&gt;Today we held the information session for the second installation of our Data Science Incubator projects which we will hold in the Spring. It was fairly well attended; maybe 20&amp;#8212;25 people came and many of these indicated that they will be submitting&amp;nbsp;proposals.&lt;/p&gt;
&lt;p&gt;Over the weekend and today I pushed several new optimizations to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; relating to opportunities identified by my work with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; last&amp;nbsp;week.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="myria"></category><category term="sophie"></category></entry><entry><title>2014-09-04 daily</title><link href="http://blog.halper.in/2014-09-04-daily.html" rel="alternate"></link><updated>2014-09-04T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-04:2014-09-04-daily.html</id><summary type="html">&lt;p&gt;Today I met with &lt;span class="caps"&gt;UW&lt;/span&gt; &lt;span class="caps"&gt;CSE&lt;/span&gt; undergrad York Wei and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; for demos and code review of York&amp;#8217;s summer Project. York and Brandon have adapted our &lt;a href="http://github.com/uwescience/myria-web"&gt;Myria Web frontend&lt;/a&gt; to extend the current support for &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; with the ability to issue queries to two new&amp;nbsp;backends:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated C code for fast, in-memory queries on a single machine,&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated code on the &lt;a href="http://grappa.io/"&gt;Grappa runtime&lt;/a&gt;, which uses the partitioned, global address space model to execute blazingly-fast queries in memory on a large, distributed&amp;nbsp;cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout the course of the meeting we discussed general issues and refactoring for Myria-Web so that it will truly be backend-agnostic and we can deploy this awesome, multi-system functionality on the web. I look forward to using this software for Flink&amp;nbsp;support!&lt;/p&gt;
&lt;p&gt;The other exciting news is that &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt; finished the Raco support for user-defined aggregates and functions. We now have the support that Sandra Anderson needs to issue fast queries over citation&amp;nbsp;graphs!&lt;/p&gt;</summary><category term="andrew"></category><category term="brandon"></category><category term="sandra"></category><category term="york"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-09-03 daily</title><link href="http://blog.halper.in/2014-09-03-daily.html" rel="alternate"></link><updated>2014-09-03T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-03:2014-09-03-daily.html</id><summary type="html">&lt;p&gt;Today&amp;#8217;s highlight was another hack session with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. The &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;same query to compute the cytometric diversity (&amp;#8220;richness&amp;#8221;)&lt;/a&gt; that we ran a month ago on a smaller dataset now ran out of memory after 12 minutes; after an hour of futzing I got it to &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;finish successfully&lt;/a&gt; in 2.5 minutes. In the second half of the post, I will dive into this particular query more&amp;nbsp;deeply.&lt;/p&gt;
&lt;p&gt;We met with the designer to discuss possible new logos and branding for the &lt;span class="caps"&gt;UW&lt;/span&gt; eScience Institute and for the &lt;span class="caps"&gt;WRF&lt;/span&gt; Data Science Studio we will be opening (and moving into) in&amp;nbsp;November.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="http://r.halper.in/people/asterios"&gt;Asterios&lt;/a&gt; invited me to be a co-chair for next year&amp;#8217;s &lt;strike&gt;Data Analytics in the Cloud&lt;/strike&gt; &lt;strong&gt;Data Analytics at Scale&lt;/strong&gt; (&lt;em&gt;DanaC&lt;/em&gt;) workshop at &lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2015, which would be the fourth incarnation of &lt;a href="http://danac-workshop.dima.tu-berlin.de/"&gt;the DanaC workshop&lt;/a&gt;. We are working on the proposal, and I hope it is&amp;nbsp;accepted!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here is the core of the first version of Sophie&amp;#8217;s richness query (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;#32538 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;num_particles&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;beads&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_particles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the core of the rewrite (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;#32532 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;
                            &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;beads&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;DistinctBins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;DistinctBins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you see it? It&amp;#8217;s easy to miss. The only difference is that we swapped a GroupBy, which computed a Count aggregate that we then ignored, for a Distinct. This optimization (standard in commercial databases) has two huge&amp;nbsp;benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It reduced the memory requirements by more than a factor of 4, making the query tractable at its current&amp;nbsp;scale.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It enabled the query to be run in a pipelined manner. Consider the &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For a given &lt;code&gt;(x1, c1)&lt;/code&gt; tuple that will appear in the answer, the query cannot output that tuple until it knows that all input tuples with &lt;code&gt;x = x1&lt;/code&gt; have been seen. In a hash-based aggregate, like Myria uses, this property means that no answers can be produced until the &lt;em&gt;entire&lt;/em&gt; input &lt;code&gt;R&lt;/code&gt; has been processed, and slows the query&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;(Note: Many databases will sort &lt;code&gt;R&lt;/code&gt; (or use an index on &lt;code&gt;x&lt;/code&gt;) so that they see all the values of &lt;code&gt;x&lt;/code&gt; in order, meaning they can produce &lt;code&gt;(x1,c)&lt;/code&gt; as soon as a tuple of &lt;code&gt;R&lt;/code&gt; has a new value &lt;code&gt;x2&lt;/code&gt;. We are working on this for&amp;nbsp;Myria.)&lt;/p&gt;
&lt;p&gt;In contrast, consider the &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this Distinct query, the output is simply the unique values of &lt;code&gt;x&lt;/code&gt;. For this answer, we can output every new value &lt;code&gt;x1&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; as soon as it appears in the input stream. (We have to keep &lt;code&gt;x1&lt;/code&gt; around to make sure that we do not produce it twice, but we do &lt;em&gt;not&lt;/em&gt; need to wait until we have seen all values of &lt;code&gt;x&lt;/code&gt;). When we produce &lt;code&gt;x1&lt;/code&gt; early, downstream computation (in this case, computing the count of the number of full bins for each cytogram) can continue immediately. This new query plan results in: better overlap between different parts of the computation, more efficient use of the parallel resources of our cluster, and ultimately, happier users who can do their science&amp;nbsp;faster.&lt;/p&gt;
&lt;p&gt;(Note: as above, if the values of &lt;code&gt;x&lt;/code&gt; are sorted then we do not even need to remember all values &lt;code&gt;x1&lt;/code&gt; that we have ever seen &amp;#8212; just the most recent version. We are working on this for Myria,&amp;nbsp;too.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on what we learned today, I created &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-09-03"&gt;several new issues&lt;/a&gt; for Raco and for Myria and am well on the way to fixing them. The upshot of this work is that &lt;a href="https://github.com/uwescience/raco/pull/312#issue-41881779"&gt;the &amp;#8220;slow query&amp;#8221;, written the first way, now results in the same plan&lt;/a&gt; as when I rewrote it the fast&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve said it before, and I&amp;#8217;ll say it again: &lt;strong&gt;working with real users on real problems is the &lt;strike&gt;only&lt;/strike&gt; most effective way to make sure your system is actually useful&lt;/strong&gt;. The dividends for Myria of working with Sophie and other real scientists for Myria are &lt;em&gt;huge&lt;/em&gt;.&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="asterios"></category><category term="danac"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-09-02 daily</title><link href="http://blog.halper.in/2014-09-02-daily.html" rel="alternate"></link><updated>2014-09-02T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-02:2014-09-02-daily.html</id><summary type="html">&lt;p&gt;Some writing/editing on &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt;&amp;#8216;s paper on the challenges of clustering SeaFlow&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Now that &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda&lt;/a&gt; is back from sabbatical (woohoo!), we met to discuss the status of with &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; as a project at the implementation and research levels. Good stuff brewing, and we&amp;#8217;re looking forward to all the students coming&amp;nbsp;back!&lt;/p&gt;
&lt;p&gt;I started with the very basics of cost-based optimization for &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; with a particularly bad case that is particularly easy to handle: when computing a cross product, always broadcast the relation expected to be smaller. (Leaving &lt;a href="http://r.halper.in/coauth/pkoutris"&gt;Paris&lt;/a&gt;&amp;#8216; &lt;a href="http://dl.acm.org/citation.cfm?id=2594558"&gt;hypercube-based plans to handle skew (&lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2014)&lt;/a&gt; as future&amp;nbsp;work.)&lt;/p&gt;</summary><category term="jeremy"></category><category term="magda"></category><category term="paris"></category><category term="seaflow"></category><category term="myria"></category></entry><entry><title>2014-08-29 daily</title><link href="http://blog.halper.in/2014-08-29-daily.html" rel="alternate"></link><updated>2014-08-29T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-29:2014-08-29-daily.html</id><summary type="html">&lt;p&gt;The big news today is that &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt; now has support for user-defined aggregations. I&amp;#8217;m excited that we can soon put this new feature to work and asymptotically speedup &lt;a href="http://blog.halper.in/2014-08-20-daily.html"&gt;Sandra&amp;#8217;s citation graph analysis work&lt;/a&gt;, which is currently throttled by memory&amp;nbsp;pressure.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="infomap"></category><category term="andrew"></category><category term="sandra"></category></entry><entry><title>2014-08-28 daily</title><link href="http://blog.halper.in/2014-08-28-daily.html" rel="alternate"></link><updated>2014-08-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-28:2014-08-28-daily.html</id><summary type="html">&lt;p&gt;We had our monthly &lt;a href="http://armbrustlab.ocean.washington.edu/resources/seaflow/"&gt;SeaFlow&lt;/a&gt;/eScience group meeting meeting. For this grant the oceanographers have been doing lots of new science using tools like &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;, &lt;a href="http://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/popcycle"&gt;popcycle&lt;/a&gt;, our software for storing indexing and analyzing SeaFlow data. We discussed needed improvements to popcycle and to the &lt;a href="https://github.com/uwescience/seaflow-viz"&gt;seaflow-viz&lt;/a&gt; web dashboard (see it here &lt;a href="https://uwescience.github.com/seaflow-viz"&gt;https://uwescience.github.com/seaflow-viz&lt;/a&gt;) for visualizing cruise performance and science in real time. &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; gave an update on the cruise she got back from a few weeks ago and on our work in the last two weeks analyzing cell diversity in Myria. &lt;a href="http://r.halper.in/coauth/fribalet"&gt;Francois&lt;/a&gt; gave an update on the new proposal we submitted to analyze population dynamics in SeaFlow data. Thinking ahead, we talked about &lt;a href="http://r.halper.in/coauth/swalwell"&gt;Jarred&lt;/a&gt;&amp;#8216;s agenda for scaling up SeaFlow data collection and what needs that would entail for automated instrument monitoring and the underlying data service; and we talked about how to demo &amp;#8220;Myria for SeaFlow&amp;#8221; to a broader&amp;nbsp;audience.&lt;/p&gt;
&lt;p&gt;In the rest of the day, I worked on making &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; better: adding some new optimization rules to streamline the types of plans that are emitted by the Flink compiler, and hacking/code reviewing with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; to get the &lt;a href="https://github.com/uwescience/raco/pull/269"&gt;MyriaL → Grappa support&lt;/a&gt; working better, and fixing a few little issues that cropped&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;I also finally implemented, evaluated, and deployed the &lt;a href="https://github.com/uwescience/myria/pull/609"&gt;50x&amp;#8212;100x speedup &lt;span class="caps"&gt;SQL&lt;/span&gt; query mod&lt;/a&gt; to the bottleneck query in &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;&amp;#8216;s fantastic Myria profiler. Now &lt;a href="https://demo.myria.cs.washington.edu/profile?queryId=32305"&gt;the profiling &lt;span class="caps"&gt;UI&lt;/span&gt; is super-snappy even for long programs&lt;/a&gt;.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="seaflow"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="dominik"></category><category term="francois"></category><category term="jarred"></category><category term="sophie"></category></entry><entry><title>2014-08-27 daily</title><link href="http://blog.halper.in/2014-08-27-daily.html" rel="alternate"></link><updated>2014-08-27T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-27:2014-08-27-daily.html</id><summary type="html">&lt;p&gt;I began the day with a Skype call with &lt;a href="http://www.user.tu-berlin.de/asteriosk/"&gt;Asterios&lt;/a&gt; and &lt;a href="https://www.dima.tu-berlin.de/menue/staff/stephan_ewen/"&gt;Stephan&lt;/a&gt; from the Flink team. I learned some more things about how to use and test the code I write for Flink, and several places where I did not quite understand the low-level Flink behavior. I have a long list of fixes and todos, but the code generator is looking pretty good! Check out the code&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/7andrew7"&gt;Andrew&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/jakevdp"&gt;Jake&lt;/a&gt;, &lt;a href="https://sites.google.com/site/josephlhellerstein/"&gt;Joe&lt;/a&gt; and I met met to discuss the Fall edition of the Data Science Incubator. We are really excited to run the program again, and we&amp;#8217;re hoping it will be productive and&amp;nbsp;fun! &lt;/p&gt;
&lt;p&gt;For more information about the &lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator: &lt;a href="http://data.uw.edu/incubator/"&gt;http://data.uw.edu/incubator/&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My &lt;a href="https://github.com/uwescience/raco/blob/d0ea4720271756be9cbf8ecbab4515cab0d17f09/raco/language/flink/test_flink.py#L142"&gt;Raco → Flink code generator&lt;/a&gt; automatically produced the following Flink-0.6 Java program from the 8-line MyriaL program embedded in the source&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.common.functions.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.aggregation.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.tuple.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Original query:&lt;/span&gt;
&lt;span class="c1"&gt;//   emp = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   emp1 = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   j = [from emp, emp1&lt;/span&gt;
&lt;span class="c1"&gt;//        where (emp1.$2 = &amp;quot;Magdalena Balazinska&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;//               or emp1.salary &amp;lt; 25000)&lt;/span&gt;
&lt;span class="c1"&gt;//          and emp1.$0 = emp.$0&lt;/span&gt;
&lt;span class="c1"&gt;//        emit emp1.*];&lt;/span&gt;
&lt;span class="c1"&gt;//   store(j, OUTPUT);&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FlinkQuery&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Apply(id=$0)[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="c1"&gt;// skipped -- already computed&lt;/span&gt;

    &lt;span class="c1"&gt;// Select((($2 = &amp;quot;Magdalena Balazinska&amp;quot;) or (salary &amp;lt; 25000)))[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Select1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FilterFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Magdalena Balazinska&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25000L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(($2 = \&amp;quot;Magdalena Balazinska\&amp;quot;) or (salary &amp;lt; 25000))&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// ProjectingJoin(($1 = $0); $1, $2, $3, $4)[Apply1,Select1]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joinWithHuge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Select1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;projectSecond&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Store(public:adhoc:OUTPUT)[ProjectingJoin1]&lt;/span&gt;
    &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeAsCsv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file:///tmp/flink/OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyriaL query&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readCsvFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file:///tmp/flink/employee&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="flink"></category><category term="incubator"></category><category term="asterios"></category><category term="stephan"></category><category term="andrew"></category><category term="bill"></category><category term="jake"></category><category term="joe"></category></entry><entry><title>2014-08-26 daily</title><link href="http://blog.halper.in/2014-08-26-daily.html" rel="alternate"></link><updated>2014-08-26T23:07:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-26:2014-08-26-daily.html</id><summary type="html">&lt;p&gt;One of the goals for our &lt;a href="http://github.com/uwescience/raco"&gt;Relational Algebra COmpiler (Raco)&lt;/a&gt; is that it should be a &amp;#8220;relational algebra middleware&amp;#8221; for many big data system backends. At the moment, we support: Myria (Myria Team) and Grappa (Brandon Myers), plus anything that speaks &lt;span class="caps"&gt;SQL&lt;/span&gt; including &lt;span class="caps"&gt;SQL&lt;/span&gt; Server but also Hive or Shark. Expanding this set will make the middleware vision&amp;nbsp;real.&lt;/p&gt;
&lt;p&gt;I spent today hacking on the Raco → &lt;a href="http://flink.incubator.apache.org/"&gt;Flink&lt;/a&gt; pipeline. As of tonight, &lt;a href="https://github.com/uwescience/raco/tree/flink"&gt;I can produce Flink Java programs&lt;/a&gt; from MyriaL programs for a fairly fleshed-out &lt;span class="caps"&gt;SPJA&lt;/span&gt; subset of the language. I&amp;#8217;m hoping that this experiment&amp;nbsp;will&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;help us make Raco a better middleware for big data systems. (stay&amp;nbsp;tuned!)&lt;/li&gt;
&lt;li&gt;lower the barrier to entry to using Flink (do you &lt;span class="caps"&gt;REALLY&lt;/span&gt; want to write Java code &lt;a href="https://github.com/apache/incubator-flink/blob/ce3ed7e0b769ab3ddc9a96666028ef45f6b01b6d/flink-examples/flink-java-examples/src/main/java/org/apache/flink/example/java/relational/RelationalQuery.java"&gt;like this&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;make it significantly easier to compare big data systems head-to-head.  (stay&amp;nbsp;tuned!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Want to try exporting code for your favorite system from Raco/MyriaL? &lt;a href="mailto:raco@cs.washington.edu"&gt;Let us&amp;nbsp;know!&lt;/a&gt;&lt;/p&gt;</summary><category term="myria"></category><category term="flink"></category></entry><entry><title>2014-08-25 daily</title><link href="http://blog.halper.in/2014-08-25-daily.html" rel="alternate"></link><updated>2014-08-25T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-25:2014-08-25-daily.html</id><summary type="html">&lt;p&gt;Another fantastic hack session with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie&lt;/a&gt; today. We analyzed the quality and quantity of data in the existing files, including determining which of the 64K SeaFlow samples are within a reasonable amount (say, 1σ) of the &amp;#8220;average&amp;#8221; SeaFlow sample according to the calibration beads. Surprisingly/hearteningly, the vast majority of the data is good! This bodes well for Sophie&amp;#8217;s deeper&amp;nbsp;analyses.&lt;/p&gt;
&lt;p&gt;More hacking Myria and code review. Mostly, fixing and improving things we identified with  last&amp;nbsp;week.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry><entry><title>2014-08-22 daily</title><link href="http://blog.halper.in/2014-08-22-daily.html" rel="alternate"></link><updated>2014-08-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-22:2014-08-22-daily.html</id><summary type="html">&lt;p&gt;Started the day with a fantastic meeting with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. Sophie is trying to analyze the entire SeaFlow corpus in &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;. Today: she wrote queries to analyze ~64K files at once in MyriaL, which she is logging on &lt;a href="https://github.com/uwescience/seaflow-myria/wiki"&gt;a GitHub wiki&lt;/a&gt;. We ran into some memory pressure joining two 1.7B-rows (# particles measured by SeaFlow) datasets, but were able to work around it. The remaining queries were on the order of the # sample files and all finished with no problems in under 2&amp;nbsp;minutes.&lt;/p&gt;
&lt;p&gt;The other great part about working with Sophie is what I learn by seeing a real scientist who is extremely competent, but not a database expert, use the system. I generated at least &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-08-22#contribution-activity"&gt;7 new issues&lt;/a&gt; related to making Myria more usable. I spent my productive time in the rest of the day working on these&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;More code review for&amp;nbsp;Myria.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry><entry><title>2014-08-21 daily</title><link href="http://blog.halper.in/2014-08-21-daily.html" rel="alternate"></link><updated>2014-08-21T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-21:2014-08-21-daily.html</id><summary type="html">&lt;p&gt;Today we met with &lt;span class="caps"&gt;UW&lt;/span&gt;-&lt;span class="caps"&gt;IT&lt;/span&gt; to talk about the future of &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;. We will be starting some sprints in the fall to prepare it to be transitioned to them as an on-campus&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;Spent a fair bit of time reading and discussing &lt;a href="http://homes.cs.washington.edu/~bdmyers/"&gt;Brandon Myers&amp;#8217;&lt;/a&gt; paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to compile high-level MyriaL programs to low-level, blazingly fast programs for the &lt;span class="caps"&gt;UW&lt;/span&gt; Architecture Group&amp;#8217;s &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; distributed system. The initial results look &lt;em&gt;really&lt;/em&gt;&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;Otherwise, some code review for Myria and other miscellaneous chats about the&amp;nbsp;future.&lt;/p&gt;</summary><category term="sqlshare"></category><category term="brandon"></category><category term="raco"></category><category term="grappa"></category></entry><entry><title>2014-08-20 daily</title><link href="http://blog.halper.in/2014-08-20-daily.html" rel="alternate"></link><updated>2014-08-20T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-20:2014-08-20-daily.html</id><summary type="html">&lt;p&gt;Today I hacked more on the blog organization and layout; fighting with GitHub CNAMEs was harder than I expected it to be. Eventually I settled on creating a sub-project for the blog as hosting it in my personal &lt;code&gt;dhalperi/dhalperi.github.io&lt;/code&gt; repository affected the URLs for other projects like the &lt;a href="http://dhalperi.github.io/linux-80211n-csitool"&gt;&lt;span class="caps"&gt;CSI&lt;/span&gt; Tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Met with &lt;a href="http://www.jevinwest.org/"&gt;Jevin West&lt;/a&gt; and Sandra Anderson to talk about Sandra&amp;#8217;s work on analyzing citation networks with &lt;a href="https://demo.myria.cs.washington.edu/queries?max=23223&amp;amp;limit=1"&gt;Myria&lt;/a&gt;. Sandra is a rising sophomore at Cornell, of undecided major but spectacular in both &lt;span class="caps"&gt;CS&lt;/span&gt; and Math. She started 7 weeks ago with no prior experience &amp;#8220;thinking like a database&amp;#8221;, and in that time she has contributed lots of interesting ideas, independently re-derived much of the existing database wisdom about how to efficiently solve problems like transitive closure, and written some of the most complicated, iterative MyriaL programs to date. There will be a follow-up post on Sandra&amp;#8217;s&amp;nbsp;work!&lt;/p&gt;
&lt;p&gt;More eScience steering committee action. We had our third session with the short-term evaluation team, which seems to be going great. So far, &lt;a href="http://data2insight.com/about/#the_page"&gt;Veronica&lt;/a&gt; has managed to coerce 20+ fiercely independent minds to work together on the steps in our five-year vision for the project and to establish key evaluations. I need to learn more about the process and goals of evaluation&amp;#8212;-I&amp;#8217;m having a hard time following along/understanding why we&amp;#8217;re doing what we&amp;#8217;re doing, but I can see amazing outputs from this process&amp;nbsp;already!&lt;/p&gt;
&lt;p&gt;Some SQLShare planning and support. Seems like we&amp;#8217;re getting closer to needing/merging the rewrite of the Python client I started a year&amp;nbsp;ago.&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="steering"></category><category term="interns"></category></entry><entry><title>First post</title><link href="http://blog.halper.in/first-post.html" rel="alternate"></link><updated>2014-08-19T09:18:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-19:first-post.html</id><summary type="html">&lt;p&gt;I want to start a research blog. I stole &lt;a href="http://jakevdp.github.io/"&gt;Jake&amp;#8217;s Pythonic Perambulations&lt;/a&gt; basic idea and a little bit of &lt;a href="https://github.com/jakevdp/PythonicPerambulations"&gt;code&lt;/a&gt; to get started, and I intend to micro-blog here in the &lt;a href="http://hoggresearch.blogspot.com/"&gt;Hogg style&lt;/a&gt;. We&amp;#8217;ll see how it&amp;nbsp;goes.&lt;/p&gt;</summary><category term="jake"></category><category term="hogg"></category></entry></feed>