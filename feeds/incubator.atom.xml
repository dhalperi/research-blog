<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/incubator.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-10-09T00:00:00-07:00</updated><entry><title>Data Science Incubator, Week 2</title><link href="http://blog.halper.in/data-science-incubator-week-2.html" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:data-science-incubator-week-2.html</id><summary type="html">&lt;p&gt;I spent today in the Data Science Incubator working with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt; on &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;. We are trying to port the key components of the moving object detection into PostgreSQL using PostGIS.&lt;/p&gt;
&lt;p&gt;On his own, Andy designed a schema for the various data, including spatial columns and indexes. Side by side, we worked on a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speeding up data load: &lt;code&gt;\COPY&lt;/code&gt; is much faster than large batch insert statements, as we know.&lt;/li&gt;
&lt;li&gt;Explaining queries and seeing whether indexes are used: not yet, but the database is small so sequential scans might actually make more sense. Also, it looks like the optimizer may miss some tricks in some cases.&lt;/li&gt;
&lt;li&gt;Cloud-ification: we set up an Amazon &lt;span class="caps"&gt;RDS&lt;/span&gt; PostgreSQL+PostGIS database, and proved that we could load data in, even large data.&lt;/li&gt;
&lt;li&gt;Astro UDFs: for the kinds of spatial queries that we need, there are great C++ libraries that do all the work; we need access to those UDFs in the database! We &lt;a href="https://github.com/uwescience/kbmod/issues/1"&gt;began investigating&lt;/a&gt; PostgreSQL support for UDFs as compiled C binaries; this should be doable, but we may need to fiddle to make the C++ code play nice with PostgreSQL, which expects C…&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDFs may be a show-stopper for using &lt;span class="caps"&gt;RDS&lt;/span&gt;, however — you cannot register binary UDFs there, so we will likely have to kill the &lt;span class="caps"&gt;RDS&lt;/span&gt; instance and setup a manually managed &lt;span class="caps"&gt;EC2&lt;/span&gt;+PostgreSQL instance instead.&lt;/p&gt;
&lt;p&gt;Aside: Automatically-managed cloud services are &lt;em&gt;very&lt;/em&gt; appealing, but little implementation issues like this always seem to bite us. Similar limitations apply to Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Azure [no stored procedures], and Google App Engine [no CPython]—-our needs always push us into the “Sorry, you have to do &lt;em&gt;everything&lt;/em&gt; manually now” use case, or make us dramatically restrict the performance and capabilities of our applications. Surely this issue crops up for other users!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For next week, some preliminary goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move from &lt;span class="caps"&gt;RDS&lt;/span&gt; to &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get a bigger dataset into the database, so we are in a real optimization framework&lt;/li&gt;
&lt;li&gt;get the &lt;span class="caps"&gt;UDF&lt;/span&gt; into the database&lt;/li&gt;
&lt;li&gt;work on expressing the queries and testing correctness&lt;/li&gt;
&lt;li&gt;optimize the indexes and queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also chatted with &lt;a href="http://homes.cs.washington.edu/~bholt/"&gt;Brandon Holt&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt;, and Simon Kahan about possible &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt;—&lt;span class="caps"&gt;KBMOD&lt;/span&gt; connections.&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category><category term="brandon"></category><category term="grappa"></category></entry><entry><title>2014-09-24 daily</title><link href="http://blog.halper.in/2014-09-24-daily.html" rel="alternate"></link><updated>2014-09-24T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-24:2014-09-24-daily.html</id><summary type="html">&lt;p&gt;We made final decisions about the proposed Incubator projects today. We ended up with 6 exciting projects we accepted, and 20 more we wish we could have said yes to. If your proposal was not accepted, or you want to get in touch with us some other way, note that we will be starting office hours every Thursday 9—11 in the Data Science Studio space beginning next week. (We will use Sieg 326 for the first month until construction is done).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I held a “pre-incubator” (hers was one of the chosen proposals) hack session in the afternoon, during which we wrote five or six queries to help us determine how to best co-align cytograms from different cruises and analyze the intersecting area for her research cellular diversity. It should be a fun project to continue working on this quarter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~shrainik/"&gt;Shrainik Jain&lt;/a&gt; is back from Microsoft Research (where neither he nor his team was recently fired), and we chatted about his summer project and his upcoming quals project on identifying and quantifying the “high-variety” (the most important V, from my opinion) aspect of “big data”.&lt;/p&gt;</summary><category term="sophie"></category><category term="shrainik"></category><category term="incubator"></category><category term="myria"></category><category term="seaflow"></category></entry><entry><title>2014-09-22 daily</title><link href="http://blog.halper.in/2014-09-22-daily.html" rel="alternate"></link><updated>2014-09-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-22:2014-09-22-daily.html</id><summary type="html">&lt;p&gt;The majority activity today was reviewing the proposals we received for the Fall 2014 edition of our &lt;a href="http://data.uw.edu/incubator/"&gt;Data Science Incubator&lt;/a&gt;. We received &lt;strong&gt;26&lt;/strong&gt; fantastic proposals ranging from Astronomy to Statistics (&lt;em&gt;sadly, no Zoology&lt;/em&gt;), and we are probably going to have to cut it down to 5 or 6. Lots of great stuff in there, so much so that we are talking about other ways to figure out how to support the projects.&lt;/p&gt;
&lt;p&gt;The rest of the day was filled with student meetings. &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt; is back from Google and will be finishing up his quals on clustering SeaFlow data. &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; is finishing up his paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to generate fast, efficient &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; programs from MyriaL code.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="brandon"></category><category term="jeremy"></category></entry><entry><title>2014-09-16 daily</title><link href="http://blog.halper.in/2014-09-16-daily.html" rel="alternate"></link><updated>2014-09-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-16:2014-09-16-daily.html</id><summary type="html">&lt;p&gt;I also did not get much time to do real work today. There were three major activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator applications are due Thursday! They have started rolling in, so I have started looking at them and have started a few clarifying discussions with some of the authors. Getting excited for this second incarnation!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill and Andrew and I met to discuss how to make the production Myria demo more stable. Some of the basic things like query queues are becoming important now that we have more users. I’ll work on that in the next few days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I pushed the least common ancestor query a bit farther by fixing a fairly &lt;a href="https://github.com/uwescience/myria/pull/619"&gt;major Myria bug&lt;/a&gt; — though, note that this was a performance bug and not a correctness bug :). Basically, we were sending a lot of data over the network when there was no need to do so. Fixing it sped up queries by a factor of 4—5, increased scaling dramatically, and dramatically reduced the variation in query time.&lt;/p&gt;
&lt;p&gt;At this point, I think I am finally done with the lineage query until I get to meet with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;. More later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="incubator"></category><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-08 daily</title><link href="http://blog.halper.in/2014-09-08-daily.html" rel="alternate"></link><updated>2014-09-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-08:2014-09-08-daily.html</id><summary type="html">&lt;p&gt;Today we held the information session for the second installation of our Data Science Incubator projects which we will hold in the Spring. It was fairly well attended; maybe 20—25 people came and many of these indicated that they will be submitting proposals.&lt;/p&gt;
&lt;p&gt;Over the weekend and today I pushed several new optimizations to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; relating to opportunities identified by my work with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; last week.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="myria"></category><category term="sophie"></category></entry><entry><title>2014-08-27 daily</title><link href="http://blog.halper.in/2014-08-27-daily.html" rel="alternate"></link><updated>2014-08-27T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-27:2014-08-27-daily.html</id><summary type="html">&lt;p&gt;I began the day with a Skype call with &lt;a href="http://www.user.tu-berlin.de/asteriosk/"&gt;Asterios&lt;/a&gt; and &lt;a href="https://www.dima.tu-berlin.de/menue/staff/stephan_ewen/"&gt;Stephan&lt;/a&gt; from the Flink team. I learned some more things about how to use and test the code I write for Flink, and several places where I did not quite understand the low-level Flink behavior. I have a long list of fixes and todos, but the code generator is looking pretty good! Check out the code below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/7andrew7"&gt;Andrew&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/jakevdp"&gt;Jake&lt;/a&gt;, &lt;a href="https://sites.google.com/site/josephlhellerstein/"&gt;Joe&lt;/a&gt; and I met met to discuss the Fall edition of the Data Science Incubator. We are really excited to run the program again, and we’re hoping it will be productive and fun! &lt;/p&gt;
&lt;p&gt;For more information about the &lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator: &lt;a href="http://data.uw.edu/incubator/"&gt;http://data.uw.edu/incubator/&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;My &lt;a href="https://github.com/uwescience/raco/blob/d0ea4720271756be9cbf8ecbab4515cab0d17f09/raco/language/flink/test_flink.py#L142"&gt;Raco → Flink code generator&lt;/a&gt; automatically produced the following Flink-0.6 Java program from the 8-line MyriaL program embedded in the source below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.common.functions.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.aggregation.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.tuple.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Original query:&lt;/span&gt;
&lt;span class="c1"&gt;//   emp = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   emp1 = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   j = [from emp, emp1&lt;/span&gt;
&lt;span class="c1"&gt;//        where (emp1.$2 = "Magdalena Balazinska"&lt;/span&gt;
&lt;span class="c1"&gt;//               or emp1.salary &amp;lt; 25000)&lt;/span&gt;
&lt;span class="c1"&gt;//          and emp1.$0 = emp.$0&lt;/span&gt;
&lt;span class="c1"&gt;//        emit emp1.*];&lt;/span&gt;
&lt;span class="c1"&gt;//   store(j, OUTPUT);&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FlinkQuery&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Apply(id=$0)[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="c1"&gt;// skipped -- already computed&lt;/span&gt;

    &lt;span class="c1"&gt;// Select((($2 = "Magdalena Balazinska") or (salary &amp;lt; 25000)))[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Select1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FilterFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Magdalena Balazinska"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25000L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(($2 = \"Magdalena Balazinska\") or (salary &amp;lt; 25000))"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// ProjectingJoin(($1 = $0); $1, $2, $3, $4)[Apply1,Select1]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joinWithHuge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Select1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;projectSecond&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Store(public:adhoc:OUTPUT)[ProjectingJoin1]&lt;/span&gt;
    &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeAsCsv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file:///tmp/flink/OUTPUT"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyriaL query"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readCsvFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file:///tmp/flink/employee"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="flink"></category><category term="incubator"></category><category term="asterios"></category><category term="stephan"></category><category term="andrew"></category><category term="bill"></category><category term="jake"></category><category term="joe"></category></entry></feed>