<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/incubator.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2015-01-15T00:00:00-08:00</updated><entry><title>Incubator Final presentations</title><link href="http://blog.halper.in/posts/2015/01/15/incubator-final-presentations/" rel="alternate"></link><updated>2015-01-15T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2015-01-15:posts/2015/01/15/incubator-final-presentations/</id><summary type="html">&lt;p&gt;Our Fall 2014 offering of the &lt;a href="http://data.uw.edu/incubator/"&gt;Data Science Incubator&lt;/a&gt; concluded on December 4th with final presentations by the participants in the new &lt;a href="http://escience.washington.edu/dss"&gt;&lt;span class="caps"&gt;WRF&lt;/span&gt; Data Science Studio&lt;/a&gt;. These presentations, the first official event held in our new space, were attended by over 40 people.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ângela Katsuyama presents" src="/images/2014-12-04-fall-incubator-Katsuyama.JPG" style="width: 2928px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;Slides for the final presentations are &lt;a href="https://github.com/uwescience/incubator/tree/master/2014-Fall/final_presentations"&gt;available online&lt;/a&gt;, and the final reports are linked below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andrew Becker&lt;/a&gt;, Astronomy — &lt;a href="https://github.com/uwescience/kbmod/wiki/Incubator-Report"&gt;Kernel-based Moving Object Detection&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://depts.washington.edu/hacholab/labdetails.php?id=58"&gt;Ângela Katsuyama&lt;/a&gt;, Biology — &lt;a href="https://github.com/uwescience/incubator/wiki/Students%E2%80%99-Sleep-and-Academic-Performance"&gt;Students’ Sleep and Academic Performance&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Carlos A. Manzanares, Economics — &lt;a href="https://github.com/uwescience/incubator/wiki/Airline-Project#final-report"&gt;Simulating Competition in the &lt;span class="caps"&gt;U.S.&lt;/span&gt; Airline Industry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emily Kalah Gade, Political Science — &lt;a href="https://github.com/uwescience/incubator/wiki/dotgov_data"&gt;Analysis of .gov web archive data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Matthew Denes, Finance — &lt;a href="https://github.com/uwescience/incubator/wiki/Innovation-Evidence-from-Patents"&gt;Innovation Evidence from Patents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt;, Oceanography — &lt;a href="https://github.com/uwescience/incubator/wiki/Patterns-in-phytoplankton-diversity"&gt;Analysis of large-scale patterns in phytoplankton diversity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you Andy, Ângela, Carlos, Emily, Matt, and Sophie for a great quarter! Thanks are due as well to Andrew Whitaker and Bill Howe for running Incubator projects, and to Brittany Fiore-Silfvast and Anissa Tanweer for their ethnographic insights!&lt;/p&gt;
&lt;p&gt;Our &lt;em&gt;next incubator offering&lt;/em&gt; will be in &lt;strong&gt;Spring quarter, 2015&lt;/strong&gt;. Look for more information here on the blog, on the Incubator website, and on our mailing lists in &lt;strong&gt;early February&lt;/strong&gt;.&lt;/p&gt;</summary><category term="incubator"></category></entry><entry><title>Incubator 8.3</title><link href="http://blog.halper.in/posts/2014/11/23/incubator-83/" rel="alternate"></link><updated>2014-11-23T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-23:posts/2014/11/23/incubator-83/</id><summary type="html">&lt;p&gt;I spent a lot of time this weekend revisiting our &lt;a href="https://github.com/uwescience/kbmod/issues/3"&gt;new database design for &lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;, and see &lt;a href="posts/2014/11/13/incubator-72/"&gt;last post&lt;/a&gt;. I had a good excuse to finally learn about the spatial database support in PostgreSQL — &lt;a href="http://postgis.net/"&gt;PostGIS&lt;/a&gt;. Through several iterations and redrafts, I sped some of our test queries up by a factor of about 28x (from 21s to 0.7s).&lt;/p&gt;
&lt;p&gt;Here were the key insights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rather than think of each image as a 2-D box (&lt;code&gt;ra&lt;/code&gt; and &lt;code&gt;dec&lt;/code&gt;) with an associated timestamp, think of it as a 3-D box (&lt;code&gt;ra&lt;/code&gt;, &lt;code&gt;dec&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;). This box is still fairly small because each image covers only a few seconds or minutes.&lt;/li&gt;
&lt;li&gt;The image 3-D box lives in a single column in a single table, so there are no on-the-fly joins and there is less data read from disk (probably).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It turns out that PostGIS cannot do a hybrid index-lookup on space and time at the same time. So the 2-D box + time-range version of the query takes two steps — first, intersect each trajectory spatially with all images, then filter out the examples where the timestamps do not sync up.&lt;/p&gt;
&lt;p&gt;By treating the image as a 3-D box (and the trajectory as a line in 3-D space), we are able to do both these phases at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To intersect a line with a box, it suffices to simply check that their bounding boxes overlap. PostGIS is faster if you ask for overlapping bounds rather than run the &lt;code&gt;ST_Intersects&lt;/code&gt; code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think we’re now close enough with the database that we should put the end-to-end pipeline together:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pose a set of trajectories&lt;/li&gt;
&lt;li&gt;use the database to find all the images these trajectories may overlap with&lt;/li&gt;
&lt;li&gt;use the database to group these results by image, so that we have a set of (trajectory, image) pairs ordered by image.&lt;/li&gt;
&lt;li&gt;read each intersected image off disk once, pulling out the relevant pixels for all trajectories as a group.&lt;/li&gt;
&lt;li&gt;co-add the pixels and find new trans-Neptunian objects — aka, Pluto’s buddies!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking forward to our next meeting!&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category></entry><entry><title>Incubator 8.2</title><link href="http://blog.halper.in/posts/2014/11/20/incubator-82/" rel="alternate"></link><updated>2014-11-20T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-20:posts/2014/11/20/incubator-82/</id><summary type="html">&lt;p&gt;In the morning, &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I met with &lt;a href="http://r.halper.in/people/ajc"&gt;Andy Connolly&lt;/a&gt;, who was apparently &lt;em&gt;not&lt;/em&gt; in London at the time, to give him an update on our &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt; progress this quarter. We talked about the database designs, the scaling lessons, the technology tradeoffs, and the potential of our new approach. Importantly, Andy C gave me an awesome &lt;span class="caps"&gt;LSST&lt;/span&gt; mug to which I promptly affixed one of our shiny new eScience Institute stickers!&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSST Mug, eScience Stickers" src="/images/20141120-LSST-mug.jpg" style="width: 768px; height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;In the afternoon, &lt;a href="http://r.halper.in/people/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I picked up where we left off Tuesday and actually ran more queries. We took a break from computation to go over Sophie’s &lt;a href="http://nbviewer.ipython.org/github/uwescience/seaflow-myria/tree/master/ipython_notebooks/"&gt;IPython notebooks&lt;/a&gt; in which she downloads results from Myria queries and visualizes them. Among other things, I guilted her into adding lat/lon lines and showing land/ocean, though I think the “guilt” was really her embarrassment at my ability to tell American Samoa from Hawaii event though I knew Seattle was. The plots are really cool — go &lt;a href="http://nbviewer.ipython.org/github/uwescience/seaflow-myria/blob/d7536d0c49545f00d4b5b650cc5dddce9e692d22/ipython_notebooks/myria_map_N0.ipynb"&gt;look at them&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;We also discussed the usability of Myria. Sophie pointed out, aptly, that we need better documentation and more expressive language features. I pointed in the direction of some string functions she wanted — to turn a &lt;code&gt;year-day&lt;/code&gt; string like &lt;code&gt;"2011_129"&lt;/code&gt; into &lt;code&gt;2011&lt;/code&gt; (year) and &lt;code&gt;129&lt;/code&gt; (Julian day) — which she promptly then &lt;a href="https://github.com/uwescience/myria-web/issues/221"&gt;broke on her first use&lt;/a&gt;. Luckily, I was able to deploy &lt;a href="https://github.com/uwescience/myria-web/pull/222"&gt;a fix&lt;/a&gt; in mere minutes.&lt;/p&gt;
&lt;p&gt;If you build software systems that you want real people to use, get a beta user like Sophie as early as you can. 1) She’s smart, mathy, and computer savvy, so she’s an “easy” case — that is, we want to aim for users with lower credentials. 2) She actually has real questions for which she cares about the answers, as opposed to toy problems that one might normally use. 3) The real uses cases expose all kinds of fun systems, implementation, efficiency, and design issues where building a system that “works for Sophie” ends up looking pretty different than most of the standard stuff out there. Fun, productive, educational, and rewarding!&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="seaflow"></category><category term="kbmod"></category><category term="myria"></category><category term="incubator"></category></entry><entry><title>Incubator 8.1</title><link href="http://blog.halper.in/posts/2014/11/18/incubator-81/" rel="alternate"></link><updated>2014-11-18T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-18:posts/2014/11/18/incubator-81/</id><summary type="html">&lt;p&gt;Today in the &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt;, &lt;a href="http://r.halper.in/people/sclayton"&gt;Sophie Clayton&lt;/a&gt; wrote queries (and I helped a tiny bit) to co-align every cytogram in the SeaFlow cruise in order to compensate for different settings of the SeaFlow instrument itself. The queries should have taken a few minutes to run, but routinely failed due to oversubscription on the cluster. (See &lt;a href="/posts/2014/11/12/public-cluster-private-experiments/"&gt;my prior post&lt;/a&gt; on the matter). Once we got the cluster issues worked out, the query we watched for 90 until it failed took 8 minutes to run; however, our day was not as productive as it could have been…&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="myria"></category><category term="incubator"></category></entry><entry><title>Incubator 7.2</title><link href="http://blog.halper.in/posts/2014/11/13/incubator-72/" rel="alternate"></link><updated>2014-11-13T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-13:posts/2014/11/13/incubator-72/</id><summary type="html">&lt;p&gt;More work with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt;  on the &lt;span class="caps"&gt;KBMOD&lt;/span&gt; database and query design today. We have been running into issues loading all the pixels in the database — O(Millions) of images with O(Millions) of pixels each means 10^12 records, which would take years to load into our Postgres database. A parallel database like Greenplum, or Myria, would speed up the load linearly but this may not help much.&lt;/p&gt;
&lt;p&gt;An alternate tack is to rethink our queries: rather than one record per pixel, one record per image and then a user-defined function to dereference the pixel in an image when needed. We talked about how we might structure the tables and queries to accomplish this design and ended up with a relatively simple workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a &lt;em&gt;trajectory&lt;/em&gt; becomes a list of bounding boxes, one for each run [night] in which we measured the sky. This bounding box roughly corresponds to [(&lt;code&gt;ra0&lt;/code&gt;, &lt;code&gt;dec0&lt;/code&gt;), (&lt;code&gt;ra1&lt;/code&gt;, &lt;code&gt;dec1&lt;/code&gt;)], which are the positions of the &lt;span class="caps"&gt;TNO&lt;/span&gt; at times &lt;code&gt;t0&lt;/code&gt; and &lt;code&gt;t1&lt;/code&gt; corresponding to the beginning and end of the run.&lt;/li&gt;
&lt;li&gt;we intersect the per-run trajectory bounding boxes with the bounding box for each image during that run to determine which images might have overlapped with the trajectory.&lt;/li&gt;
&lt;li&gt;we compute the position of the &lt;span class="caps"&gt;TNO&lt;/span&gt; at the acquisition time of each image to determine whether the &lt;span class="caps"&gt;TNO&lt;/span&gt; was was actually in the image at all and, if so, in which precise pixel it was captured.&lt;/li&gt;
&lt;li&gt;we co-add all the pixels.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My guess is that we end up keeping steps 1 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 2 in the database, but 3 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 4 are performed outside the database in custom code. Since the images themselves represent the majority of the data, we’ll want to read each image into memory at most once while fetching the desired pixels for many trajectories. Obviously we will try many approaches, but my guess is that we will have better control over this performance-critical code outside of the database.&lt;/p&gt;
&lt;p&gt;For more information, see the &lt;span class="caps"&gt;KBMOD&lt;/span&gt; discussion on GitHub: &lt;a href="https://github.com/uwescience/kbmod/issues/3"&gt;https://github.com/uwescience/kbmod/issues/3&lt;/a&gt;&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category></entry><entry><title>Incubator and catching up on Myria</title><link href="http://blog.halper.in/posts/2014/11/11/incubator-and-catching-up-on-myria/" rel="alternate"></link><updated>2014-11-11T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-11:posts/2014/11/11/incubator-and-catching-up-on-myria/</id><summary type="html">&lt;p&gt;Today, &lt;span class="caps"&gt;UW&lt;/span&gt; is closed for the Veteran’s Day holiday; I took the opportunity to continue catching up on several weeks’ email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://depts.washington.edu/hacholab/labdetails.php?id=58"&gt;Ângela Katsuyama&lt;/a&gt; came to the Incubator for a few hours this afternoon. With &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, she continued joining and analyzing her data, attempting to answer questions like “what is the average bed time for each student?” in &lt;a href="https://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Myria, I reviewed a bunch of the great code that &lt;a href="http://r.halper.in/coauth/jwang"&gt;Jingjing Wang&lt;/a&gt; has written and merged some of her new features.&lt;/p&gt;
&lt;p&gt;Finally, I also had the wacky idea (based on a question from Ângela) to add some fancy math operators to the Myria language. Would it not be cool if the following was legal code?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;select * from R where x ≤ 5;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have a working prototype and will bring it to the team soon. At the best, these operators would make the language easier to learn and example programs easier to understand. At the worst, it’s confusing and/or misleading — “How do I type that operator?”. (The answer &lt;code&gt;Option&lt;/code&gt;+&lt;code&gt;,&lt;/code&gt; on a Mac, in this case).&lt;/p&gt;
&lt;p&gt;Oh, also — Bill gave us a tour of the new Data Science Studio space. Looking forward to moving in there as soon as we can!&lt;/p&gt;</summary><category term="ângela"></category><category term="jingjing"></category><category term="incubator"></category><category term="myria"></category></entry><entry><title>Incubator 5.1</title><link href="http://blog.halper.in/posts/2014/10/28/incubator-51/" rel="alternate"></link><updated>2014-10-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-28:posts/2014/10/28/incubator-51/</id><summary type="html">&lt;p&gt;In this incubator this morning, &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; and I worked on the IPython Notebook — Myria pipeline. In particular, we pushed some bug fixes to some &lt;span class="caps"&gt;SSL&lt;/span&gt; bugs (but not all the way) and demonstrated an ability to issue queries in Datalog or MyriaL from Python that get executed on Myria!&lt;/p&gt;
&lt;p&gt;Sophie is now on her own for the next two weeks (I’m out), and hopefully she is armed with the tools to be productive. Andrew and Bill will be able to help her if not.&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="incubator"></category></entry><entry><title>SSL certificates suck; Incubator 3.2 → NYU</title><link href="http://blog.halper.in/posts/2014/10/16/ssl-certificates-suck-incubator-32-nyu/" rel="alternate"></link><updated>2014-10-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-16:posts/2014/10/16/ssl-certificates-suck-incubator-32-nyu/</id><summary type="html">&lt;p&gt;Today was “I-hate-certificates” day. Four different people had ugly issues with &lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; has finished cleaning the underway data in SQLShare and is ready to load it into Myria. However, she had problems using Myria’s Python client because her Mac did not trust Myria’s &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate. (&lt;span class="caps"&gt;UW&lt;/span&gt;’s choice of Certificate Authority (&lt;span class="caps"&gt;CA&lt;/span&gt;), InCommon, has apparently not been blessed by Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X.)&lt;/p&gt;
&lt;p&gt;I should note that Sophie identified and fixed a bug in the Myria Python client, which she &lt;a href="https://github.com/uwescience/myria-python/pull/23"&gt;pushed to us on GitHub&lt;/a&gt;. That type of fluency with others’ code, being confident in your own diagnosis of the bug, and having the ability to push bug fixes back to open source projects is a key goal of this whole endeavor!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brendan Lee has been working with the &lt;a href="http://db.cs.washington.edu/"&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Database Group&lt;/a&gt; on &lt;a href="http://dl.acm.org/citation.cfm?id=2627774"&gt;MyMergerTree&lt;/a&gt;. MyMergerTree is powered by Myria, so after I enabled &lt;span class="caps"&gt;SSL&lt;/span&gt; yesterday, I asked him to fix the web service to use &lt;span class="caps"&gt;HTTPS&lt;/span&gt; instead of &lt;span class="caps"&gt;HTTP&lt;/span&gt; links. Well, great, InCommon has not been blessed by Ubuntu either.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two different people came to Incubator office hours to learn about &lt;code&gt;git&lt;/code&gt;. They brought older laptops with, you guessed it, older versions of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X installed. And, surprise surprise, &lt;a href="https://help.github.com/articles/error-ssl-certificate-problem-verify-that-the-ca-cert-is-ok/"&gt;GitHub’s current &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate&lt;/a&gt; is not blessed by those old versions of Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X, and the only way to fix it is to &lt;em&gt;upgrade the &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/em&gt;. You know, because that’s a &lt;em&gt;totally reasonable&lt;/em&gt; option.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such a waste of time. Why do we make users jump through these hoops? We worked around these issues in a variety of ways, all of which involved disabling certificate verification. Ugh, that’s a fail. (In one case we were able to switch from &lt;span class="caps"&gt;HTTPS&lt;/span&gt; to &lt;span class="caps"&gt;SSH&lt;/span&gt; for GitHub — that, at least, made me moderately less sad at heart.)&lt;/p&gt;
&lt;p&gt;I left at lunch for the airport. I’ll be at &lt;span class="caps"&gt;NYU&lt;/span&gt; in Brooklyn for the next week giving talks, making connections, and generally getting to know better our Moore-Sloan &lt;span class="caps"&gt;DSE&lt;/span&gt; collaborators across the country. I spent the entire flight working on slides for the various talks.&lt;/p&gt;</summary><category term="sophie"></category><category term="incubator"></category></entry><entry><title>Myria security, ethnography</title><link href="http://blog.halper.in/posts/2014/10/15/myria-security-ethnography/" rel="alternate"></link><updated>2014-10-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-15:posts/2014/10/15/myria-security-ethnography/</id><summary type="html">&lt;p&gt;The newest Chrome update broke parts of &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; because of new policies regarding security (&lt;span class="caps"&gt;HTTPS&lt;/span&gt;) in web &lt;span class="caps"&gt;API&lt;/span&gt; calls. So, I finally did the 5 hours of work it would take to make Myria’s &lt;span class="caps"&gt;API&lt;/span&gt; server support &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, installed the certificate, and made all our deployment scripts. Now our users’ data (which is all publicly logged anyway) is much “safer” and, more importantly, the website works again.&lt;/p&gt;
&lt;p&gt;I sat down with the ethnographers who are observing the &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; — &lt;a href="http://fioresilfvast.org/"&gt;Brittany Fiore-Silvast&lt;/a&gt; and Anissa Tanweer — to chat about the parts of the Incubator process that happened before we looped them in. We discussed the internal planning, what happened in Spring and what we wanted to change, the applicant pool, the review process, and more. It was a fun chat and merely having the chat, plus their insightful questions, made me reflect more on the process and take a step back. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; and I met with &lt;a href="http://r.halper.in/coauth/shrainik"&gt;Shrainik Jain&lt;/a&gt; and &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik Moritz&lt;/a&gt; to discuss our project quantifying how much “variety” there is in different data systems and progress on the draft paper they have been writing. The basic idea is that we have an intuitive notion of “well-structured” databases (like the &lt;span class="caps"&gt;TPC&lt;/span&gt; benchmarks), and databases with “high variety” (like SQLShare), and we ought to be able to quantitatively find differences between them. &lt;span class="caps"&gt;SDSS&lt;/span&gt; should be a nice mid-point: it has many users asking potentially different questions, but their queries are limited to a well-defined, highly structured schema provided by the Skyserver team. Initial results are promising, and we are starting to put together a draft.&lt;/p&gt;</summary><category term="britta"></category><category term="anissa"></category><category term="dominik"></category><category term="shrainik"></category><category term="bill"></category><category term="myria"></category><category term="incubator"></category><category term="variety"></category><category term="ethnography"></category></entry><entry><title>Incubator week 3.1</title><link href="http://blog.halper.in/posts/2014/10/14/incubator-week-31/" rel="alternate"></link><updated>2014-10-14T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-14:posts/2014/10/14/incubator-week-31/</id><summary type="html">&lt;p&gt;Today was day 1 of &lt;a href="http://data.uw.edu/incubator"&gt;Incubator&lt;/a&gt; week 3.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; exposed a locking issue in &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;: if a running query reads from table &lt;code&gt;T&lt;/code&gt; and a user changes the sharing on table &lt;code&gt;T&lt;/code&gt;, SQLShare basically locks the entire system until the query finishes. We need to revisit this issue, but it is unlikely to be a common problem: today was literally the first time it has ever cropped up. We also discussed a variety of &lt;span class="caps"&gt;SQL&lt;/span&gt;-isms such as how to convert a Julian Day into a &lt;code&gt;Date&lt;/code&gt; and the like. Sophie is now really off to the races with the underway data.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; and I played with various methods of inspecting on the progress and performance of his loading data into PostgreSQL. We went down a bit of a rabbit-hole when trying to figure out why it was not using the index to compute the number of distinct fields in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;explain&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;distinct&lt;/span&gt; &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
&lt;span class="c1"&gt;---------------------------------------------------------------------------------&lt;/span&gt;
 &lt;span class="k"&gt;Aggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;HashAggregate&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;19138399&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;17631684&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;602685952&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;729&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;


&lt;span class="n"&gt;kbmod&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                   &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="ss"&gt;"public.pixels"&lt;/span&gt;
 &lt;span class="k"&gt;Column&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="k"&gt;Type&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Modifiers&lt;/span&gt;
&lt;span class="c1"&gt;---------+----------------------+----------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;pixelid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pixels_pixelid_seq'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;regclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;fieldid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
 &lt;span class="n"&gt;ra&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;decl&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="k"&gt;precision&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;fval&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;radec&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3786&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;mask&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="n"&gt;Indexes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_pkey"&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixelid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ss"&gt;"fieldidx"&lt;/span&gt; &lt;span class="n"&gt;btree&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Foreign&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="ss"&gt;"pixels_fieldid_fkey"&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As it turns out, PostgreSQL’s &lt;code&gt;DISTINCT&lt;/code&gt; implementation simply cannot do the right thing.&lt;/p&gt;
&lt;p&gt;I also set up the &lt;a href="http://uwdatascienceincubator.wordpress.com/"&gt;Incubator Blog&lt;/a&gt; today: it combines posts from all of the incubator participants. Setting up this blog was really cool — I used &lt;a href="https://ifttt.com/"&gt;If This, Then That (&lt;span class="caps"&gt;IFTTT&lt;/span&gt;)&lt;/a&gt; to automatically crawl the feeds from the individual blogs and post them on a shared Wordpress! (Thanks to our friends at &lt;span class="caps"&gt;UC&lt;/span&gt; Berkeley for recommending &lt;span class="caps"&gt;IFTTT&lt;/span&gt; via the new Slack communication channel we’ve all been using.)&lt;/p&gt;</summary><category term="becker"></category><category term="sophie"></category><category term="incubator"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category></entry><entry><title>Data and databases</title><link href="http://blog.halper.in/posts/2014/10/13/data-and-databases/" rel="alternate"></link><updated>2014-10-13T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-13:posts/2014/10/13/data-and-databases/</id><summary type="html">&lt;p&gt;Over the weekend, both &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; worked independently on their &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; projects; I spent some time then and today answering emails :).&lt;/p&gt;
&lt;p&gt;Sophie has been loading underway data (&lt;span class="caps"&gt;GPS&lt;/span&gt;, temperature, salinity, etc. from ships in motion) into &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; for cleaning. Every research vessel is its own special flower that represents dates and times in different ways, and we want to bring them all into a normalized format. We will then load the normalized data into Myria and join it with the SeaFlow data in her analyses. 
&lt;small&gt;(For now, the Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Server system underpinning SQLShare is better for messy data than Myria itself, because &lt;span class="caps"&gt;SQL&lt;/span&gt; Server handles more data types and corner cases than we do. This will change!)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We made Sophia’s queries run &lt;em&gt;dramatically&lt;/em&gt; faster by materializing SQLShare datasets once all the fields were in the right types. Turns out, recomputing &lt;code&gt;datetime&lt;/code&gt; objects can be really slow when you want to do interval joins on them! We also discussed how to find bad rows in datasets, e.g., if you’re getting errors casting values to &lt;code&gt;float&lt;/code&gt;, you need to know about &lt;code&gt;WHERE ISNUMERIC(x) &amp;lt;&amp;gt; 1&lt;/code&gt; so you can find the bad values of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Andy has been experiencing the joys of loading data into databases with indexes, foreign keys, auto commit, checkpointing, and all that. After some iteration, we figured out to check the Postgres logs and found that his remote &lt;code&gt;COPY&lt;/code&gt; commands were running out of memory.  Chunking the data made it finish.&lt;/p&gt;
&lt;p&gt;I finally got &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria’s web interface&lt;/a&gt; to correctly push queries into the Postgres without weird Google App Engine issues, fixed all the Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; tests, and deployed it.&lt;/p&gt;</summary><category term="sophie"></category><category term="becker"></category><category term="incubator"></category><category term="reading"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category><category term="raco"></category><category term="myria"></category></entry><entry><title>Data Science Incubator, Week 2</title><link href="http://blog.halper.in/posts/2014/10/09/data-science-incubator-week-2/" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:posts/2014/10/09/data-science-incubator-week-2/</id><summary type="html">&lt;p&gt;I spent today in the Data Science Incubator working with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt; on &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;. We are trying to port the key components of the moving object detection into PostgreSQL using PostGIS.&lt;/p&gt;
&lt;p&gt;On his own, Andy designed a schema for the various data, including spatial columns and indexes. Side by side, we worked on a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speeding up data load: &lt;code&gt;\COPY&lt;/code&gt; is much faster than large batch insert statements, as we know.&lt;/li&gt;
&lt;li&gt;Explaining queries and seeing whether indexes are used: not yet, but the database is small so sequential scans might actually make more sense. Also, it looks like the optimizer may miss some tricks in some cases.&lt;/li&gt;
&lt;li&gt;Cloud-ification: we set up an Amazon &lt;span class="caps"&gt;RDS&lt;/span&gt; PostgreSQL+PostGIS database, and proved that we could load data in, even large data.&lt;/li&gt;
&lt;li&gt;Astro UDFs: for the kinds of spatial queries that we need, there are great C++ libraries that do all the work; we need access to those UDFs in the database! We &lt;a href="https://github.com/uwescience/kbmod/issues/1"&gt;began investigating&lt;/a&gt; PostgreSQL support for UDFs as compiled C binaries; this should be doable, but we may need to fiddle to make the C++ code play nice with PostgreSQL, which expects C…&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDFs may be a show-stopper for using &lt;span class="caps"&gt;RDS&lt;/span&gt;, however — you cannot register binary UDFs there, so we will likely have to kill the &lt;span class="caps"&gt;RDS&lt;/span&gt; instance and setup a manually managed &lt;span class="caps"&gt;EC2&lt;/span&gt;+PostgreSQL instance instead.&lt;/p&gt;
&lt;p&gt;Aside: Automatically-managed cloud services are &lt;em&gt;very&lt;/em&gt; appealing, but little implementation issues like this always seem to bite us. Similar limitations apply to Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Azure [no stored procedures], and Google App Engine [no CPython]—-our needs always push us into the “Sorry, you have to do &lt;em&gt;everything&lt;/em&gt; manually now” use case, or make us dramatically restrict the performance and capabilities of our applications. Surely this issue crops up for other users!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For next week, some preliminary goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move from &lt;span class="caps"&gt;RDS&lt;/span&gt; to &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get a bigger dataset into the database, so we are in a real optimization framework&lt;/li&gt;
&lt;li&gt;get the &lt;span class="caps"&gt;UDF&lt;/span&gt; into the database&lt;/li&gt;
&lt;li&gt;work on expressing the queries and testing correctness&lt;/li&gt;
&lt;li&gt;optimize the indexes and queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also chatted with &lt;a href="http://homes.cs.washington.edu/~bholt/"&gt;Brandon Holt&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt;, and Simon Kahan about possible &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt;—&lt;span class="caps"&gt;KBMOD&lt;/span&gt; connections.&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category><category term="brandon"></category><category term="grappa"></category></entry><entry><title>2014-09-24 daily</title><link href="http://blog.halper.in/posts/2014/09/24/2014-09-24-daily/" rel="alternate"></link><updated>2014-09-24T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-24:posts/2014/09/24/2014-09-24-daily/</id><summary type="html">&lt;p&gt;We made final decisions about the proposed Incubator projects today. We ended up with 6 exciting projects we accepted, and 20 more we wish we could have said yes to. If your proposal was not accepted, or you want to get in touch with us some other way, note that we will be starting office hours every Thursday 9—11 in the Data Science Studio space beginning next week. (We will use Sieg 326 for the first month until construction is done).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I held a “pre-incubator” (hers was one of the chosen proposals) hack session in the afternoon, during which we wrote five or six queries to help us determine how to best co-align cytograms from different cruises and analyze the intersecting area for her research cellular diversity. It should be a fun project to continue working on this quarter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~shrainik/"&gt;Shrainik Jain&lt;/a&gt; is back from Microsoft Research (where neither he nor his team was recently fired), and we chatted about his summer project and his upcoming quals project on identifying and quantifying the “high-variety” (the most important V, from my opinion) aspect of “big data”.&lt;/p&gt;</summary><category term="sophie"></category><category term="shrainik"></category><category term="incubator"></category><category term="myria"></category><category term="seaflow"></category></entry><entry><title>2014-09-22 daily</title><link href="http://blog.halper.in/posts/2014/09/22/2014-09-22-daily/" rel="alternate"></link><updated>2014-09-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-22:posts/2014/09/22/2014-09-22-daily/</id><summary type="html">&lt;p&gt;The majority activity today was reviewing the proposals we received for the Fall 2014 edition of our &lt;a href="http://data.uw.edu/incubator/"&gt;Data Science Incubator&lt;/a&gt;. We received &lt;strong&gt;26&lt;/strong&gt; fantastic proposals ranging from Astronomy to Statistics (&lt;em&gt;sadly, no Zoology&lt;/em&gt;), and we are probably going to have to cut it down to 5 or 6. Lots of great stuff in there, so much so that we are talking about other ways to figure out how to support the projects.&lt;/p&gt;
&lt;p&gt;The rest of the day was filled with student meetings. &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt; is back from Google and will be finishing up his quals on clustering SeaFlow data. &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; is finishing up his paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to generate fast, efficient &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; programs from MyriaL code.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="brandon"></category><category term="jeremy"></category></entry><entry><title>2014-09-16 daily</title><link href="http://blog.halper.in/posts/2014/09/16/2014-09-16-daily/" rel="alternate"></link><updated>2014-09-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-16:posts/2014/09/16/2014-09-16-daily/</id><summary type="html">&lt;p&gt;I also did not get much time to do real work today. There were three major activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator applications are due Thursday! They have started rolling in, so I have started looking at them and have started a few clarifying discussions with some of the authors. Getting excited for this second incarnation!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill and Andrew and I met to discuss how to make the production Myria demo more stable. Some of the basic things like query queues are becoming important now that we have more users. I’ll work on that in the next few days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I pushed the least common ancestor query a bit farther by fixing a fairly &lt;a href="https://github.com/uwescience/myria/pull/619"&gt;major Myria bug&lt;/a&gt; — though, note that this was a performance bug and not a correctness bug :). Basically, we were sending a lot of data over the network when there was no need to do so. Fixing it sped up queries by a factor of 4—5, increased scaling dramatically, and dramatically reduced the variation in query time.&lt;/p&gt;
&lt;p&gt;At this point, I think I am finally done with the lineage query until I get to meet with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;. More later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="incubator"></category><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-08 daily</title><link href="http://blog.halper.in/posts/2014/09/08/2014-09-08-daily/" rel="alternate"></link><updated>2014-09-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-08:posts/2014/09/08/2014-09-08-daily/</id><summary type="html">&lt;p&gt;Today we held the information session for the second installation of our Data Science Incubator projects which we will hold in the Spring. It was fairly well attended; maybe 20—25 people came and many of these indicated that they will be submitting proposals.&lt;/p&gt;
&lt;p&gt;Over the weekend and today I pushed several new optimizations to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; relating to opportunities identified by my work with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; last week.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="myria"></category><category term="sophie"></category></entry><entry><title>2014-08-27 daily</title><link href="http://blog.halper.in/posts/2014/08/27/2014-08-27-daily/" rel="alternate"></link><updated>2014-08-27T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-27:posts/2014/08/27/2014-08-27-daily/</id><summary type="html">&lt;p&gt;I began the day with a Skype call with &lt;a href="http://www.user.tu-berlin.de/asteriosk/"&gt;Asterios&lt;/a&gt; and &lt;a href="https://www.dima.tu-berlin.de/menue/staff/stephan_ewen/"&gt;Stephan&lt;/a&gt; from the Flink team. I learned some more things about how to use and test the code I write for Flink, and several places where I did not quite understand the low-level Flink behavior. I have a long list of fixes and todos, but the code generator is looking pretty good! Check out the code below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/7andrew7"&gt;Andrew&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/jakevdp"&gt;Jake&lt;/a&gt;, &lt;a href="https://sites.google.com/site/josephlhellerstein/"&gt;Joe&lt;/a&gt; and I met met to discuss the Fall edition of the Data Science Incubator. We are really excited to run the program again, and we’re hoping it will be productive and fun! &lt;/p&gt;
&lt;p&gt;For more information about the &lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator: &lt;a href="http://data.uw.edu/incubator/"&gt;http://data.uw.edu/incubator/&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;My &lt;a href="https://github.com/uwescience/raco/blob/d0ea4720271756be9cbf8ecbab4515cab0d17f09/raco/language/flink/test_flink.py#L142"&gt;Raco → Flink code generator&lt;/a&gt; automatically produced the following Flink-0.6 Java program from the 8-line MyriaL program embedded in the source below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.common.functions.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.aggregation.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.tuple.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Original query:&lt;/span&gt;
&lt;span class="c1"&gt;//   emp = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   emp1 = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   j = [from emp, emp1&lt;/span&gt;
&lt;span class="c1"&gt;//        where (emp1.$2 = "Magdalena Balazinska"&lt;/span&gt;
&lt;span class="c1"&gt;//               or emp1.salary &amp;lt; 25000)&lt;/span&gt;
&lt;span class="c1"&gt;//          and emp1.$0 = emp.$0&lt;/span&gt;
&lt;span class="c1"&gt;//        emit emp1.*];&lt;/span&gt;
&lt;span class="c1"&gt;//   store(j, OUTPUT);&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FlinkQuery&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Apply(id=$0)[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="c1"&gt;// skipped -- already computed&lt;/span&gt;

    &lt;span class="c1"&gt;// Select((($2 = "Magdalena Balazinska") or (salary &amp;lt; 25000)))[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Select1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FilterFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Magdalena Balazinska"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25000L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(($2 = \"Magdalena Balazinska\") or (salary &amp;lt; 25000))"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// ProjectingJoin(($1 = $0); $1, $2, $3, $4)[Apply1,Select1]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joinWithHuge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Select1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;projectSecond&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Store(public:adhoc:OUTPUT)[ProjectingJoin1]&lt;/span&gt;
    &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeAsCsv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file:///tmp/flink/OUTPUT"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyriaL query"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readCsvFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file:///tmp/flink/employee"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="flink"></category><category term="incubator"></category><category term="asterios"></category><category term="stephan"></category><category term="andrew"></category><category term="bill"></category><category term="jake"></category><category term="joe"></category></entry></feed>