<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dan's research blog</title><link>http://blog.halper.in/</link><description></description><atom:link href="http://blog.halper.in/feeds/daniel-halperin.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 27 Aug 2014 00:00:00 -0700</lastBuildDate><item><title>2014-08-27 daily</title><link>http://blog.halper.in/2014-08-27-daily.html</link><description>&lt;p&gt;I began the day with a Skype call with &lt;a href="http://www.user.tu-berlin.de/asteriosk/"&gt;Asterios&lt;/a&gt; and &lt;a href="https://www.dima.tu-berlin.de/menue/staff/stephan_ewen/"&gt;Stephan&lt;/a&gt; from the Flink team. I learned some more things about how to use and test the code I write for Flink, and several places where I did not quite understand the low-level Flink behavior. I have a long list of fixes and todos, but the code generator is looking pretty good! Check out the code below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/7andrew7"&gt;Andrew&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/jakevdp"&gt;Jake&lt;/a&gt;, &lt;a href="https://sites.google.com/site/josephlhellerstein/"&gt;Joe&lt;/a&gt; and I met met to discuss the Fall edition of the Data Science Incubator. We are really excited to run the program again, and we're hoping it will be productive and fun! &lt;/p&gt;
&lt;p&gt;For more information about the UW Data Science Incubator: &lt;a href="http://data.uw.edu/incubator/"&gt;http://data.uw.edu/incubator/&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My &lt;a href="https://github.com/uwescience/raco/blob/d0ea4720271756be9cbf8ecbab4515cab0d17f09/raco/language/flink/test_flink.py#L142"&gt;Raco â†’ Flink code generator&lt;/a&gt; automatically produced the following Flink-0.6 Java program from the 8-line MyriaL program embedded in the source below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.common.functions.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.aggregation.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.flink.api.java.tuple.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Original query:&lt;/span&gt;
&lt;span class="c1"&gt;//   emp = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   emp1 = scan(public:adhoc:employee);&lt;/span&gt;
&lt;span class="c1"&gt;//   j = [from emp, emp1&lt;/span&gt;
&lt;span class="c1"&gt;//        where (emp1.$2 = &amp;quot;Magdalena Balazinska&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;//               or emp1.salary &amp;lt; 25000)&lt;/span&gt;
&lt;span class="c1"&gt;//          and emp1.$0 = emp.$0&lt;/span&gt;
&lt;span class="c1"&gt;//        emit emp1.*];&lt;/span&gt;
&lt;span class="c1"&gt;//   store(j, OUTPUT);&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FlinkQuery&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Apply(id=$0)[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Scan(public:adhoc:employee)&lt;/span&gt;
    &lt;span class="c1"&gt;// skipped -- already computed&lt;/span&gt;

    &lt;span class="c1"&gt;// Select((($2 = &amp;quot;Magdalena Balazinska&amp;quot;) or (salary &amp;lt; 25000)))[employee]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Select1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FilterFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Magdalena Balazinska&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;f3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25000L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(($2 = \&amp;quot;Magdalena Balazinska\&amp;quot;) or (salary &amp;lt; 25000))&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// ProjectingJoin(($1 = $0); $1, $2, $3, $4)[Apply1,Select1]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Apply1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joinWithHuge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Select1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;equalTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;projectSecond&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Apply(id=id,dept_id=dept_id,name=name,salary=salary)[ProjectingJoin1]&lt;/span&gt;
    &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Apply2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProjectingJoin1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Store(public:adhoc:OUTPUT)[Apply2]&lt;/span&gt;
    &lt;span class="n"&gt;Apply2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeAsCsv&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file:///tmp/flink/OUTPUT&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyriaL query&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;DataSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tuple4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;load_employee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExecutionEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readCsvFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file:///tmp/flink/employee&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-27:2014-08-27-daily.html</guid><category>flink</category><category>incubator</category><category>asterios</category><category>stephan</category><category>andrew</category><category>bill</category><category>jake</category><category>joe</category></item><item><title>2014-08-26 daily</title><link>http://blog.halper.in/2014-08-26-daily.html</link><description>&lt;p&gt;One of the goals for our &lt;a href="http://github.com/uwescience/raco"&gt;Relational Algebra COmpiler (Raco)&lt;/a&gt; is that it should be a "relational algebra middleware" for many big data system backends. At the moment, we support: Myria (Myria Team) and Grappa (Brandon Myers), plus anything that speaks SQL including SQL Server but also Hive or Shark. Expanding this set will make the middleware vision real.&lt;/p&gt;
&lt;p&gt;I spent today hacking on the Raco â†’ &lt;a href="http://flink.incubator.apache.org/"&gt;Flink&lt;/a&gt; pipeline. As of tonight, &lt;a href="https://github.com/uwescience/raco/tree/flink"&gt;I can produce Flink Java programs&lt;/a&gt; from MyriaL programs for a fairly fleshed-out SPJA subset of the language. I'm hoping that this experiment will&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;help us make Raco a better middleware for big data systems. (stay tuned!)&lt;/li&gt;
&lt;li&gt;lower the barrier to entry to using Flink (do you REALLY want to write Java code &lt;a href="https://github.com/apache/incubator-flink/blob/ce3ed7e0b769ab3ddc9a96666028ef45f6b01b6d/flink-examples/flink-java-examples/src/main/java/org/apache/flink/example/java/relational/RelationalQuery.java"&gt;like this&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;make it significantly easier to compare big data systems head-to-head.  (stay tuned!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Want to try exporting code for your favorite system from Raco/MyriaL? &lt;a href="mailto:raco@cs.washington.edu"&gt;Let us know!&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Tue, 26 Aug 2014 23:07:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-26:2014-08-26-daily.html</guid><category>myria</category><category>flink</category></item><item><title>2014-08-25 daily</title><link>http://blog.halper.in/2014-08-25-daily.html</link><description>&lt;p&gt;Another fantastic hack session with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie&lt;/a&gt; today. We analyzed the quality and quantity of data in the existing files, including determining which of the 64K SeaFlow samples are within a reasonable amount (say, 1Ïƒ) of the "average" SeaFlow sample according to the calibration beads. Surprisingly/hearteningly, the vast majority of the data is good! This bodes well for Sophie's deeper analyses.&lt;/p&gt;
&lt;p&gt;More hacking Myria and code review. Mostly, fixing and improving things we identified with  last week.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Mon, 25 Aug 2014 00:00:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-25:2014-08-25-daily.html</guid><category>seaflow</category><category>sophie</category><category>myria</category></item><item><title>2014-08-22 daily</title><link>http://blog.halper.in/2014-08-22-daily.html</link><description>&lt;p&gt;Started the day with a fantastic meeting with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. Sophie is trying to analyze the entire SeaFlow corpus in &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;. Today: she wrote queries to analyze ~64K files at once in MyriaL, which she is logging on &lt;a href="https://github.com/uwescience/seaflow-myria/wiki"&gt;a GitHub wiki&lt;/a&gt;. We ran into some memory pressure joining two 1.7B-rows (# particles measured by SeaFlow) datasets, but were able to work around it. The remaining queries were on the order of the # sample files and all finished with no problems in under 2 minutes.&lt;/p&gt;
&lt;p&gt;The other great part about working with Sophie is what I learn by seeing a real scientist who is extremely competent, but not a database expert, use the system. I generated at least &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-08-22#contribution-activity"&gt;7 new issues&lt;/a&gt; related to making Myria more usable. I spent my productive time in the rest of the day working on these issues.&lt;/p&gt;
&lt;p&gt;More code review for Myria.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Fri, 22 Aug 2014 00:00:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-22:2014-08-22-daily.html</guid><category>seaflow</category><category>sophie</category><category>myria</category></item><item><title>2014-08-21 daily</title><link>http://blog.halper.in/2014-08-21-daily.html</link><description>&lt;p&gt;Today we met with UW-IT to talk about the future of &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;. We will be starting some sprints in the fall to prepare it to be transitioned to them as an on-campus service.&lt;/p&gt;
&lt;p&gt;Spent a fair bit of time reading and discussing &lt;a href="http://homes.cs.washington.edu/~bdmyers/"&gt;Brandon Myers'&lt;/a&gt; paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to compile high-level MyriaL programs to low-level, blazingly fast programs for the UW Architecture Group's &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; distributed system. The initial results look &lt;em&gt;really&lt;/em&gt; good.&lt;/p&gt;
&lt;p&gt;Otherwise, some code review for Myria and other miscellaneous chats about the future.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Thu, 21 Aug 2014 00:00:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-21:2014-08-21-daily.html</guid><category>sqlshare</category><category>brandon</category><category>raco</category><category>grappa</category></item><item><title>2014-08-20 daily</title><link>http://blog.halper.in/2014-08-20-daily.html</link><description>&lt;p&gt;Today I hacked more on the blog organization and layout; fighting with GitHub CNAMEs was harder than I expected it to be. Eventually I settled on creating a sub-project for the blog as hosting it in my personal &lt;code&gt;dhalperi/dhalperi.github.io&lt;/code&gt; repository affected the URLs for other projects like the &lt;a href="http://dhalperi.github.io/linux-80211n-csitool"&gt;CSI Tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Met with &lt;a href="http://www.jevinwest.org/"&gt;Jevin West&lt;/a&gt; and Sandra Anderson to talk about Sandra's work on analyzing citation networks with &lt;a href="https://demo.myria.cs.washington.edu/queries?max=23223&amp;amp;limit=1"&gt;Myria&lt;/a&gt;. Sandra is a rising sophomore at Cornell, of undecided major but spectacular in both CS and Math. She started 7 weeks ago with no prior experience "thinking like a database", and in that time she has contributed lots of interesting ideas, independently re-derived much of the existing database wisdom about how to efficiently solve problems like transitive closure, and written some of the most complicated, iterative MyriaL programs to date. There will be a follow-up post on Sandra's work!&lt;/p&gt;
&lt;p&gt;More eScience steering committee action. We had our third session with the short-term evaluation team, which seems to be going great. So far, &lt;a href="http://data2insight.com/about/#the_page"&gt;Veronica&lt;/a&gt; has managed to coerce 20+ fiercely independent minds to work together on the steps in our five-year vision for the project and to establish key evaluations. I need to learn more about the process and goals of evaluation---I'm having a hard time following along/understanding why we're doing what we're doing, but I can see amazing outputs from this process already!&lt;/p&gt;
&lt;p&gt;Some SQLShare planning and support. Seems like we're getting closer to needing/merging the rewrite of the Python client I started a year ago.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Wed, 20 Aug 2014 00:00:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-20:2014-08-20-daily.html</guid><category>jevin</category><category>sandra</category><category>steering</category><category>interns</category></item><item><title>First post</title><link>http://blog.halper.in/first-post.html</link><description>&lt;p&gt;I want to start a research blog. I stole &lt;a href="http://jakevdp.github.io/"&gt;Jake's Pythonic Perambulations&lt;/a&gt; basic idea and a little bit of &lt;a href="https://github.com/jakevdp/PythonicPerambulations"&gt;code&lt;/a&gt; to get started, and I intend to micro-blog here in the &lt;a href="http://hoggresearch.blogspot.com/"&gt;Hogg style&lt;/a&gt;. We'll see how it goes.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Halperin</dc:creator><pubDate>Tue, 19 Aug 2014 09:18:00 -0700</pubDate><guid>tag:blog.halper.in,2014-08-19:first-post.html</guid><category>jake</category><category>hogg</category></item></channel></rss>