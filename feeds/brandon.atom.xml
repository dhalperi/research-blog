<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/brandon.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-10-09T00:00:00-07:00</updated><entry><title>Data Science Incubator, Week 2</title><link href="http://blog.halper.in/posts/2014/10/09/data-science-incubator-week-2/" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:posts/2014/10/09/data-science-incubator-week-2/</id><summary type="html">&lt;p&gt;I spent today in the Data Science Incubator working with &lt;a href="http://www.astro.washington.edu/users/becker/"&gt;Andy Becker&lt;/a&gt; on &lt;a href="https://github.com/uwescience/kbmod"&gt;&lt;span class="caps"&gt;KBMOD&lt;/span&gt;&lt;/a&gt;. We are trying to port the key components of the moving object detection into PostgreSQL using PostGIS.&lt;/p&gt;
&lt;p&gt;On his own, Andy designed a schema for the various data, including spatial columns and indexes. Side by side, we worked on a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speeding up data load: &lt;code&gt;\COPY&lt;/code&gt; is much faster than large batch insert statements, as we know.&lt;/li&gt;
&lt;li&gt;Explaining queries and seeing whether indexes are used: not yet, but the database is small so sequential scans might actually make more sense. Also, it looks like the optimizer may miss some tricks in some cases.&lt;/li&gt;
&lt;li&gt;Cloud-ification: we set up an Amazon &lt;span class="caps"&gt;RDS&lt;/span&gt; PostgreSQL+PostGIS database, and proved that we could load data in, even large data.&lt;/li&gt;
&lt;li&gt;Astro UDFs: for the kinds of spatial queries that we need, there are great C++ libraries that do all the work; we need access to those UDFs in the database! We &lt;a href="https://github.com/uwescience/kbmod/issues/1"&gt;began investigating&lt;/a&gt; PostgreSQL support for UDFs as compiled C binaries; this should be doable, but we may need to fiddle to make the C++ code play nice with PostgreSQL, which expects C…&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDFs may be a show-stopper for using &lt;span class="caps"&gt;RDS&lt;/span&gt;, however — you cannot register binary UDFs there, so we will likely have to kill the &lt;span class="caps"&gt;RDS&lt;/span&gt; instance and setup a manually managed &lt;span class="caps"&gt;EC2&lt;/span&gt;+PostgreSQL instance instead.&lt;/p&gt;
&lt;p&gt;Aside: Automatically-managed cloud services are &lt;em&gt;very&lt;/em&gt; appealing, but little implementation issues like this always seem to bite us. Similar limitations apply to Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Azure [no stored procedures], and Google App Engine [no CPython]—-our needs always push us into the “Sorry, you have to do &lt;em&gt;everything&lt;/em&gt; manually now” use case, or make us dramatically restrict the performance and capabilities of our applications. Surely this issue crops up for other users!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For next week, some preliminary goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;move from &lt;span class="caps"&gt;RDS&lt;/span&gt; to &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;get a bigger dataset into the database, so we are in a real optimization framework&lt;/li&gt;
&lt;li&gt;get the &lt;span class="caps"&gt;UDF&lt;/span&gt; into the database&lt;/li&gt;
&lt;li&gt;work on expressing the queries and testing correctness&lt;/li&gt;
&lt;li&gt;optimize the indexes and queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also chatted with &lt;a href="http://homes.cs.washington.edu/~bholt/"&gt;Brandon Holt&lt;/a&gt;, &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt;, and Simon Kahan about possible &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt;—&lt;span class="caps"&gt;KBMOD&lt;/span&gt; connections.&lt;/p&gt;</summary><category term="becker"></category><category term="kbmod"></category><category term="incubator"></category><category term="brandon"></category><category term="grappa"></category></entry><entry><title>2014-09-22 daily</title><link href="http://blog.halper.in/posts/2014/09/22/2014-09-22-daily/" rel="alternate"></link><updated>2014-09-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-22:posts/2014/09/22/2014-09-22-daily/</id><summary type="html">&lt;p&gt;The majority activity today was reviewing the proposals we received for the Fall 2014 edition of our &lt;a href="http://data.uw.edu/incubator/"&gt;Data Science Incubator&lt;/a&gt;. We received &lt;strong&gt;26&lt;/strong&gt; fantastic proposals ranging from Astronomy to Statistics (&lt;em&gt;sadly, no Zoology&lt;/em&gt;), and we are probably going to have to cut it down to 5 or 6. Lots of great stuff in there, so much so that we are talking about other ways to figure out how to support the projects.&lt;/p&gt;
&lt;p&gt;The rest of the day was filled with student meetings. &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt; is back from Google and will be finishing up his quals on clustering SeaFlow data. &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; is finishing up his paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to generate fast, efficient &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; programs from MyriaL code.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="brandon"></category><category term="jeremy"></category></entry><entry><title>2014-09-12 daily</title><link href="http://blog.halper.in/posts/2014/09/12/2014-09-12-daily/" rel="alternate"></link><updated>2014-09-12T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-12:posts/2014/09/12/2014-09-12-daily/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a great Myria meeting this afternoon. We discussed &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt;‘s user-defined aggregate (&lt;span class="caps"&gt;UDA&lt;/span&gt;) extensions to MyriaL, which provide a very nice way to get scalable, distributed partial aggregation to implement many complicated aggregations in a single scan rather than through joins. The poster child is &lt;a href="https://github.com/uwescience/raco/pull/336#diff-bfec5b84bb73fdca4c61627f00d1e6dcR1908"&gt;&lt;code&gt;arg_max&lt;/code&gt;&lt;/a&gt;: return the entire row where the value of some field is maximized. &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; has proposed a nice syntax that might help simplify the expression of &lt;code&gt;arg_max&lt;/code&gt;-like UDAs.&lt;/p&gt;
&lt;p&gt;I presented Sandra’s least-common ancestor query to the group, and we discussed optimizations. At the meeting, &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt;, Bill, and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; insisted this should work better if rewritten in incremental form, and Brandon helped me rewrite it afterwards. Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;</summary><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="jevin"></category><category term="magda"></category><category term="sandra"></category></entry><entry><title>2014-09-04 daily</title><link href="http://blog.halper.in/posts/2014/09/04/2014-09-04-daily/" rel="alternate"></link><updated>2014-09-04T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-04:posts/2014/09/04/2014-09-04-daily/</id><summary type="html">&lt;p&gt;Today I met with &lt;span class="caps"&gt;UW&lt;/span&gt; &lt;span class="caps"&gt;CSE&lt;/span&gt; undergrad York Wei and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; for demos and code review of York’s summer Project. York and Brandon have adapted our &lt;a href="http://github.com/uwescience/myria-web"&gt;Myria Web frontend&lt;/a&gt; to extend the current support for &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; with the ability to issue queries to two new backends:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated C code for fast, in-memory queries on a single machine, and&lt;/li&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated code on the &lt;a href="http://grappa.io/"&gt;Grappa runtime&lt;/a&gt;, which uses the partitioned, global address space model to execute blazingly-fast queries in memory on a large, distributed cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout the course of the meeting we discussed general issues and refactoring for Myria-Web so that it will truly be backend-agnostic and we can deploy this awesome, multi-system functionality on the web. I look forward to using this software for Flink support!&lt;/p&gt;
&lt;p&gt;The other exciting news is that &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt; finished the Raco support for user-defined aggregates and functions. We now have the support that Sandra Anderson needs to issue fast queries over citation graphs!&lt;/p&gt;</summary><category term="andrew"></category><category term="brandon"></category><category term="sandra"></category><category term="york"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-08-28 daily</title><link href="http://blog.halper.in/posts/2014/08/28/2014-08-28-daily/" rel="alternate"></link><updated>2014-08-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-28:posts/2014/08/28/2014-08-28-daily/</id><summary type="html">&lt;p&gt;We had our monthly &lt;a href="http://armbrustlab.ocean.washington.edu/resources/seaflow/"&gt;SeaFlow&lt;/a&gt;/eScience group meeting meeting. For this grant the oceanographers have been doing lots of new science using tools like &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;, &lt;a href="http://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/popcycle"&gt;popcycle&lt;/a&gt;, our software for storing indexing and analyzing SeaFlow data. We discussed needed improvements to popcycle and to the &lt;a href="https://github.com/uwescience/seaflow-viz"&gt;seaflow-viz&lt;/a&gt; web dashboard (see it here &lt;a href="https://uwescience.github.com/seaflow-viz"&gt;https://uwescience.github.com/seaflow-viz&lt;/a&gt;) for visualizing cruise performance and science in real time. &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; gave an update on the cruise she got back from a few weeks ago and on our work in the last two weeks analyzing cell diversity in Myria. &lt;a href="http://r.halper.in/coauth/fribalet"&gt;Francois&lt;/a&gt; gave an update on the new proposal we submitted to analyze population dynamics in SeaFlow data. Thinking ahead, we talked about &lt;a href="http://r.halper.in/coauth/swalwell"&gt;Jarred&lt;/a&gt;‘s agenda for scaling up SeaFlow data collection and what needs that would entail for automated instrument monitoring and the underlying data service; and we talked about how to demo “Myria for SeaFlow” to a broader audience.&lt;/p&gt;
&lt;p&gt;In the rest of the day, I worked on making &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; better: adding some new optimization rules to streamline the types of plans that are emitted by the Flink compiler, and hacking/code reviewing with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; to get the &lt;a href="https://github.com/uwescience/raco/pull/269"&gt;MyriaL → Grappa support&lt;/a&gt; working better, and fixing a few little issues that cropped up.&lt;/p&gt;
&lt;p&gt;I also finally implemented, evaluated, and deployed the &lt;a href="https://github.com/uwescience/myria/pull/609"&gt;50x—100x speedup &lt;span class="caps"&gt;SQL&lt;/span&gt; query mod&lt;/a&gt; to the bottleneck query in &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;‘s fantastic Myria profiler. Now &lt;a href="https://demo.myria.cs.washington.edu/profile?queryId=32305"&gt;the profiling &lt;span class="caps"&gt;UI&lt;/span&gt; is super-snappy even for long programs&lt;/a&gt;.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="seaflow"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="dominik"></category><category term="francois"></category><category term="jarred"></category><category term="sophie"></category></entry><entry><title>2014-08-21 daily</title><link href="http://blog.halper.in/posts/2014/08/21/2014-08-21-daily/" rel="alternate"></link><updated>2014-08-21T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-21:posts/2014/08/21/2014-08-21-daily/</id><summary type="html">&lt;p&gt;Today we met with &lt;span class="caps"&gt;UW&lt;/span&gt;-&lt;span class="caps"&gt;IT&lt;/span&gt; to talk about the future of &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;. We will be starting some sprints in the fall to prepare it to be transitioned to them as an on-campus service.&lt;/p&gt;
&lt;p&gt;Spent a fair bit of time reading and discussing &lt;a href="http://homes.cs.washington.edu/~bdmyers/"&gt;Brandon Myers’&lt;/a&gt; paper using &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; to compile high-level MyriaL programs to low-level, blazingly fast programs for the &lt;span class="caps"&gt;UW&lt;/span&gt; Architecture Group’s &lt;a href="http://grappa.io/"&gt;Grappa&lt;/a&gt; distributed system. The initial results look &lt;em&gt;really&lt;/em&gt; good.&lt;/p&gt;
&lt;p&gt;Otherwise, some code review for Myria and other miscellaneous chats about the future.&lt;/p&gt;</summary><category term="sqlshare"></category><category term="brandon"></category><category term="raco"></category><category term="grappa"></category></entry></feed>