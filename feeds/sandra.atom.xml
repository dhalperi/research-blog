<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/sandra.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-10-09T00:00:00-07:00</updated><entry><title>Mo(o)re(—Sloan) fun with Academic Lineage</title><link href="http://blog.halper.in/moore-sloan-fun-with-academic-lineage.html" rel="alternate"></link><updated>2014-10-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-09:moore-sloan-fun-with-academic-lineage.html</id><summary type="html">&lt;p&gt;While we were at the Moore—Sloan Data Science Environments community build, &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt; continued our work analyzing academic lineage with Myria.&lt;/p&gt;
&lt;p&gt;On the citation graph we’re using, &lt;a href="http://www.mapequation.org/code.html"&gt;InfoMap&lt;/a&gt; identifies 5,292 unique paper clusters. For each cluster, we took the top paper rated by &lt;a href="http://www.eigenfactor.org/"&gt;Eigenfactor&lt;/a&gt; and fed these 5,292 papers as the seed set for the Least Common Ancestor (&lt;span class="caps"&gt;LCA&lt;/span&gt;) query which we ran on Myria. The &lt;a href="https://demo.myria.cs.washington.edu/queries?max=35111&amp;amp;limit=1"&gt;query itself&lt;/a&gt; took a little over 4 hours, but it finished successfully.&lt;/p&gt;
&lt;p&gt;Of the nearly 14 million pairs of papers, 7.1M of them have a common ancestor—a hit rate of about 50%.  Among these 7.1M LCAs, here are the ten most frequent papers (and their frequencies):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(47,129) &lt;em&gt;Some Methods for Strengthening the Common 𝝌&lt;sup&gt;2&lt;/sup&gt; Tests&lt;/em&gt; (Cochran, 1954)&lt;/li&gt;
&lt;li&gt;(35,585) &lt;em&gt;The Evolution of Reciprocal Altruism&lt;/em&gt; (Trivers, 1971)&lt;/li&gt;
&lt;li&gt;(34,195) &lt;em&gt;On the Mathematical Foundations of Theoretical Statistics&lt;/em&gt; (Fisher, 1922)&lt;/li&gt;
&lt;li&gt;(34,093) &lt;em&gt;The Tragedy of the Commons&lt;/em&gt; (Hardin, 1968)&lt;/li&gt;
&lt;li&gt;(32,067) &lt;em&gt;Some Difficulties of the Determination Problem&lt;/em&gt; (Harrison, 1933)&lt;/li&gt;
&lt;li&gt;(29,458) &lt;em&gt;Diverse Doctrines of Evolution, Their Relation to the Practice of Science and of Life&lt;/em&gt; (Jennings, 1927)&lt;/li&gt;
&lt;li&gt;(28,149) &lt;em&gt;An Analysis of Transformations&lt;/em&gt; (Box, 1964)&lt;/li&gt;
&lt;li&gt;(26,000) &lt;em&gt;Fitting the Negative Binomial Distribution to Biological Data&lt;/em&gt; (Bliss, 1953)&lt;/li&gt;
&lt;li&gt;(25,410) &lt;em&gt;A Method for Cluster Analysis&lt;/em&gt; (Edwards, 1965)&lt;/li&gt;
&lt;li&gt;(24,611) &lt;em&gt;A Theory of the Allocation of Time&lt;/em&gt; (Becker, 1965)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We hope to dig into this more next week, but looking at the results is already pretty fascinating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These papers are generally highly cited, but (paraphrasing Jevin) may not be currently recognized as the very top according to standard citation metrics.&lt;/li&gt;
&lt;li&gt;The time range is pretty interesting — early to mid 20th century all around.&lt;/li&gt;
&lt;li&gt;Mathematics and statistics seems to dominate this part of the list. We do see some more fundamental life science papers nearby, the first of which is &lt;em&gt;The Gene&lt;/em&gt; (Goldschmidt, 1928) at #17.&lt;/li&gt;
&lt;li&gt;The top hit represents 0.66%, or 1 in 151 of the results, and the 10th hit represents 0.34% or 1 in 289 of the results.&lt;/li&gt;
&lt;li&gt;And, of course, I have not directly come across any of these papers in my work, but I should go read them!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What are your thoughts: Do you recognize these papers? Have you read them? What else should we think about?&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="msdse"></category><category term="eigenfactor"></category></entry><entry><title>2014-09-23 daily</title><link href="http://blog.halper.in/2014-09-23-daily.html" rel="alternate"></link><updated>2014-09-23T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-23:2014-09-23-daily.html</id><summary type="html">&lt;p&gt;Today I met with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt; to continue our discussions of Sandra Anderson’s work using Myria to study citation networks. This week, we are digging into one 37-hop citation path from neuroscience in 1988 to law in 1912. Really, really fascinating data. Soon, we hope to be able to automatically identify what the important papers that bridge disparate fields, and when these bridges were built.&lt;/p&gt;
&lt;p&gt;In the afternoon, we held the &lt;a href="http://escience.washington.edu/blog/data-science-uw"&gt;eScience Welcome Event&lt;/a&gt; for Fall 2014 — we met all the new postdocs, faculty, and &lt;a href="http://escience.washington.edu/education-IGERT"&gt;&lt;span class="caps"&gt;IGERT&lt;/span&gt;&lt;/a&gt; students who will be joining us this year. Now that school is back in session (starting tomorrow) the year is officially beginning, and I am so excited about what’s coming up!&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="myria"></category><category term="eigenfactor"></category></entry><entry><title>2014-09-19 daily</title><link href="http://blog.halper.in/2014-09-19-daily.html" rel="alternate"></link><updated>2014-09-19T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-19:2014-09-19-daily.html</id><summary type="html">&lt;p&gt;Today &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I hacked on Myria for SeaFlow once again. We found another few opportunities for language and usability improvements, and made little progress because of an issue introduced when fixing other bugs earlier this week.&lt;/p&gt;
&lt;p&gt;In the Myria research meeting, we had both Johannes Gehrke from Microsoft/Cornell and new/future &lt;span class="caps"&gt;UW&lt;/span&gt; database faculty &lt;a href="http://people.csail.mit.edu/akcheung/"&gt;Alvin Cheung&lt;/a&gt; at the Myria meeting. We talked about the real apps (Sophie, Sandra) that we implemented with Myria this summer and about future research ideas.&lt;/p&gt;</summary><category term="sophie"></category><category term="myria"></category><category term="alvin"></category><category term="sandra"></category></entry><entry><title>2014-09-16 daily</title><link href="http://blog.halper.in/2014-09-16-daily.html" rel="alternate"></link><updated>2014-09-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-16:2014-09-16-daily.html</id><summary type="html">&lt;p&gt;I also did not get much time to do real work today. There were three major activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator applications are due Thursday! They have started rolling in, so I have started looking at them and have started a few clarifying discussions with some of the authors. Getting excited for this second incarnation!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill and Andrew and I met to discuss how to make the production Myria demo more stable. Some of the basic things like query queues are becoming important now that we have more users. I’ll work on that in the next few days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I pushed the least common ancestor query a bit farther by fixing a fairly &lt;a href="https://github.com/uwescience/myria/pull/619"&gt;major Myria bug&lt;/a&gt; — though, note that this was a performance bug and not a correctness bug :). Basically, we were sending a lot of data over the network when there was no need to do so. Fixing it sped up queries by a factor of 4—5, increased scaling dramatically, and dramatically reduced the variation in query time.&lt;/p&gt;
&lt;p&gt;At this point, I think I am finally done with the lineage query until I get to meet with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;. More later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="incubator"></category><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-15 daily</title><link href="http://blog.halper.in/2014-09-15-daily.html" rel="alternate"></link><updated>2014-09-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-15:2014-09-15-daily.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Only had a tiny bit of time today; I worked more on the least common ancestor query. Here is what new work contributed to better scaling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Incrementalizing the code (duh) did in fact let me scale it farther. The prior program was failing because of memory problems in a large final join; breaking down that join into multiple steps, one at a time, inside the loop reduces the memory crunch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obvious Raco optimization: turn &lt;code&gt;X = X + Y;&lt;/code&gt; into &lt;code&gt;X += Y;&lt;/code&gt;, which is a big deal when &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; both come from and are inserted into a database.  (Here, &lt;code&gt;+&lt;/code&gt; is &lt;code&gt;UnionAll&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only reason this optimization had not been implemented before is that this was never actually the bottleneck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once again, it goes to show what working with real data and real queries can do for your system’s applicability.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-12 daily</title><link href="http://blog.halper.in/2014-09-12-daily.html" rel="alternate"></link><updated>2014-09-12T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-12:2014-09-12-daily.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a great Myria meeting this afternoon. We discussed &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt;‘s user-defined aggregate (&lt;span class="caps"&gt;UDA&lt;/span&gt;) extensions to MyriaL, which provide a very nice way to get scalable, distributed partial aggregation to implement many complicated aggregations in a single scan rather than through joins. The poster child is &lt;a href="https://github.com/uwescience/raco/pull/336#diff-bfec5b84bb73fdca4c61627f00d1e6dcR1908"&gt;&lt;code&gt;arg_max&lt;/code&gt;&lt;/a&gt;: return the entire row where the value of some field is maximized. &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; has proposed a nice syntax that might help simplify the expression of &lt;code&gt;arg_max&lt;/code&gt;-like UDAs.&lt;/p&gt;
&lt;p&gt;I presented Sandra’s least-common ancestor query to the group, and we discussed optimizations. At the meeting, &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt;, Bill, and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; insisted this should work better if rewritten in incremental form, and Brandon helped me rewrite it afterwards. Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;</summary><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="jevin"></category><category term="magda"></category><category term="sandra"></category></entry><entry><title>2014-09-11 daily</title><link href="http://blog.halper.in/2014-09-11-daily.html" rel="alternate"></link><updated>2014-09-11T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-11:2014-09-11-daily.html</id><summary type="html">&lt;p&gt;Today I spent all day with Sandra Anderson’s citation graph lineage queries. Though I can compute “all-pairs reachability” for the first &lt;em&gt;10000&lt;/em&gt; papers in the dataset… I can only currently compute “least-common ancestor” for the first &lt;em&gt;500&lt;/em&gt; papers. There are some severe algorithmic scalability challenges here that we are excited to tackle.&lt;/p&gt;
&lt;p&gt;Part of the problem is that there are 2 million papers and it seems that about 2%—5% of all paper pairs have a common ancestor. This implies that the result set is pretty big — 200 billion papers. This does not scare us, but it is a good real use case!&lt;/p&gt;
&lt;p&gt;Due to data restrictions, we are working with anonymized paper IDs for this project and only Jevin has the secret mapping. To ensure that our computation is sensible, we sent him about 2300 pairs of papers and their least common ancestors, and he de-blinded some of the titles. The results are pretty fascinating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some of the least common ancestors are back in the 1700’s&lt;/li&gt;
&lt;li&gt;some of the least common ancestors are 54 citations deep from one of their papers (&lt;em&gt;update: it appears this is probably bad data, because one such chain is actually anachronistic&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The common ancestors for papers in different fields are often old and seem really fundamental, e.g. (&lt;em&gt;What is Capital?&lt;/em&gt;, I. Fisher, 1896) and (&lt;em&gt;On the Mathematical Foundations of Theoretical Statistics&lt;/em&gt;, &lt;span class="caps"&gt;R. A.&lt;/span&gt; Fisher, 1922).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;</summary><category term="myria"></category><category term="jevin"></category><category term="sandra"></category></entry><entry><title>2014-09-10 daily</title><link href="http://blog.halper.in/2014-09-10-daily.html" rel="alternate"></link><updated>2014-09-10T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-10:2014-09-10-daily.html</id><summary type="html">&lt;p&gt;In between meetings, I spent most of today continuing yesterday’s work on the citation use case. Further query rewrites and testing exposed an interesting bug in the optimizer due to a mismatch between logical algebra representation and the actual system implementation behavior — the optimizer assumed the system could perform an operation which the system could not. Fixed the bug, which was thankfully short-lived!&lt;/p&gt;
&lt;p&gt;After the last few days’ worth of heckling, what I believe is the largest computational step in the algorithm is now finished. At the start, it took about 4 hours to find shared citations 19 levels deep, at which point Myria’s built-in iteration limit (there to protect against infinite loops by bad queries that I write) was triggered. I raised the iteration limit and with all the improvements to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, it now takes 4 hours to fully walk the graph.&lt;/p&gt;
&lt;p&gt;The longest train of citations is 69 levels deep! Tomorrow, I hope to find the actual shared citations for pairs of papers.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-09 daily</title><link href="http://blog.halper.in/2014-09-09-daily.html" rel="alternate"></link><updated>2014-09-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-09:2014-09-09-daily.html</id><summary type="html">&lt;p&gt;Today I picked up some of the work that Sandra Anderson did in her summer internship, namely trying to find common citations (transitively) between pairs of papers in &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;‘s data sets.&lt;/p&gt;
&lt;p&gt;Once again I identified a number of nice optimization opportunities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some query rewrites that result in better &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; plans&lt;/li&gt;
&lt;li&gt;some relational algebra optimizations we were leaving on the floor in &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and some simple systems tricks to aggregate database inserts and thus amortize transaction overheads in Myria.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The query rewrites are an especially interesting use case. Sandra wrote correct, fantastic MyriaL programs, but: since I know how the system works at a deep level, I can suggest rewrites that result in much more efficient execution.&lt;/p&gt;
&lt;p&gt;These queries that come from smart users and real science use cases are great as fodder for the future automatic query rewriting research I am planning on the side. In designing systems and services to make powerful tools accessible to scientists, the answer we give them when things are slow can’t always be “well, you wrote it wrong”.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-04 daily</title><link href="http://blog.halper.in/2014-09-04-daily.html" rel="alternate"></link><updated>2014-09-04T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-04:2014-09-04-daily.html</id><summary type="html">&lt;p&gt;Today I met with &lt;span class="caps"&gt;UW&lt;/span&gt; &lt;span class="caps"&gt;CSE&lt;/span&gt; undergrad York Wei and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; for demos and code review of York’s summer Project. York and Brandon have adapted our &lt;a href="http://github.com/uwescience/myria-web"&gt;Myria Web frontend&lt;/a&gt; to extend the current support for &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; with the ability to issue queries to two new backends:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated C code for fast, in-memory queries on a single machine, and&lt;/li&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated code on the &lt;a href="http://grappa.io/"&gt;Grappa runtime&lt;/a&gt;, which uses the partitioned, global address space model to execute blazingly-fast queries in memory on a large, distributed cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout the course of the meeting we discussed general issues and refactoring for Myria-Web so that it will truly be backend-agnostic and we can deploy this awesome, multi-system functionality on the web. I look forward to using this software for Flink support!&lt;/p&gt;
&lt;p&gt;The other exciting news is that &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt; finished the Raco support for user-defined aggregates and functions. We now have the support that Sandra Anderson needs to issue fast queries over citation graphs!&lt;/p&gt;</summary><category term="andrew"></category><category term="brandon"></category><category term="sandra"></category><category term="york"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-08-29 daily</title><link href="http://blog.halper.in/2014-08-29-daily.html" rel="alternate"></link><updated>2014-08-29T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-29:2014-08-29-daily.html</id><summary type="html">&lt;p&gt;The big news today is that &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt; now has support for user-defined aggregations. I’m excited that we can soon put this new feature to work and asymptotically speedup &lt;a href="http://blog.halper.in/2014-08-20-daily.html"&gt;Sandra’s citation graph analysis work&lt;/a&gt;, which is currently throttled by memory pressure.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="infomap"></category><category term="andrew"></category><category term="sandra"></category></entry><entry><title>2014-08-20 daily</title><link href="http://blog.halper.in/2014-08-20-daily.html" rel="alternate"></link><updated>2014-08-20T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-20:2014-08-20-daily.html</id><summary type="html">&lt;p&gt;Today I hacked more on the blog organization and layout; fighting with GitHub CNAMEs was harder than I expected it to be. Eventually I settled on creating a sub-project for the blog as hosting it in my personal &lt;code&gt;dhalperi/dhalperi.github.io&lt;/code&gt; repository affected the URLs for other projects like the &lt;a href="http://dhalperi.github.io/linux-80211n-csitool"&gt;&lt;span class="caps"&gt;CSI&lt;/span&gt; Tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Met with &lt;a href="http://www.jevinwest.org/"&gt;Jevin West&lt;/a&gt; and Sandra Anderson to talk about Sandra’s work on analyzing citation networks with &lt;a href="https://demo.myria.cs.washington.edu/queries?max=23223&amp;amp;limit=1"&gt;Myria&lt;/a&gt;. Sandra is a rising sophomore at Cornell, of undecided major but spectacular in both &lt;span class="caps"&gt;CS&lt;/span&gt; and Math. She started 7 weeks ago with no prior experience “thinking like a database”, and in that time she has contributed lots of interesting ideas, independently re-derived much of the existing database wisdom about how to efficiently solve problems like transitive closure, and written some of the most complicated, iterative MyriaL programs to date. There will be a follow-up post on Sandra’s work!&lt;/p&gt;
&lt;p&gt;More eScience steering committee action. We had our third session with the short-term evaluation team, which seems to be going great. So far, &lt;a href="http://data2insight.com/about/#the_page"&gt;Veronica&lt;/a&gt; has managed to coerce 20+ fiercely independent minds to work together on the steps in our five-year vision for the project and to establish key evaluations. I need to learn more about the process and goals of evaluation—-I’m having a hard time following along/understanding why we’re doing what we’re doing, but I can see amazing outputs from this process already!&lt;/p&gt;
&lt;p&gt;Some SQLShare planning and support. Seems like we’re getting closer to needing/merging the rewrite of the Python client I started a year ago.&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="steering"></category><category term="interns"></category></entry></feed>