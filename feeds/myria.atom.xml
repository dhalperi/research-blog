<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dan's research blog</title><link href="http://blog.halper.in/" rel="alternate"></link><link href="http://blog.halper.in/feeds/myria.atom.xml" rel="self"></link><id>http://blog.halper.in/</id><updated>2014-11-12T00:00:00-08:00</updated><entry><title>Public cluster + private experiments</title><link href="http://blog.halper.in/posts/2014/11/12/public-cluster-private-experiments/" rel="alternate"></link><updated>2014-11-12T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-12:posts/2014/11/12/public-cluster-private-experiments/</id><summary type="html">&lt;p&gt;The hot button issue today is what we do with our public Myria service.&lt;/p&gt;
&lt;p&gt;As part of the grant proposal, we promised that “the project develops and deploys a Web-based query-as-a-service interface to the new middleware. The service will be made available to domain scientists” (p.1). This service has been working gangbusters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have written before about the &lt;a href="http://r.halper.in/paper/Loebman_MergerTree_2014.pdf"&gt;MyMergerTree&lt;/a&gt; service built by students and faculty in the &lt;span class="caps"&gt;UW&lt;/span&gt; Database and Astronomy groups, led by &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt; and &lt;a href="http://r.halper.in/coauth/loebman"&gt;Sarah Loebman&lt;/a&gt; on the faculty side. MyMergerTree is just awesome and used by researchers in Astronomy still.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt;‘s &lt;a href="https://github.com/uwescience/incubator/wiki/Patterns-in-phytoplankton-diversity"&gt;Incubator project&lt;/a&gt; uses Myria to analyze large (tens of cruises, thousands of hours, billions of cells) oceanographic data. Among Myria users, Sophie is the one really innovating at combining Myria with other tools, such as her &lt;a href="https://github.com/uwescience/seaflow-myria/tree/master/ipython_notebooks"&gt;IPython notebooks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; and York Wei have been working on &lt;a href="https://github.com/uwescience/myria-web/pull/212"&gt;abstracting the Myria web frontend to work with other backends&lt;/a&gt; such as Grappa and C.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this great work is making the system and the research project much powerful and much better, increasing its visibility, benefiting the entire effort, and it fulfills our grant obligations.&lt;/p&gt;
&lt;p&gt;However, there is a definite tension here, because running a public service tends to lead to high load on a cluster. At the same time, for our own research, we need to reserve the cluster in order to, e.g., give demos with little resource contention, or perform research experiments with repeatable results.&lt;/p&gt;
&lt;p&gt;How should/how can we balance these two concerns?&lt;/p&gt;
&lt;p&gt;Until recently, we have relied on a relatively light workload with few real users who were unlikely to interfere with demos or experiments, and we would notify these users when we had a reservation scheduled. But now that we’re succeeding — now that we’ve advertised to a broader audience and they actually want to use our service — we need a new strategy.&lt;/p&gt;
&lt;p&gt;For now, we’ve implemented a short-term workaround: &lt;a href="https://www.google.com/calendar/embed?src=cs.washington.edu_i1gk4il65dj31mcfgid1t9t1o8@group.calendar.google.com&amp;amp;ctz=America/Los_Angeles&amp;amp;mode=week"&gt;a public Google calendar listing our group’s reservations&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/myria-web/issues/186"&gt;visible warnings on the Myria query editor&lt;/a&gt; when the cluster is reserved. With our friendly users, this is likely good enough. (Our group also has the ability to kill queries if we need to in order to give a demo.)&lt;/p&gt;
&lt;p&gt;Long-term, we need to figure out a good balance. On the one hand, the service that we committed to offer has value for the community and generates research ideas, research input, validation, experience, and publicity for our team. On the other hand, serving other groups need not come at the expense of the database group’s ability to do research.&lt;/p&gt;
&lt;p&gt;One key contributor here will be increased usage of the cloud: for one-time, 24-hour dedicated experiments, it makes more sense to spin up a virtual cloud cluster than it does to stop everything running on our hardware including (but not limited to) the existing Myria service. With the cloud, and unlike our silicon, two different students can work at the same time!&lt;/p&gt;
&lt;p&gt;What other advice do you have?&lt;/p&gt;</summary><category term="myria"></category></entry><entry><title>Incubator and catching up on Myria</title><link href="http://blog.halper.in/posts/2014/11/11/incubator-and-catching-up-on-myria/" rel="alternate"></link><updated>2014-11-11T00:00:00-08:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-11-11:posts/2014/11/11/incubator-and-catching-up-on-myria/</id><summary type="html">&lt;p&gt;Today, &lt;span class="caps"&gt;UW&lt;/span&gt; is closed for the Veteran’s Day holiday; I took the opportunity to continue catching up on several weeks’ email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://depts.washington.edu/hacholab/labdetails.php?id=58"&gt;Ângela Katsumaya&lt;/a&gt; came to the Incubator for a few hours this afternoon. With &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill&lt;/a&gt;, she continued joining and analyzing her data, attempting to answer questions like “what is the average bed time for each student?” in &lt;a href="https://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Myria, I reviewed a bunch of the great code that &lt;a href="http://r.halper.in/coauth/jwang"&gt;Jingjing Wang&lt;/a&gt; has written and merged some of her new features.&lt;/p&gt;
&lt;p&gt;Finally, I also had the wacky idea (based on a question from Ângela) to add some fancy math operators to the Myria language. Would it not be cool if the following was legal code?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="err"&gt;≤&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have a working prototype and will bring it to the team soon. At the best, these operators would make the language easier to learn and example programs easier to understand. At the worst, it’s confusing and/or misleading — “How do I type that operator?”. (The answer &lt;code&gt;Option&lt;/code&gt;+&lt;code&gt;,&lt;/code&gt; on a Mac, in this case).&lt;/p&gt;
&lt;p&gt;Oh, also — Bill gave us a tour of the new Data Science Studio space. Looking forward to moving in there as soon as we can!&lt;/p&gt;</summary><category term="ângela"></category><category term="jingjing"></category><category term="incubator"></category><category term="myria"></category></entry><entry><title>Myria security, ethnography</title><link href="http://blog.halper.in/posts/2014/10/15/myria-security-ethnography/" rel="alternate"></link><updated>2014-10-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-15:posts/2014/10/15/myria-security-ethnography/</id><summary type="html">&lt;p&gt;The newest Chrome update broke parts of &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; because of new policies regarding security (&lt;span class="caps"&gt;HTTPS&lt;/span&gt;) in web &lt;span class="caps"&gt;API&lt;/span&gt; calls. So, I finally did the 5 hours of work it would take to make Myria’s &lt;span class="caps"&gt;API&lt;/span&gt; server support &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, installed the certificate, and made all our deployment scripts. Now our users’ data (which is all publicly logged anyway) is much “safer” and, more importantly, the website works again.&lt;/p&gt;
&lt;p&gt;I sat down with the ethnographers who are observing the &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; — &lt;a href="http://fioresilfvast.org/"&gt;Brittany Fiore-Silvast&lt;/a&gt; and Anissa Tanweer — to chat about the parts of the Incubator process that happened before we looped them in. We discussed the internal planning, what happened in Spring and what we wanted to change, the applicant pool, the review process, and more. It was a fun chat and merely having the chat, plus their insightful questions, made me reflect more on the process and take a step back. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; and I met with &lt;a href="http://r.halper.in/coauth/shrainik"&gt;Shrainik Jain&lt;/a&gt; and &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik Moritz&lt;/a&gt; to discuss our project quantifying how much “variety” there is in different data systems and progress on the draft paper they have been writing. The basic idea is that we have an intuitive notion of “well-structured” databases (like the &lt;span class="caps"&gt;TPC&lt;/span&gt; benchmarks), and databases with “high variety” (like SQLShare), and we ought to be able to quantitatively find differences between them. &lt;span class="caps"&gt;SDSS&lt;/span&gt; should be a nice mid-point: it has many users asking potentially different questions, but their queries are limited to a well-defined, highly structured schema provided by the Skyserver team. Initial results are promising, and we are starting to put together a draft.&lt;/p&gt;</summary><category term="britta"></category><category term="anissa"></category><category term="dominik"></category><category term="shrainik"></category><category term="bill"></category><category term="myria"></category><category term="incubator"></category><category term="variety"></category><category term="ethnography"></category></entry><entry><title>Data and databases</title><link href="http://blog.halper.in/posts/2014/10/13/data-and-databases/" rel="alternate"></link><updated>2014-10-13T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-13:posts/2014/10/13/data-and-databases/</id><summary type="html">&lt;p&gt;Over the weekend, both &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and &lt;a href="http://r.halper.in/people/becker"&gt;Andy Becker&lt;/a&gt; worked independently on their &lt;a href="http://data.uw.edu/incubator"&gt;Data Science Incubator&lt;/a&gt; projects; I spent some time then and today answering emails :).&lt;/p&gt;
&lt;p&gt;Sophie has been loading underway data (&lt;span class="caps"&gt;GPS&lt;/span&gt;, temperature, salinity, etc. from ships in motion) into &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt; for cleaning. Every research vessel is its own special flower that represents dates and times in different ways, and we want to bring them all into a normalized format. We will then load the normalized data into Myria and join it with the SeaFlow data in her analyses. 
&lt;small&gt;(For now, the Microsoft &lt;span class="caps"&gt;SQL&lt;/span&gt; Server system underpinning SQLShare is better for messy data than Myria itself, because &lt;span class="caps"&gt;SQL&lt;/span&gt; Server handles more data types and corner cases than we do. This will change!)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We made Sophia’s queries run &lt;em&gt;dramatically&lt;/em&gt; faster by materializing SQLShare datasets once all the fields were in the right types. Turns out, recomputing &lt;code&gt;datetime&lt;/code&gt; objects can be really slow when you want to do interval joins on them! We also discussed how to find bad rows in datasets, e.g., if you’re getting errors casting values to &lt;code&gt;float&lt;/code&gt;, you need to know about &lt;code&gt;WHERE ISNUMERIC(x) &amp;lt;&amp;gt; 1&lt;/code&gt; so you can find the bad values of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Andy has been experiencing the joys of loading data into databases with indexes, foreign keys, auto commit, checkpointing, and all that. After some iteration, we figured out to check the Postgres logs and found that his remote &lt;code&gt;COPY&lt;/code&gt; commands were running out of memory.  Chunking the data made it finish.&lt;/p&gt;
&lt;p&gt;I finally got &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria’s web interface&lt;/a&gt; to correctly push queries into the Postgres without weird Google App Engine issues, fixed all the Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; tests, and deployed it.&lt;/p&gt;</summary><category term="sophie"></category><category term="becker"></category><category term="incubator"></category><category term="reading"></category><category term="seaflow"></category><category term="kbmod"></category><category term="sqlshare"></category><category term="raco"></category><category term="myria"></category></entry><entry><title>Visualizations everywhere</title><link href="http://blog.halper.in/posts/2014/10/10/visualizations-everywhere/" rel="alternate"></link><updated>2014-10-10T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-10-10:posts/2014/10/10/visualizations-everywhere/</id><summary type="html">&lt;p&gt;&lt;a href="http://web.cecs.pdx.edu/~tufte/"&gt;Kristin Tufte&lt;/a&gt; from Portland State University came to &lt;span class="caps"&gt;UW&lt;/span&gt; today to visit some folks in transportation and to visit our eScience and Database groups. Most of the eScience students got to tell her about their work, and she and I discussed the Data Science Incubator and how to get undergrads involved. In her talk, she told us about S-Store, a streaming database with transactional support, and all about her work building &lt;a href="http://portal.its.pdx.edu/Portal/index.php/home/"&gt;Portal&lt;/a&gt; to manage, analyze, and visualize live traffic data on the Portland—Vancouver(&lt;span class="caps"&gt;WA&lt;/span&gt;) border in collaboration with &lt;span class="caps"&gt;ODOT&lt;/span&gt;, &lt;span class="caps"&gt;WSDOT&lt;/span&gt;, and related gov’ts. Fascinating, big, messy data problems everywhere, and great output viz.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik Moritz&lt;/a&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; I chatted about his research on Myria’s profiler / query execution visualizer and the paper we hope to write about it this quarter. I have been logging a half-dozen ways in which the profiler has helped me debug and understand various system this summer and these use cases should help flesh out the paper.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/people/cobbc12"&gt;Camille Cobb&lt;/a&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; I chatted about various projects for her relating to visualization of scientific datasets. We’re doing lit review and reading up on existing work, but I think we have the gist of two interesting, novel projects to go on.&lt;/p&gt;
&lt;p&gt;In my own time, I have been struggling with using &lt;a href="https://bitbucket.org/zzzeek/sqlalchemy"&gt;SQLAlchemy&lt;/a&gt; on Google App Engine to make Myria push work into an underlying &lt;span class="caps"&gt;DBMS&lt;/span&gt; and get much better performance on selective queries.&lt;/p&gt;</summary><category term="tufte"></category><category term="camille"></category><category term="dominik"></category><category term="myria"></category></entry><entry><title>2014-09-24 daily</title><link href="http://blog.halper.in/posts/2014/09/24/2014-09-24-daily/" rel="alternate"></link><updated>2014-09-24T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-24:posts/2014/09/24/2014-09-24-daily/</id><summary type="html">&lt;p&gt;We made final decisions about the proposed Incubator projects today. We ended up with 6 exciting projects we accepted, and 20 more we wish we could have said yes to. If your proposal was not accepted, or you want to get in touch with us some other way, note that we will be starting office hours every Thursday 9—11 in the Data Science Studio space beginning next week. (We will use Sieg 326 for the first month until construction is done).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I held a “pre-incubator” (hers was one of the chosen proposals) hack session in the afternoon, during which we wrote five or six queries to help us determine how to best co-align cytograms from different cruises and analyze the intersecting area for her research cellular diversity. It should be a fun project to continue working on this quarter.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://homes.cs.washington.edu/~shrainik/"&gt;Shrainik Jain&lt;/a&gt; is back from Microsoft Research (where neither he nor his team was recently fired), and we chatted about his summer project and his upcoming quals project on identifying and quantifying the “high-variety” (the most important V, from my opinion) aspect of “big data”.&lt;/p&gt;</summary><category term="sophie"></category><category term="shrainik"></category><category term="incubator"></category><category term="myria"></category><category term="seaflow"></category></entry><entry><title>2014-09-23 daily</title><link href="http://blog.halper.in/posts/2014/09/23/2014-09-23-daily/" rel="alternate"></link><updated>2014-09-23T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-23:posts/2014/09/23/2014-09-23-daily/</id><summary type="html">&lt;p&gt;Today I met with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt; to continue our discussions of Sandra Anderson’s work using Myria to study citation networks. This week, we are digging into one 37-hop citation path from neuroscience in 1988 to law in 1912. Really, really fascinating data. Soon, we hope to be able to automatically identify what the important papers that bridge disparate fields, and when these bridges were built.&lt;/p&gt;
&lt;p&gt;In the afternoon, we held the &lt;a href="http://escience.washington.edu/blog/data-science-uw"&gt;eScience Welcome Event&lt;/a&gt; for Fall 2014 — we met all the new postdocs, faculty, and &lt;a href="http://escience.washington.edu/education-IGERT"&gt;&lt;span class="caps"&gt;IGERT&lt;/span&gt;&lt;/a&gt; students who will be joining us this year. Now that school is back in session (starting tomorrow) the year is officially beginning, and I am so excited about what’s coming up!&lt;/p&gt;</summary><category term="jevin"></category><category term="sandra"></category><category term="myria"></category><category term="eigenfactor"></category></entry><entry><title>2014-09-19 daily</title><link href="http://blog.halper.in/posts/2014/09/19/2014-09-19-daily/" rel="alternate"></link><updated>2014-09-19T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-19:posts/2014/09/19/2014-09-19-daily/</id><summary type="html">&lt;p&gt;Today &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; and I hacked on Myria for SeaFlow once again. We found another few opportunities for language and usability improvements, and made little progress because of an issue introduced when fixing other bugs earlier this week.&lt;/p&gt;
&lt;p&gt;In the Myria research meeting, we had both Johannes Gehrke from Microsoft/Cornell and new/future &lt;span class="caps"&gt;UW&lt;/span&gt; database faculty &lt;a href="http://people.csail.mit.edu/akcheung/"&gt;Alvin Cheung&lt;/a&gt; at the Myria meeting. We talked about the real apps (Sophie, Sandra) that we implemented with Myria this summer and about future research ideas.&lt;/p&gt;</summary><category term="sophie"></category><category term="myria"></category><category term="alvin"></category><category term="sandra"></category></entry><entry><title>2014-09-17 daily</title><link href="http://blog.halper.in/posts/2014/09/17/2014-09-17-daily/" rel="alternate"></link><updated>2014-09-17T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-17:posts/2014/09/17/2014-09-17-daily/</id><summary type="html">&lt;p&gt;Today I mostly worked on admission control (i.e., query queuing) for Myria. I also read some papers on cost-based optimizers.&lt;/p&gt;</summary><category term="myria"></category></entry><entry><title>2014-09-16 daily</title><link href="http://blog.halper.in/posts/2014/09/16/2014-09-16-daily/" rel="alternate"></link><updated>2014-09-16T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-16:posts/2014/09/16/2014-09-16-daily/</id><summary type="html">&lt;p&gt;I also did not get much time to do real work today. There were three major activities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;UW&lt;/span&gt; Data Science Incubator applications are due Thursday! They have started rolling in, so I have started looking at them and have started a few clarifying discussions with some of the authors. Getting excited for this second incarnation!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bill and Andrew and I met to discuss how to make the production Myria demo more stable. Some of the basic things like query queues are becoming important now that we have more users. I’ll work on that in the next few days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I pushed the least common ancestor query a bit farther by fixing a fairly &lt;a href="https://github.com/uwescience/myria/pull/619"&gt;major Myria bug&lt;/a&gt; — though, note that this was a performance bug and not a correctness bug :). Basically, we were sending a lot of data over the network when there was no need to do so. Fixing it sped up queries by a factor of 4—5, increased scaling dramatically, and dramatically reduced the variation in query time.&lt;/p&gt;
&lt;p&gt;At this point, I think I am finally done with the lineage query until I get to meet with &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;. More later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="incubator"></category><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-15 daily</title><link href="http://blog.halper.in/posts/2014/09/15/2014-09-15-daily/" rel="alternate"></link><updated>2014-09-15T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-15:posts/2014/09/15/2014-09-15-daily/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Only had a tiny bit of time today; I worked more on the least common ancestor query. Here is what new work contributed to better scaling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Incrementalizing the code (duh) did in fact let me scale it farther. The prior program was failing because of memory problems in a large final join; breaking down that join into multiple steps, one at a time, inside the loop reduces the memory crunch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obvious Raco optimization: turn &lt;code&gt;X = X + Y;&lt;/code&gt; into &lt;code&gt;X += Y;&lt;/code&gt;, which is a big deal when &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; both come from and are inserted into a database.  (Here, &lt;code&gt;+&lt;/code&gt; is &lt;code&gt;UnionAll&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The only reason this optimization had not been implemented before is that this was never actually the bottleneck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once again, it goes to show what working with real data and real queries can do for your system’s applicability.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-12 daily</title><link href="http://blog.halper.in/posts/2014/09/12/2014-09-12-daily/" rel="alternate"></link><updated>2014-09-12T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-12:posts/2014/09/12/2014-09-12-daily/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We had a great Myria meeting this afternoon. We discussed &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt;‘s user-defined aggregate (&lt;span class="caps"&gt;UDA&lt;/span&gt;) extensions to MyriaL, which provide a very nice way to get scalable, distributed partial aggregation to implement many complicated aggregations in a single scan rather than through joins. The poster child is &lt;a href="https://github.com/uwescience/raco/pull/336#diff-bfec5b84bb73fdca4c61627f00d1e6dcR1908"&gt;&lt;code&gt;arg_max&lt;/code&gt;&lt;/a&gt;: return the entire row where the value of some field is maximized. &lt;a href="http://r.halper.in/coauth/billhowe"&gt;Bill Howe&lt;/a&gt; has proposed a nice syntax that might help simplify the expression of &lt;code&gt;arg_max&lt;/code&gt;-like UDAs.&lt;/p&gt;
&lt;p&gt;I presented Sandra’s least-common ancestor query to the group, and we discussed optimizations. At the meeting, &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda Balazinska&lt;/a&gt;, Bill, and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; insisted this should work better if rewritten in incremental form, and Brandon helped me rewrite it afterwards. Next week, I’ll see if the incrementalization actually helps us scale.&lt;/p&gt;</summary><category term="myria"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="jevin"></category><category term="magda"></category><category term="sandra"></category></entry><entry><title>2014-09-11 daily</title><link href="http://blog.halper.in/posts/2014/09/11/2014-09-11-daily/" rel="alternate"></link><updated>2014-09-11T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-11:posts/2014/09/11/2014-09-11-daily/</id><summary type="html">&lt;p&gt;Today I spent all day with Sandra Anderson’s citation graph lineage queries. Though I can compute “all-pairs reachability” for the first &lt;em&gt;10000&lt;/em&gt; papers in the dataset… I can only currently compute “least-common ancestor” for the first &lt;em&gt;500&lt;/em&gt; papers. There are some severe algorithmic scalability challenges here that we are excited to tackle.&lt;/p&gt;
&lt;p&gt;Part of the problem is that there are 2 million papers and it seems that about 2%—5% of all paper pairs have a common ancestor. This implies that the result set is pretty big — 200 billion papers. This does not scare us, but it is a good real use case!&lt;/p&gt;
&lt;p&gt;Due to data restrictions, we are working with anonymized paper IDs for this project and only Jevin has the secret mapping. To ensure that our computation is sensible, we sent him about 2300 pairs of papers and their least common ancestors, and he de-blinded some of the titles. The results are pretty fascinating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some of the least common ancestors are back in the 1700’s&lt;/li&gt;
&lt;li&gt;some of the least common ancestors are 54 citations deep from one of their papers (&lt;em&gt;update: it appears this is probably bad data, because one such chain is actually anachronistic&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The common ancestors for papers in different fields are often old and seem really fundamental, e.g. (&lt;em&gt;What is Capital?&lt;/em&gt;, I. Fisher, 1896) and (&lt;em&gt;On the Mathematical Foundations of Theoretical Statistics&lt;/em&gt;, &lt;span class="caps"&gt;R. A.&lt;/span&gt; Fisher, 1922).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomorrow I will work more on the scaling issues!&lt;/p&gt;</summary><category term="myria"></category><category term="jevin"></category><category term="sandra"></category></entry><entry><title>2014-09-10 daily</title><link href="http://blog.halper.in/posts/2014/09/10/2014-09-10-daily/" rel="alternate"></link><updated>2014-09-10T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-10:posts/2014/09/10/2014-09-10-daily/</id><summary type="html">&lt;p&gt;In between meetings, I spent most of today continuing yesterday’s work on the citation use case. Further query rewrites and testing exposed an interesting bug in the optimizer due to a mismatch between logical algebra representation and the actual system implementation behavior — the optimizer assumed the system could perform an operation which the system could not. Fixed the bug, which was thankfully short-lived!&lt;/p&gt;
&lt;p&gt;After the last few days’ worth of heckling, what I believe is the largest computational step in the algorithm is now finished. At the start, it took about 4 hours to find shared citations 19 levels deep, at which point Myria’s built-in iteration limit (there to protect against infinite loops by bad queries that I write) was triggered. I raised the iteration limit and with all the improvements to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, it now takes 4 hours to fully walk the graph.&lt;/p&gt;
&lt;p&gt;The longest train of citations is 69 levels deep! Tomorrow, I hope to find the actual shared citations for pairs of papers.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-09 daily</title><link href="http://blog.halper.in/posts/2014/09/09/2014-09-09-daily/" rel="alternate"></link><updated>2014-09-09T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-09:posts/2014/09/09/2014-09-09-daily/</id><summary type="html">&lt;p&gt;Today I picked up some of the work that Sandra Anderson did in her summer internship, namely trying to find common citations (transitively) between pairs of papers in &lt;a href="http://r.halper.in/coauth/jevin"&gt;Jevin West&lt;/a&gt;‘s data sets.&lt;/p&gt;
&lt;p&gt;Once again I identified a number of nice optimization opportunities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some query rewrites that result in better &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; plans&lt;/li&gt;
&lt;li&gt;some relational algebra optimizations we were leaving on the floor in &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and some simple systems tricks to aggregate database inserts and thus amortize transaction overheads in Myria.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The query rewrites are an especially interesting use case. Sandra wrote correct, fantastic MyriaL programs, but: since I know how the system works at a deep level, I can suggest rewrites that result in much more efficient execution.&lt;/p&gt;
&lt;p&gt;These queries that come from smart users and real science use cases are great as fodder for the future automatic query rewriting research I am planning on the side. In designing systems and services to make powerful tools accessible to scientists, the answer we give them when things are slow can’t always be “well, you wrote it wrong”.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="sandra"></category><category term="jevin"></category></entry><entry><title>2014-09-08 daily</title><link href="http://blog.halper.in/posts/2014/09/08/2014-09-08-daily/" rel="alternate"></link><updated>2014-09-08T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-08:posts/2014/09/08/2014-09-08-daily/</id><summary type="html">&lt;p&gt;Today we held the information session for the second installation of our Data Science Incubator projects which we will hold in the Spring. It was fairly well attended; maybe 20—25 people came and many of these indicated that they will be submitting proposals.&lt;/p&gt;
&lt;p&gt;Over the weekend and today I pushed several new optimizations to &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; and to &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; relating to opportunities identified by my work with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; last week.&lt;/p&gt;</summary><category term="incubator"></category><category term="raco"></category><category term="myria"></category><category term="sophie"></category></entry><entry><title>2014-09-04 daily</title><link href="http://blog.halper.in/posts/2014/09/04/2014-09-04-daily/" rel="alternate"></link><updated>2014-09-04T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-04:posts/2014/09/04/2014-09-04-daily/</id><summary type="html">&lt;p&gt;Today I met with &lt;span class="caps"&gt;UW&lt;/span&gt; &lt;span class="caps"&gt;CSE&lt;/span&gt; undergrad York Wei and &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon Myers&lt;/a&gt; for demos and code review of York’s summer Project. York and Brandon have adapted our &lt;a href="http://github.com/uwescience/myria-web"&gt;Myria Web frontend&lt;/a&gt; to extend the current support for &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; with the ability to issue queries to two new backends:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated C code for fast, in-memory queries on a single machine, and&lt;/li&gt;
&lt;li&gt;a backend that compiles and executes Raco-generated code on the &lt;a href="http://grappa.io/"&gt;Grappa runtime&lt;/a&gt;, which uses the partitioned, global address space model to execute blazingly-fast queries in memory on a large, distributed cluster.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout the course of the meeting we discussed general issues and refactoring for Myria-Web so that it will truly be backend-agnostic and we can deploy this awesome, multi-system functionality on the web. I look forward to using this software for Flink support!&lt;/p&gt;
&lt;p&gt;The other exciting news is that &lt;a href="http://r.halper.in/coauth/whitaker"&gt;Andrew Whitaker&lt;/a&gt; finished the Raco support for user-defined aggregates and functions. We now have the support that Sandra Anderson needs to issue fast queries over citation graphs!&lt;/p&gt;</summary><category term="andrew"></category><category term="brandon"></category><category term="sandra"></category><category term="york"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-09-03 daily</title><link href="http://blog.halper.in/posts/2014/09/03/2014-09-03-daily/" rel="alternate"></link><updated>2014-09-03T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-03:posts/2014/09/03/2014-09-03-daily/</id><summary type="html">&lt;p&gt;Today’s highlight was another hack session with &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. The &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;same query to compute the cytometric diversity (“richness”)&lt;/a&gt; that we ran a month ago on a smaller dataset now ran out of memory after 12 minutes; after an hour of futzing I got it to &lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;finish successfully&lt;/a&gt; in 2.5 minutes. In the second half of the post, I will dive into this particular query more deeply.&lt;/p&gt;
&lt;p&gt;We met with the designer to discuss possible new logos and branding for the &lt;span class="caps"&gt;UW&lt;/span&gt; eScience Institute and for the &lt;span class="caps"&gt;WRF&lt;/span&gt; Data Science Studio we will be opening (and moving into) in November.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="http://r.halper.in/people/asterios"&gt;Asterios&lt;/a&gt; invited me to be a co-chair for next year’s &lt;strike&gt;Data Analytics in the Cloud&lt;/strike&gt; &lt;strong&gt;Data Analytics at Scale&lt;/strong&gt; (&lt;em&gt;DanaC&lt;/em&gt;) workshop at &lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2015, which would be the fourth incarnation of &lt;a href="http://danac-workshop.dima.tu-berlin.de/"&gt;the DanaC workshop&lt;/a&gt;. We are working on the proposal, and I hope it is accepted!&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;Here is the core of the first version of Sophie’s richness query (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32528&amp;amp;limit=1"&gt;#32538 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;num_particles&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;"beads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_particles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the core of the rewrite (&lt;a href="https://demo.myria.cs.washington.edu/queries?max=32532&amp;amp;limit=1"&gt;#32532 on Myria&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fsc_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;fsc_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chl_small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;chl_bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;makebins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;pe_bin&lt;/span&gt;
                            &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
                &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;AllData&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;"beads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;DistinctBins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllDataBinned&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;Richness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;Cruise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File_Id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;richness&lt;/span&gt;
                            &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;DistinctBins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you see it? It’s easy to miss. The only difference is that we swapped a GroupBy, which computed a Count aggregate that we then ignored, for a Distinct. This optimization (standard in commercial databases) has two huge benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It reduced the memory requirements by more than a factor of 4, making the query tractable at its current scale.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It enabled the query to be run in a pipelined manner. Consider the &lt;span class="caps"&gt;SQL&lt;/span&gt; query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a given &lt;code&gt;(x1, c1)&lt;/code&gt; tuple that will appear in the answer, the query cannot output that tuple until it knows that all input tuples with &lt;code&gt;x = x1&lt;/code&gt; have been seen. In a hash-based aggregate, like Myria uses, this property means that no answers can be produced until the &lt;em&gt;entire&lt;/em&gt; input &lt;code&gt;R&lt;/code&gt; has been processed, and slows the query down.&lt;/p&gt;
&lt;p&gt;(Note: Many databases will sort &lt;code&gt;R&lt;/code&gt; (or use an index on &lt;code&gt;x&lt;/code&gt;) so that they see all the values of &lt;code&gt;x&lt;/code&gt; in order, meaning they can produce &lt;code&gt;(x1,c)&lt;/code&gt; as soon as a tuple of &lt;code&gt;R&lt;/code&gt; has a new value &lt;code&gt;x2&lt;/code&gt;. We are working on this for Myria.)&lt;/p&gt;
&lt;p&gt;In contrast, consider the &lt;span class="caps"&gt;SQL&lt;/span&gt; query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this Distinct query, the output is simply the unique values of &lt;code&gt;x&lt;/code&gt;. For this answer, we can output every new value &lt;code&gt;x1&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; as soon as it appears in the input stream. (We have to keep &lt;code&gt;x1&lt;/code&gt; around to make sure that we do not produce it twice, but we do &lt;em&gt;not&lt;/em&gt; need to wait until we have seen all values of &lt;code&gt;x&lt;/code&gt;). When we produce &lt;code&gt;x1&lt;/code&gt; early, downstream computation (in this case, computing the count of the number of full bins for each cytogram) can continue immediately. This new query plan results in: better overlap between different parts of the computation, more efficient use of the parallel resources of our cluster, and ultimately, happier users who can do their science faster.&lt;/p&gt;
&lt;p&gt;(Note: as above, if the values of &lt;code&gt;x&lt;/code&gt; are sorted then we do not even need to remember all values &lt;code&gt;x1&lt;/code&gt; that we have ever seen — just the most recent version. We are working on this for Myria, too.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on what we learned today, I created &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-09-03"&gt;several new issues&lt;/a&gt; for Raco and for Myria and am well on the way to fixing them. The upshot of this work is that &lt;a href="https://github.com/uwescience/raco/pull/312#issue-41881779"&gt;the “slow query”, written the first way, now results in the same plan&lt;/a&gt; as when I rewrote it the fast way.&lt;/p&gt;
&lt;p&gt;I’ve said it before, and I’ll say it again: &lt;strong&gt;working with real users on real problems is the &lt;strike&gt;only&lt;/strike&gt; most effective way to make sure your system is actually useful&lt;/strong&gt;. The dividends for Myria of working with Sophie and other real scientists for Myria are &lt;em&gt;huge&lt;/em&gt;.&lt;/p&gt;</summary><category term="sophie"></category><category term="seaflow"></category><category term="asterios"></category><category term="danac"></category><category term="myria"></category><category term="raco"></category></entry><entry><title>2014-09-02 daily</title><link href="http://blog.halper.in/posts/2014/09/02/2014-09-02-daily/" rel="alternate"></link><updated>2014-09-02T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-09-02:posts/2014/09/02/2014-09-02-daily/</id><summary type="html">&lt;p&gt;Some writing/editing on &lt;a href="http://r.halper.in/coauth/hyrkas"&gt;Jeremy Hyrkas&lt;/a&gt;‘s paper on the challenges of clustering SeaFlow data.&lt;/p&gt;
&lt;p&gt;Now that &lt;a href="http://r.halper.in/coauth/magda"&gt;Magda&lt;/a&gt; is back from sabbatical (woohoo!), we met to discuss the status of with &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt; as a project at the implementation and research levels. Good stuff brewing, and we’re looking forward to all the students coming back!&lt;/p&gt;
&lt;p&gt;I started with the very basics of cost-based optimization for &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; with a particularly bad case that is particularly easy to handle: when computing a cross product, always broadcast the relation expected to be smaller. (Leaving &lt;a href="http://r.halper.in/coauth/pkoutris"&gt;Paris&lt;/a&gt;‘ &lt;a href="http://dl.acm.org/citation.cfm?id=2594558"&gt;hypercube-based plans to handle skew (&lt;span class="caps"&gt;SIGMOD&lt;/span&gt; 2014)&lt;/a&gt; as future work.)&lt;/p&gt;</summary><category term="jeremy"></category><category term="magda"></category><category term="paris"></category><category term="seaflow"></category><category term="myria"></category></entry><entry><title>2014-08-29 daily</title><link href="http://blog.halper.in/posts/2014/08/29/2014-08-29-daily/" rel="alternate"></link><updated>2014-08-29T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-29:posts/2014/08/29/2014-08-29-daily/</id><summary type="html">&lt;p&gt;The big news today is that &lt;a href="https://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt; now has support for user-defined aggregations. I’m excited that we can soon put this new feature to work and asymptotically speedup &lt;a href="http://blog.halper.in/2014-08-20-daily.html"&gt;Sandra’s citation graph analysis work&lt;/a&gt;, which is currently throttled by memory pressure.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="infomap"></category><category term="andrew"></category><category term="sandra"></category></entry><entry><title>2014-08-28 daily</title><link href="http://blog.halper.in/posts/2014/08/28/2014-08-28-daily/" rel="alternate"></link><updated>2014-08-28T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-28:posts/2014/08/28/2014-08-28-daily/</id><summary type="html">&lt;p&gt;We had our monthly &lt;a href="http://armbrustlab.ocean.washington.edu/resources/seaflow/"&gt;SeaFlow&lt;/a&gt;/eScience group meeting meeting. For this grant the oceanographers have been doing lots of new science using tools like &lt;a href="http://sqlshare.escience.washington.edu"&gt;SQLShare&lt;/a&gt;, &lt;a href="http://demo.myria.cs.washington.edu"&gt;Myria&lt;/a&gt;, and &lt;a href="https://github.com/uwescience/popcycle"&gt;popcycle&lt;/a&gt;, our software for storing indexing and analyzing SeaFlow data. We discussed needed improvements to popcycle and to the &lt;a href="https://github.com/uwescience/seaflow-viz"&gt;seaflow-viz&lt;/a&gt; web dashboard (see it here &lt;a href="https://uwescience.github.com/seaflow-viz"&gt;https://uwescience.github.com/seaflow-viz&lt;/a&gt;) for visualizing cruise performance and science in real time. &lt;a href="http://r.halper.in/coauth/sclayton"&gt;Sophie&lt;/a&gt; gave an update on the cruise she got back from a few weeks ago and on our work in the last two weeks analyzing cell diversity in Myria. &lt;a href="http://r.halper.in/coauth/fribalet"&gt;Francois&lt;/a&gt; gave an update on the new proposal we submitted to analyze population dynamics in SeaFlow data. Thinking ahead, we talked about &lt;a href="http://r.halper.in/coauth/swalwell"&gt;Jarred&lt;/a&gt;‘s agenda for scaling up SeaFlow data collection and what needs that would entail for automated instrument monitoring and the underlying data service; and we talked about how to demo “Myria for SeaFlow” to a broader audience.&lt;/p&gt;
&lt;p&gt;In the rest of the day, I worked on making &lt;a href="http://github.com/uwescience/raco"&gt;Raco&lt;/a&gt; better: adding some new optimization rules to streamline the types of plans that are emitted by the Flink compiler, and hacking/code reviewing with &lt;a href="http://r.halper.in/coauth/bdmyers"&gt;Brandon&lt;/a&gt; to get the &lt;a href="https://github.com/uwescience/raco/pull/269"&gt;MyriaL → Grappa support&lt;/a&gt; working better, and fixing a few little issues that cropped up.&lt;/p&gt;
&lt;p&gt;I also finally implemented, evaluated, and deployed the &lt;a href="https://github.com/uwescience/myria/pull/609"&gt;50x—100x speedup &lt;span class="caps"&gt;SQL&lt;/span&gt; query mod&lt;/a&gt; to the bottleneck query in &lt;a href="http://r.halper.in/coauth/domoritz"&gt;Dominik&lt;/a&gt;‘s fantastic Myria profiler. Now &lt;a href="https://demo.myria.cs.washington.edu/profile?queryId=32305"&gt;the profiling &lt;span class="caps"&gt;UI&lt;/span&gt; is super-snappy even for long programs&lt;/a&gt;.&lt;/p&gt;</summary><category term="myria"></category><category term="raco"></category><category term="seaflow"></category><category term="andrew"></category><category term="bill"></category><category term="brandon"></category><category term="dominik"></category><category term="francois"></category><category term="jarred"></category><category term="sophie"></category></entry><entry><title>2014-08-26 daily</title><link href="http://blog.halper.in/posts/2014/08/26/2014-08-26-daily/" rel="alternate"></link><updated>2014-08-26T23:07:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-26:posts/2014/08/26/2014-08-26-daily/</id><summary type="html">&lt;p&gt;One of the goals for our &lt;a href="http://github.com/uwescience/raco"&gt;Relational Algebra COmpiler (Raco)&lt;/a&gt; is that it should be a “relational algebra middleware” for many big data system backends. At the moment, we support: Myria (Myria Team) and Grappa (Brandon Myers), plus anything that speaks &lt;span class="caps"&gt;SQL&lt;/span&gt; including &lt;span class="caps"&gt;SQL&lt;/span&gt; Server but also Hive or Shark. Expanding this set will make the middleware vision real.&lt;/p&gt;
&lt;p&gt;I spent today hacking on the Raco → &lt;a href="http://flink.incubator.apache.org/"&gt;Flink&lt;/a&gt; pipeline. As of tonight, &lt;a href="https://github.com/uwescience/raco/tree/flink"&gt;I can produce Flink Java programs&lt;/a&gt; from MyriaL programs for a fairly fleshed-out &lt;span class="caps"&gt;SPJA&lt;/span&gt; subset of the language. I’m hoping that this experiment will&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;help us make Raco a better middleware for big data systems. (stay tuned!)&lt;/li&gt;
&lt;li&gt;lower the barrier to entry to using Flink (do you &lt;span class="caps"&gt;REALLY&lt;/span&gt; want to write Java code &lt;a href="https://github.com/apache/incubator-flink/blob/ce3ed7e0b769ab3ddc9a96666028ef45f6b01b6d/flink-examples/flink-java-examples/src/main/java/org/apache/flink/example/java/relational/RelationalQuery.java"&gt;like this&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;make it significantly easier to compare big data systems head-to-head.  (stay tuned!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Want to try exporting code for your favorite system from Raco/MyriaL? &lt;a href="mailto:raco@cs.washington.edu"&gt;Let us know!&lt;/a&gt;&lt;/p&gt;</summary><category term="myria"></category><category term="flink"></category></entry><entry><title>2014-08-25 daily</title><link href="http://blog.halper.in/posts/2014/08/25/2014-08-25-daily/" rel="alternate"></link><updated>2014-08-25T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-25:posts/2014/08/25/2014-08-25-daily/</id><summary type="html">&lt;p&gt;Another fantastic hack session with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie&lt;/a&gt; today. We analyzed the quality and quantity of data in the existing files, including determining which of the 64K SeaFlow samples are within a reasonable amount (say, 1σ) of the “average” SeaFlow sample according to the calibration beads. Surprisingly/hearteningly, the vast majority of the data is good! This bodes well for Sophie’s deeper analyses.&lt;/p&gt;
&lt;p&gt;More hacking Myria and code review. Mostly, fixing and improving things we identified with  last week.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry><entry><title>2014-08-22 daily</title><link href="http://blog.halper.in/posts/2014/08/22/2014-08-22-daily/" rel="alternate"></link><updated>2014-08-22T00:00:00-07:00</updated><author><name>Daniel Halperin</name></author><id>tag:blog.halper.in,2014-08-22:posts/2014/08/22/2014-08-22-daily/</id><summary type="html">&lt;p&gt;Started the day with a fantastic meeting with &lt;a href="http://armbrustlab.ocean.washington.edu/people/clayton"&gt;Sophie Clayton&lt;/a&gt; in the Armbrust Lab. Sophie is trying to analyze the entire SeaFlow corpus in &lt;a href="http://myria.cs.washington.edu"&gt;Myria&lt;/a&gt;. Today: she wrote queries to analyze ~64K files at once in MyriaL, which she is logging on &lt;a href="https://github.com/uwescience/seaflow-myria/wiki"&gt;a GitHub wiki&lt;/a&gt;. We ran into some memory pressure joining two 1.7B-rows (# particles measured by SeaFlow) datasets, but were able to work around it. The remaining queries were on the order of the # sample files and all finished with no problems in under 2 minutes.&lt;/p&gt;
&lt;p&gt;The other great part about working with Sophie is what I learn by seeing a real scientist who is extremely competent, but not a database expert, use the system. I generated at least &lt;a href="https://github.com/dhalperi?tab=contributions&amp;amp;from=2014-08-22#contribution-activity"&gt;7 new issues&lt;/a&gt; related to making Myria more usable. I spent my productive time in the rest of the day working on these issues.&lt;/p&gt;
&lt;p&gt;More code review for Myria.&lt;/p&gt;</summary><category term="seaflow"></category><category term="sophie"></category><category term="myria"></category></entry></feed>